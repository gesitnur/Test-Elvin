{"ast":null,"code":"import { h } from 'preact';\nimport classNames from 'classnames';\nimport remoteFileObjToLocal from '@uppy/utils/lib/remoteFileObjToLocal';\nimport Filter from \"./Filter.js\";\nimport FooterActions from \"./FooterActions.js\";\nimport Item from \"./Item/index.js\";\nconst VIRTUAL_SHARED_DIR = 'shared-with-me';\nfunction Browser(props) {\n  const currentSelection = props.currentSelection,\n    folders = props.folders,\n    files = props.files,\n    uppyFiles = props.uppyFiles,\n    viewType = props.viewType,\n    headerComponent = props.headerComponent,\n    showBreadcrumbs = props.showBreadcrumbs,\n    isChecked = props.isChecked,\n    toggleCheckbox = props.toggleCheckbox,\n    recordShiftKeyPress = props.recordShiftKeyPress,\n    handleScroll = props.handleScroll,\n    showTitles = props.showTitles,\n    i18n = props.i18n,\n    validateRestrictions = props.validateRestrictions,\n    showFilter = props.showFilter,\n    filterQuery = props.filterQuery,\n    filterInput = props.filterInput,\n    getNextFolder = props.getNextFolder,\n    cancel = props.cancel,\n    done = props.done,\n    columns = props.columns;\n  const selected = currentSelection.length;\n  return h(\"div\", {\n    className: classNames('uppy-ProviderBrowser', `uppy-ProviderBrowser-viewType--${viewType}`)\n  }, h(\"div\", {\n    className: \"uppy-ProviderBrowser-header\"\n  }, h(\"div\", {\n    className: classNames('uppy-ProviderBrowser-headerBar', !showBreadcrumbs && 'uppy-ProviderBrowser-headerBar--simple')\n  }, headerComponent)), showFilter && h(Filter, {\n    i18n: i18n,\n    filterQuery: filterQuery,\n    filterInput: filterInput\n  }), (() => {\n    if (!folders.length && !files.length) {\n      return h(\"div\", {\n        className: \"uppy-Provider-empty\"\n      }, i18n('noFilesFound'));\n    }\n    return h(\"div\", {\n      className: \"uppy-ProviderBrowser-body\"\n    }, h(\"ul\", {\n      className: \"uppy-ProviderBrowser-list\",\n      onScroll: handleScroll,\n      role: \"listbox\" // making <ul> not focusable for firefox\n      ,\n\n      tabIndex: \"-1\"\n    }, folders.map(folder => {\n      var _isChecked;\n      return Item({\n        columns,\n        showTitles,\n        viewType,\n        i18n,\n        id: folder.id,\n        title: folder.name,\n        getItemIcon: () => folder.icon,\n        isChecked: isChecked(folder),\n        toggleCheckbox: event => toggleCheckbox(event, folder),\n        recordShiftKeyPress,\n        type: 'folder',\n        isDisabled: (_isChecked = isChecked(folder)) == null ? void 0 : _isChecked.loading,\n        isCheckboxDisabled: folder.id === VIRTUAL_SHARED_DIR,\n        handleFolderClick: () => getNextFolder(folder)\n      });\n    }), files.map(file => {\n      const restrictionError = validateRestrictions(remoteFileObjToLocal(file), [...uppyFiles, ...currentSelection]);\n      return Item({\n        id: file.id,\n        title: file.name,\n        author: file.author,\n        getItemIcon: () => file.icon,\n        isChecked: isChecked(file),\n        toggleCheckbox: event => toggleCheckbox(event, file),\n        recordShiftKeyPress,\n        columns,\n        showTitles,\n        viewType,\n        i18n,\n        type: 'file',\n        isDisabled: restrictionError && !isChecked(file),\n        restrictionError\n      });\n    })));\n  })(), selected > 0 && h(FooterActions, {\n    selected: selected,\n    done: done,\n    cancel: cancel,\n    i18n: i18n\n  }));\n}\nexport default Browser;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}