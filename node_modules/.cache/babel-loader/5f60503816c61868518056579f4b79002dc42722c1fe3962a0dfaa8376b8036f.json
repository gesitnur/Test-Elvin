{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar _require = require('preact'),\n  h = _require.h;\nvar remoteFileObjToLocal = require('@uppy/utils/lib/remoteFileObjToLocal');\nvar Item = require('./Item/index'); // Hopefully this name will not be used by Google\n\nvar VIRTUAL_SHARED_DIR = 'shared-with-me';\nvar getSharedProps = function getSharedProps(fileOrFolder, props) {\n  return {\n    id: fileOrFolder.id,\n    title: fileOrFolder.name,\n    getItemIcon: function getItemIcon() {\n      return fileOrFolder.icon;\n    },\n    isChecked: props.isChecked(fileOrFolder),\n    toggleCheckbox: function toggleCheckbox(e) {\n      return props.toggleCheckbox(e, fileOrFolder);\n    },\n    columns: props.columns,\n    showTitles: props.showTitles,\n    viewType: props.viewType,\n    i18n: props.i18n\n  };\n};\nmodule.exports = function (props) {\n  var folders = props.folders,\n    files = props.files,\n    handleScroll = props.handleScroll,\n    isChecked = props.isChecked;\n  if (!folders.length && !files.length) {\n    return h(\"div\", {\n      className: \"uppy-Provider-empty\"\n    }, props.i18n('noFilesFound'));\n  }\n  return h(\"div\", {\n    className: \"uppy-ProviderBrowser-body\"\n  }, h(\"ul\", {\n    className: \"uppy-ProviderBrowser-list\",\n    onScroll: handleScroll,\n    role: \"listbox\" // making <ul> not focusable for firefox\n    ,\n\n    tabIndex: \"-1\"\n  }, folders.map(function (folder) {\n    return Item(_extends({}, getSharedProps(folder, props), {\n      type: 'folder',\n      isDisabled: isChecked(folder) ? isChecked(folder).loading : false,\n      isCheckboxDisabled: folder.id === VIRTUAL_SHARED_DIR,\n      handleFolderClick: function handleFolderClick() {\n        return props.handleFolderClick(folder);\n      }\n    }));\n  }), files.map(function (file) {\n    var validateRestrictions = props.validateRestrictions(remoteFileObjToLocal(file), [].concat(props.uppyFiles, props.currentSelection));\n    var sharedProps = getSharedProps(file, props);\n    var restrictionReason = validateRestrictions.reason;\n    return Item(_extends({}, sharedProps, {\n      type: 'file',\n      isDisabled: !validateRestrictions.result && !sharedProps.isChecked,\n      restrictionReason: restrictionReason\n    }));\n  })));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}