{"ast":null,"code":"var async = require('async');\n\nvar dom = require('./dom');\n\nvar fvd = require('fvd');\n\nvar util = require('./util');\n\nvar Watcher = require('./watcher');\n\nvar COMMA_SPLIT_RE = /\\s*,\\s*/;\nvar COLON_SPLIT_RE = /\\s*:\\s*/;\nexports.load = load;\nexports.parse = parse;\nexports.stringify = stringify;\n\nfunction load(fonts, callback) {\n  callback = util.fn(callback);\n  var arr;\n\n  try {\n    if (!util.isArray(fonts)) throw new Error('load requires a fonts array');\n    arr = util.map(fonts, function (font) {\n      return async.apply(loadFont, font);\n    });\n  } catch (ex) {\n    return util.catcher(ex, callback);\n  }\n\n  async.parallel(arr, callback);\n}\n\nfunction loadFont(font, callback) {\n  callback = util.fn(callback);\n  var arr;\n\n  try {\n    arr = [async.apply(loadStyleSheet, font.css), async.apply(watchFamilies, font.families)];\n  } catch (ex) {\n    return util.catcher(ex, callback);\n  }\n\n  async.series(arr, callback);\n}\n\nfunction loadStyleSheet(src, callback) {\n  callback = util.fn(callback);\n  var link = dom.createElement('link', {\n    rel: 'stylesheet',\n    href: src\n  });\n  var hasCalled = false;\n\n  link.onload = function () {\n    if (hasCalled) return;\n    hasCalled = true;\n    callback(null);\n  };\n\n  link.onerror = function () {\n    if (hasCalled) return;\n    hasCalled = true;\n    callback(new Error('failed to load CSS: ' + src));\n  };\n\n  dom.insert(link, 'head');\n}\n\nfunction watchFamilies(families, callback) {\n  callback = util.fn(callback);\n  var arr;\n\n  try {\n    arr = util.map(families, function (family) {\n      return async.apply(watchFont, parse(family));\n    });\n  } catch (ex) {\n    return util.catcher(ex, callback);\n  }\n\n  async.parallel(arr, callback);\n}\n\nfunction watchFont(font, callback) {\n  callback = util.fn(callback);\n  var arr;\n\n  try {\n    arr = util.map(font.variations, function (variation) {\n      var watcher = Watcher.create(font.family, variation);\n      return watcher.watch.bind(watcher);\n    });\n  } catch (ex) {\n    return util.catcher(ex, callback);\n  }\n\n  async.parallel(arr, callback);\n}\n\nfunction parse(family) {\n  if (typeof family !== 'string' || family.length < 1) return null;\n  var obj = {\n    family: null,\n    variations: []\n  };\n  var pair = family.split(COLON_SPLIT_RE).filter(function (n) {\n    return typeof n === 'string' && n.trim().length > 0;\n  });\n  var variations;\n  pair.forEach(function (n, i) {\n    return pair[i] = n.trim();\n  });\n  obj.family = pair[0];\n\n  if (pair.length < 2) {\n    obj.variations.push(fvd.compact());\n    return obj;\n  }\n\n  variations = pair[1].split(COMMA_SPLIT_RE).filter(function (n) {\n    return typeof n === 'string' && n.trim().length > 0 && fvd.expand(n.trim());\n  });\n  variations.forEach(function (n, i) {\n    return variations[i] = n.trim();\n  });\n  obj.variations = variations;\n  return obj;\n}\n\nfunction stringify(family) {\n  if (typeof family !== 'string' || family.length < 1) return null;\n  var parsed = parse(family);\n  var res = [];\n  var familyTokens;\n  if (!parsed) return null;\n  familyTokens = parsed.family.toLowerCase().split(' ');\n  parsed.variations.forEach(function (v) {\n    res.push(familyTokens.concat(v).join('-'));\n  });\n  return res;\n}","map":null,"metadata":{},"sourceType":"module"}