{"ast":null,"code":"// // Import the plugins\n// import Uppy from '@uppy/core'\n// import XHRUpload from '@uppy/xhr-upload'\n// import Dashboard from '@uppy/dashboard'\n\n// // And their styles (for UI plugins)\n// // With webpack and `style-loader`, you can import them like this:\n// import '@uppy/core/dist/style.css'\n// import '@uppy/dashboard/dist/style.css'\n\n// const uppy = new Uppy()\n//   .use(Dashboard, {\n//     trigger: '#select-files',\n//   })\n//   .use(XHRUpload, { endpoint: 'https://api2.transloadit.com' })\n\n// uppy.on('complete', (result) => {\n//   console.log('Upload complete! We’ve uploaded these files:', result.successful)\n// })\nvar Uppy = require(\"@uppy/core\");\n// const Dashboard = require(\"@uppy/dashboard\")\nvar XHRUpload = require(\"@uppy/xhr-upload\");\nvar GoogleDrive = require(\"@uppy/google-drive\");\nvar input = document.querySelector(\"input[type=file]\");\nvar form = document.querySelector(\"form\");\nvar csrfToken = document.querySelector('meta[name=\"csrf-token\"]').content;\nvar uppyTrigger = \"#js-uppy-upload\";\nvar uppyTriggerElement = document.querySelector(uppyTrigger);\nvar startUppy = function startUppy() {\n  var uppy = Uppy({\n    debug: true,\n    restrictions: {\n      allowedFileTypes: ['image/*', '.jpg', '.jpeg', '.png', '.gif']\n    }\n  }).use(Dashboard, {\n    trigger: uppyTrigger\n  }).use(GoogleDrive, {\n    target: Dashboard,\n    serverUrl: process.env.UPPY_COMPANION_SERVER_URL || \"http://localhost:3020\"\n  }).use(XHRUpload, {\n    endpoint: \"\".concat(process.env.APPLICATION_URL, \"/uploader/image\"),\n    bundle: false,\n    headers: {\n      \"X-CSRF-Token\": csrfToken\n    }\n  });\n  uppy.on(\"upload-success\", function (file, body) {\n    uppy.setFileState(file.id, {\n      xhr: Object.assign({}, file, {\n        uploadURL: body[\"uploadURL\"],\n        signedId: body[\"signedId\"]\n      })\n    });\n  });\n  uppy.on(\"complete\", function (result) {\n    result.successful.forEach(function (file) {\n      insertImageSignedId(form, input, file.xhr.signedId);\n    });\n  });\n};\nvar insertImageSignedId = function insertImageSignedId(form, input, signed_id) {\n  var hiddenField = document.createElement(\"input\");\n  hiddenField.setAttribute(\"type\", \"hidden\");\n  hiddenField.setAttribute(\"value\", signed_id);\n  hiddenField.name = input.name;\n  form.appendChild(hiddenField);\n};\nif (uppyTriggerElement) {\n  startUppy();\n}","map":{"version":3,"names":["Uppy","require","XHRUpload","GoogleDrive","input","document","querySelector","form","csrfToken","content","uppyTrigger","uppyTriggerElement","startUppy","uppy","debug","restrictions","allowedFileTypes","use","Dashboard","trigger","target","serverUrl","process","env","UPPY_COMPANION_SERVER_URL","endpoint","APPLICATION_URL","bundle","headers","on","file","body","setFileState","id","xhr","Object","assign","uploadURL","signedId","result","successful","forEach","insertImageSignedId","signed_id","hiddenField","createElement","setAttribute","name","appendChild"],"sources":["/home/gesit/Documents/Project/elvin/app/javascript/packs/fileMultiUpload.js"],"sourcesContent":["// // Import the plugins\n// import Uppy from '@uppy/core'\n// import XHRUpload from '@uppy/xhr-upload'\n// import Dashboard from '@uppy/dashboard'\n\n// // And their styles (for UI plugins)\n// // With webpack and `style-loader`, you can import them like this:\n// import '@uppy/core/dist/style.css'\n// import '@uppy/dashboard/dist/style.css'\n\n// const uppy = new Uppy()\n//   .use(Dashboard, {\n//     trigger: '#select-files',\n//   })\n//   .use(XHRUpload, { endpoint: 'https://api2.transloadit.com' })\n\n// uppy.on('complete', (result) => {\n//   console.log('Upload complete! We’ve uploaded these files:', result.successful)\n// })\nconst Uppy = require(\"@uppy/core\")\n// const Dashboard = require(\"@uppy/dashboard\")\nconst XHRUpload = require(\"@uppy/xhr-upload\")\nconst GoogleDrive = require(\"@uppy/google-drive\")\n\nconst input = document.querySelector(\"input[type=file]\")\nconst form = document.querySelector(\"form\")\nconst csrfToken = document.querySelector('meta[name=\"csrf-token\"]').content\nconst uppyTrigger = \"#js-uppy-upload\"\nconst uppyTriggerElement = document.querySelector(uppyTrigger)\n\nconst startUppy = () => {\n  const uppy = Uppy({\n    debug: true,\n    restrictions: {\n      allowedFileTypes: ['image/*', '.jpg', '.jpeg', '.png', '.gif']\n    },\n  })\n    .use(Dashboard, { trigger: uppyTrigger })\n    .use(GoogleDrive, {\n      target: Dashboard,\n      serverUrl: process.env.UPPY_COMPANION_SERVER_URL || \"http://localhost:3020\"\n    })\n    .use(XHRUpload, {\n      endpoint: `${process.env.APPLICATION_URL}/uploader/image`,\n      bundle: false,\n      headers: { \"X-CSRF-Token\": csrfToken }\n    })\n\n  uppy.on(\"upload-success\", (file, body) => {\n    uppy.setFileState(file.id, {\n      xhr: Object.assign({}, file, {\n        uploadURL: body[\"uploadURL\"],\n        signedId: body[\"signedId\"]\n      })\n    })\n  })\n\n  uppy.on(\"complete\", result => {\n    result.successful.forEach(file => {\n      insertImageSignedId(form, input, file.xhr.signedId)\n    })\n  })\n}\n\nconst insertImageSignedId = (form, input, signed_id) => {\n  const hiddenField = document.createElement(\"input\")\n  hiddenField.setAttribute(\"type\", \"hidden\")\n  hiddenField.setAttribute(\"value\", signed_id)\n  hiddenField.name = input.name\n  form.appendChild(hiddenField)\n}\n\nif (uppyTriggerElement) {\n  startUppy()\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,YAAY,CAAC;AAClC;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAME,WAAW,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAEjD,IAAMG,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC;AACxD,IAAMC,IAAI,GAAGF,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;AAC3C,IAAME,SAAS,GAAGH,QAAQ,CAACC,aAAa,CAAC,yBAAyB,CAAC,CAACG,OAAO;AAC3E,IAAMC,WAAW,GAAG,iBAAiB;AACrC,IAAMC,kBAAkB,GAAGN,QAAQ,CAACC,aAAa,CAACI,WAAW,CAAC;AAE9D,IAAME,SAAS,GAAG,SAAZA,SAAS,GAAS;EACtB,IAAMC,IAAI,GAAGb,IAAI,CAAC;IAChBc,KAAK,EAAE,IAAI;IACXC,YAAY,EAAE;MACZC,gBAAgB,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM;IAC/D;EACF,CAAC,CAAC,CACCC,GAAG,CAACC,SAAS,EAAE;IAAEC,OAAO,EAAET;EAAY,CAAC,CAAC,CACxCO,GAAG,CAACd,WAAW,EAAE;IAChBiB,MAAM,EAAEF,SAAS;IACjBG,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB,IAAI;EACtD,CAAC,CAAC,CACDP,GAAG,CAACf,SAAS,EAAE;IACduB,QAAQ,YAAKH,OAAO,CAACC,GAAG,CAACG,eAAe,oBAAiB;IACzDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAEpB;IAAU;EACvC,CAAC,CAAC;EAEJK,IAAI,CAACgB,EAAE,CAAC,gBAAgB,EAAE,UAACC,IAAI,EAAEC,IAAI,EAAK;IACxClB,IAAI,CAACmB,YAAY,CAACF,IAAI,CAACG,EAAE,EAAE;MACzBC,GAAG,EAAEC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,IAAI,EAAE;QAC3BO,SAAS,EAAEN,IAAI,CAAC,WAAW,CAAC;QAC5BO,QAAQ,EAAEP,IAAI,CAAC,UAAU;MAC3B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFlB,IAAI,CAACgB,EAAE,CAAC,UAAU,EAAE,UAAAU,MAAM,EAAI;IAC5BA,MAAM,CAACC,UAAU,CAACC,OAAO,CAAC,UAAAX,IAAI,EAAI;MAChCY,mBAAmB,CAACnC,IAAI,EAAEH,KAAK,EAAE0B,IAAI,CAACI,GAAG,CAACI,QAAQ,CAAC;IACrD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAInC,IAAI,EAAEH,KAAK,EAAEuC,SAAS,EAAK;EACtD,IAAMC,WAAW,GAAGvC,QAAQ,CAACwC,aAAa,CAAC,OAAO,CAAC;EACnDD,WAAW,CAACE,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC1CF,WAAW,CAACE,YAAY,CAAC,OAAO,EAAEH,SAAS,CAAC;EAC5CC,WAAW,CAACG,IAAI,GAAG3C,KAAK,CAAC2C,IAAI;EAC7BxC,IAAI,CAACyC,WAAW,CAACJ,WAAW,CAAC;AAC/B,CAAC;AAED,IAAIjC,kBAAkB,EAAE;EACtBC,SAAS,EAAE;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}