{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('@uppy/core'),\n  Plugin = _require.Plugin;\nvar Editor = require('./Editor');\nvar Translator = require('@uppy/utils/lib/Translator');\nvar _require2 = require('preact'),\n  h = _require2.h;\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(ImageEditor, _Plugin);\n  function ImageEditor(uppy, opts) {\n    var _this;\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.save = function () {\n      var saveBlobCallback = function saveBlobCallback(blob) {\n        var _this$getPluginState = _this.getPluginState(),\n          currentImage = _this$getPluginState.currentImage;\n        _this.uppy.setFileState(currentImage.id, {\n          data: blob,\n          size: blob.size,\n          preview: null\n        });\n        var updatedFile = _this.uppy.getFile(currentImage.id);\n        _this.uppy.emit('thumbnail:request', updatedFile);\n        _this.setPluginState({\n          currentImage: updatedFile\n        });\n        _this.uppy.emit('file-editor:complete', updatedFile);\n      };\n      var _this$getPluginState2 = _this.getPluginState(),\n        currentImage = _this$getPluginState2.currentImage;\n      _this.cropper.getCroppedCanvas().toBlob(saveBlobCallback, currentImage.type, _this.opts.quality);\n    };\n    _this.storeCropperInstance = function (cropper) {\n      _this.cropper = cropper;\n    };\n    _this.selectFile = function (file) {\n      _this.uppy.emit('file-editor:start', file);\n      _this.setPluginState({\n        currentImage: file\n      });\n    };\n    _this.id = _this.opts.id || 'ImageEditor';\n    _this.title = 'Image Editor';\n    _this.type = 'editor';\n    _this.defaultLocale = {\n      strings: {\n        revert: 'Revert',\n        rotate: 'Rotate',\n        zoomIn: 'Zoom in',\n        zoomOut: 'Zoom out',\n        flipHorizontal: 'Flip horizontal',\n        aspectRatioSquare: 'Crop square',\n        aspectRatioLandscape: 'Crop landscape (16:9)',\n        aspectRatioPortrait: 'Crop portrait (9:16)'\n      }\n    };\n    var defaultCropperOptions = {\n      viewMode: 1,\n      background: false,\n      autoCropArea: 1,\n      responsive: true\n    };\n    var defaultActions = {\n      revert: true,\n      rotate: true,\n      granularRotate: true,\n      flip: true,\n      zoomIn: true,\n      zoomOut: true,\n      cropSquare: true,\n      cropWidescreen: true,\n      cropWidescreenVertical: true\n    };\n    var defaultOptions = {\n      quality: 0.8\n    };\n    _this.opts = _extends({}, defaultOptions, opts, {\n      actions: _extends({}, defaultActions, opts.actions),\n      cropperOptions: _extends({}, defaultCropperOptions, opts.cropperOptions)\n    });\n    _this.i18nInit();\n    return _this;\n  }\n  var _proto = ImageEditor.prototype;\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n    this.i18nInit();\n  };\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator); // this.i18nArray = this.translator.translateArray.bind(this.translator)\n\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  };\n\n  _proto.canEditFile = function canEditFile(file) {\n    if (!file.type || file.isRemote) {\n      return false;\n    }\n    var fileTypeSpecific = file.type.split('/')[1];\n    if (/^(jpe?g|gif|png|bmp|webp)$/.test(fileTypeSpecific)) {\n      return true;\n    }\n    return false;\n  };\n  _proto.install = function install() {\n    this.setPluginState({\n      currentImage: null\n    });\n    var target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n  _proto.render = function render() {\n    var _this$getPluginState3 = this.getPluginState(),\n      currentImage = _this$getPluginState3.currentImage;\n    if (currentImage === null || currentImage.isRemote) {\n      return;\n    }\n    return h(Editor, {\n      currentImage: currentImage,\n      storeCropperInstance: this.storeCropperInstance,\n      save: this.save,\n      opts: this.opts,\n      i18n: this.i18n\n    });\n  };\n  return ImageEditor;\n}(Plugin), _class.VERSION = \"0.4.0\", _temp);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}