{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar has = require('./hasProperty');\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {object|Array<object>} locales - locale or list of locales.\n   */\n  function Translator(locales) {\n    var _this = this;\n    this.locale = {\n      strings: {},\n      pluralize: function pluralize(n) {\n        if (n === 1) {\n          return 0;\n        }\n        return 1;\n      }\n    };\n    if (Array.isArray(locales)) {\n      locales.forEach(function (locale) {\n        return _this._apply(locale);\n      });\n    } else {\n      this._apply(locales);\n    }\n  }\n  var _proto = Translator.prototype;\n  _proto._apply = function _apply(locale) {\n    if (!locale || !locale.strings) {\n      return;\n    }\n    var prevLocale = this.locale;\n    this.locale = _extends({}, prevLocale, {\n      strings: _extends({}, prevLocale.strings, locale.strings)\n    });\n    this.locale.pluralize = locale.pluralize || prevLocale.pluralize;\n  }\n  /**\n   * Takes a string with placeholder variables like `%{smart_count} file selected`\n   * and replaces it with values from options `{smart_count: 5}`\n   *\n   * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n   * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n   *\n   * @param {string} phrase that needs interpolation, with placeholders\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {any[]} interpolated\n   */;\n\n  _proto.interpolate = function interpolate(phrase, options) {\n    var _String$prototype = String.prototype,\n      split = _String$prototype.split,\n      replace = _String$prototype.replace;\n    var dollarRegex = /\\$/g;\n    var dollarBillsYall = '$$$$';\n    var interpolated = [phrase];\n    for (var arg in options) {\n      if (arg !== '_' && has(options, arg)) {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        var replacement = options[arg];\n        if (typeof replacement === 'string') {\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\n        } // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n\n        interpolated = insertReplacement(interpolated, new RegExp(\"%\\\\{\" + arg + \"\\\\}\", 'g'), replacement);\n      }\n    }\n    return interpolated;\n    function insertReplacement(source, rx, replacement) {\n      var newParts = [];\n      source.forEach(function (chunk) {\n        // When the source contains multiple placeholders for interpolation,\n        // we should ignore chunks that are not strings, because those\n        // can be JSX objects and will be otherwise incorrectly turned into strings.\n        // Without this condition weâ€™d get this: [object Object] hello [object Object] my <button>\n        if (typeof chunk !== 'string') {\n          return newParts.push(chunk);\n        }\n        split.call(chunk, rx).forEach(function (raw, i, list) {\n          if (raw !== '') {\n            newParts.push(raw);\n          } // Interlace with the `replacement` value\n\n          if (i < list.length - 1) {\n            newParts.push(replacement);\n          }\n        });\n      });\n      return newParts;\n    }\n  }\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @returns {string} translated (and interpolated)\n   */;\n\n  _proto.translate = function translate(key, options) {\n    return this.translateArray(key, options).join('');\n  }\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {Array} The translated and interpolated parts, in order.\n   */;\n\n  _proto.translateArray = function translateArray(key, options) {\n    if (!has(this.locale.strings, key)) {\n      throw new Error(\"missing string: \" + key);\n    }\n    var string = this.locale.strings[key];\n    var hasPluralForms = typeof string === 'object';\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        var plural = this.locale.pluralize(options.smart_count);\n        return this.interpolate(string[plural], options);\n      }\n      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n    }\n    return this.interpolate(string, options);\n  };\n  return Translator;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}