{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar FileItem = require('./FileItem/index.js');\nvar VirtualList = require('./VirtualList');\nvar classNames = require('classnames');\nvar _require = require('preact'),\n  h = _require.h;\nfunction chunks(list, size) {\n  var chunked = [];\n  var currentChunk = [];\n  list.forEach(function (item, i) {\n    if (currentChunk.length < size) {\n      currentChunk.push(item);\n    } else {\n      chunked.push(currentChunk);\n      currentChunk = [item];\n    }\n  });\n  if (currentChunk.length) chunked.push(currentChunk);\n  return chunked;\n}\nmodule.exports = function (props) {\n  var noFiles = props.totalFileCount === 0;\n  var dashboardFilesClass = classNames('uppy-Dashboard-files', {\n    'uppy-Dashboard-files--noFiles': noFiles\n  }); // It's not great that this is hardcoded!\n  // It's ESPECIALLY not great that this is checking against `itemsPerRow`!\n\n  var rowHeight = props.itemsPerRow === 1 // Mobile\n  ? 71 // 190px height + 2 * 5px margin\n  : 200;\n  var fileProps = {\n    // FIXME This is confusing, it's actually the Dashboard's plugin ID\n    id: props.id,\n    error: props.error,\n    // TODO move this to context\n    i18n: props.i18n,\n    log: props.log,\n    info: props.info,\n    // features\n    acquirers: props.acquirers,\n    resumableUploads: props.resumableUploads,\n    individualCancellation: props.individualCancellation,\n    // visual options\n    hideRetryButton: props.hideRetryButton,\n    hidePauseResumeButton: props.hidePauseResumeButton,\n    hideCancelButton: props.hideCancelButton,\n    showLinkToFileUploadResult: props.showLinkToFileUploadResult,\n    showRemoveButtonAfterComplete: props.showRemoveButtonAfterComplete,\n    isWide: props.isWide,\n    metaFields: props.metaFields,\n    recoveredState: props.recoveredState,\n    // callbacks\n    retryUpload: props.retryUpload,\n    pauseUpload: props.pauseUpload,\n    cancelUpload: props.cancelUpload,\n    toggleFileCard: props.toggleFileCard,\n    removeFile: props.removeFile,\n    handleRequestThumbnail: props.handleRequestThumbnail,\n    handleCancelThumbnail: props.handleCancelThumbnail\n  };\n  var sortByGhostComesFirst = function sortByGhostComesFirst(file1, file2) {\n    return props.files[file2].isGhost - props.files[file1].isGhost;\n  }; // Sort files by file.isGhost, ghost files first, only if recoveredState is present\n\n  var files = Object.keys(props.files);\n  if (props.recoveredState) files.sort(sortByGhostComesFirst);\n  var rows = chunks(files, props.itemsPerRow);\n  function renderRow(row) {\n    return (\n      // The `role=\"presentation` attribute ensures that the list items are properly associated with the `VirtualList` element\n      // We use the first file ID as the keyâ€”this should not change across scroll rerenders\n      h(\"div\", {\n        role: \"presentation\",\n        key: row[0]\n      }, row.map(function (fileID) {\n        return h(FileItem, _extends({\n          key: fileID\n        }, fileProps, {\n          role: \"listitem\",\n          openFileEditor: props.openFileEditor,\n          canEditFile: props.canEditFile,\n          toggleAddFilesPanel: props.toggleAddFilesPanel,\n          file: props.files[fileID]\n        }));\n      }))\n    );\n  }\n  return h(VirtualList, {\n    class: dashboardFilesClass,\n    role: \"list\",\n    data: rows,\n    renderRow: renderRow,\n    rowHeight: rowHeight\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}