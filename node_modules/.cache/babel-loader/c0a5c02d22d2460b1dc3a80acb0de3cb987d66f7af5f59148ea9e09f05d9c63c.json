{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { h } from 'preact';\nimport { UIPlugin } from '@uppy/core';\nimport { RequestClient } from '@uppy/companion-client';\nimport toArray from '@uppy/utils/lib/toArray';\nimport UrlUI from \"./UrlUI.js\";\nimport forEachDroppedOrPastedUrl from './utils/forEachDroppedOrPastedUrl.js';\nconst packageJson = {\n  \"version\": \"3.1.0\"\n};\nimport locale from './locale.js';\nfunction UrlIcon() {\n  return h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    width: \"32\",\n    height: \"32\",\n    viewBox: \"0 0 32 32\"\n  }, h(\"g\", {\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, h(\"rect\", {\n    className: \"uppy-ProviderIconBg\",\n    fill: \"#FF753E\",\n    width: \"32\",\n    height: \"32\",\n    rx: \"16\"\n  }), h(\"path\", {\n    d: \"M22.788 15.389l-2.199 2.19a3.184 3.184 0 0 1-.513.437c-.806.584-1.686.876-2.638.876a4.378 4.378 0 0 1-3.519-1.752c-.22-.292-.146-.802.147-1.021.293-.22.806-.146 1.026.146.953 1.313 2.785 1.532 4.105.583a.571.571 0 0 0 .293-.292l2.199-2.189c1.1-1.167 1.1-2.992-.073-4.086a2.976 2.976 0 0 0-4.105 0l-1.246 1.24a.71.71 0 0 1-1.026 0 .703.703 0 0 1 0-1.022l1.246-1.24a4.305 4.305 0 0 1 6.083 0c1.833 1.605 1.906 4.451.22 6.13zm-7.183 5.035l-1.246 1.24a2.976 2.976 0 0 1-4.105 0c-1.172-1.094-1.172-2.991-.073-4.086l2.2-2.19.292-.291c.66-.438 1.393-.657 2.2-.584.805.146 1.465.51 1.905 1.168.22.292.733.365 1.026.146.293-.22.367-.73.147-1.022-.733-.949-1.76-1.532-2.859-1.678-1.1-.22-2.272.073-3.225.802l-.44.438-2.199 2.19c-1.686 1.75-1.612 4.524.074 6.202.88.803 1.979 1.241 3.078 1.241 1.1 0 2.199-.438 3.079-1.24l1.246-1.241a.703.703 0 0 0 0-1.022c-.294-.292-.807-.365-1.1-.073z\",\n    fill: \"#FFF\",\n    fillRule: \"nonzero\"\n  })));\n}\nfunction addProtocolToURL(url) {\n  const protocolRegex = /^[a-z0-9]+:\\/\\//;\n  const defaultProtocol = 'http://';\n  if (protocolRegex.test(url)) {\n    return url;\n  }\n  return defaultProtocol + url;\n}\nfunction canHandleRootDrop(e) {\n  const items = toArray(e.dataTransfer.items);\n  const urls = items.filter(item => item.kind === 'string' && item.type === 'text/uri-list');\n  return urls.length > 0;\n}\nfunction checkIfCorrectURL(url) {\n  if (!url) return false;\n  const protocol = url.match(/^([a-z0-9]+):\\/\\//)[1];\n  if (protocol !== 'http' && protocol !== 'https') {\n    return false;\n  }\n  return true;\n}\nfunction getFileNameFromUrl(url) {\n  const _URL = new URL(url),\n    pathname = _URL.pathname;\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n/**\n * Url\n *\n */\n\nexport default class Url extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'Url';\n    this.title = this.opts.title || 'Link';\n    this.type = 'acquirer';\n    this.icon = () => h(UrlIcon, null); // Set default options and locale\n\n    this.defaultLocale = locale;\n    const defaultOptions = {};\n    this.opts = _objectSpread(_objectSpread({}, defaultOptions), opts);\n    this.i18nInit();\n    this.hostname = this.opts.companionUrl;\n    if (!this.hostname) {\n      throw new Error('Companion hostname is required, please consult https://uppy.io/docs/companion');\n    } // Bind all event handlers for referencability\n\n    this.getMeta = this.getMeta.bind(this);\n    this.addFile = this.addFile.bind(this);\n    this.handleRootDrop = this.handleRootDrop.bind(this);\n    this.handleRootPaste = this.handleRootPaste.bind(this);\n    this.client = new RequestClient(uppy, {\n      companionUrl: this.opts.companionUrl,\n      companionHeaders: this.opts.companionHeaders,\n      companionCookiesRule: this.opts.companionCookiesRule\n    });\n  }\n  getMeta(url) {\n    return this.client.post('url/meta', {\n      url\n    }).then(res => {\n      if (res.error) {\n        this.uppy.log('[URL] Error:');\n        this.uppy.log(res.error);\n        throw new Error('Failed to fetch the file');\n      }\n      return res;\n    });\n  }\n  async addFile(protocollessUrl, optionalMeta) {\n    if (optionalMeta === void 0) {\n      optionalMeta = undefined;\n    }\n    const url = addProtocolToURL(protocollessUrl);\n    if (!checkIfCorrectURL(url)) {\n      this.uppy.log(`[URL] Incorrect URL entered: ${url}`);\n      this.uppy.info(this.i18n('enterCorrectUrl'), 'error', 4000);\n      return undefined;\n    }\n    try {\n      const meta = await this.getMeta(url);\n      const tagFile = {\n        meta: optionalMeta,\n        source: this.id,\n        name: getFileNameFromUrl(url),\n        type: meta.type,\n        data: {\n          size: meta.size\n        },\n        isRemote: true,\n        body: {\n          url\n        },\n        remote: {\n          companionUrl: this.opts.companionUrl,\n          url: `${this.hostname}/url/get`,\n          body: {\n            fileId: url,\n            url\n          },\n          providerOptions: this.client.opts\n        }\n      };\n      this.uppy.log('[Url] Adding remote file');\n      try {\n        return this.uppy.addFile(tagFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          this.uppy.log(err);\n        }\n        return err;\n      }\n    } catch (err) {\n      this.uppy.log(err);\n      this.uppy.info({\n        message: this.i18n('failedToFetch'),\n        details: err\n      }, 'error', 4000);\n      return err;\n    }\n  }\n  handleRootDrop(e) {\n    forEachDroppedOrPastedUrl(e.dataTransfer, 'drop', url => {\n      this.uppy.log(`[URL] Adding file from dropped url: ${url}`);\n      this.addFile(url);\n    });\n  }\n  handleRootPaste(e) {\n    forEachDroppedOrPastedUrl(e.clipboardData, 'paste', url => {\n      this.uppy.log(`[URL] Adding file from pasted url: ${url}`);\n      this.addFile(url);\n    });\n  }\n  render() {\n    return h(UrlUI, {\n      i18n: this.i18n,\n      addFile: this.addFile\n    });\n  }\n  install() {\n    const target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n} // This is defined outside of the class body because it's not using `this`, but\n// we still want it available on the prototype so the Dashboard can access it.\n\nUrl.VERSION = packageJson.version;\nUrl.prototype.canHandleRootDrop = canHandleRootDrop;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}