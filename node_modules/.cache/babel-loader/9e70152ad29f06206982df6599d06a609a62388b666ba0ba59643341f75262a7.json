{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('preact'),\n  h = _require.h,\n  Component = _require.Component;\nvar classNames = require('classnames');\nvar getFileTypeIcon = require('../../utils/getFileTypeIcon');\nvar ignoreEvent = require('../../utils/ignoreEvent.js');\nvar FilePreview = require('../FilePreview');\nvar FileCard = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(FileCard, _Component);\n  function FileCard(props) {\n    var _this;\n    _this = _Component.call(this, props) || this;\n    _this.updateMeta = function (newVal, name) {\n      var _extends2;\n      _this.setState({\n        formState: _extends({}, _this.state.formState, (_extends2 = {}, _extends2[name] = newVal, _extends2))\n      });\n    };\n    _this.handleSave = function (e) {\n      e.preventDefault();\n      var fileID = _this.props.fileCardFor;\n      _this.props.saveFileCard(_this.state.formState, fileID);\n    };\n    _this.handleCancel = function () {\n      _this.props.toggleFileCard(false);\n    };\n    _this.saveOnEnter = function (ev) {\n      if (ev.keyCode === 13) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        var file = _this.props.files[_this.props.fileCardFor];\n        _this.props.saveFileCard(_this.state.formState, file.id);\n      }\n    };\n    _this.renderMetaFields = function () {\n      var metaFields = _this.getMetaFields() || [];\n      var fieldCSSClasses = {\n        text: 'uppy-u-reset uppy-c-textInput uppy-Dashboard-FileCard-input'\n      };\n      return metaFields.map(function (field) {\n        var id = \"uppy-Dashboard-FileCard-input-\" + field.id;\n        var required = _this.props.requiredMetaFields.includes(field.id);\n        return h(\"fieldset\", {\n          key: field.id,\n          className: \"uppy-Dashboard-FileCard-fieldset\"\n        }, h(\"label\", {\n          className: \"uppy-Dashboard-FileCard-label\",\n          htmlFor: id\n        }, field.name), field.render !== undefined ? field.render({\n          value: _this.state.formState[field.id],\n          onChange: function onChange(newVal) {\n            return _this.updateMeta(newVal, field.id);\n          },\n          fieldCSSClasses: fieldCSSClasses,\n          required: required\n        }, h) : h(\"input\", {\n          className: fieldCSSClasses.text,\n          id: id,\n          type: field.type || 'text',\n          required: required,\n          value: _this.state.formState[field.id],\n          placeholder: field.placeholder,\n          onKeyUp: _this.saveOnEnter,\n          onKeyDown: _this.saveOnEnter,\n          onKeyPress: _this.saveOnEnter,\n          onInput: function onInput(ev) {\n            return _this.updateMeta(ev.target.value, field.id);\n          },\n          \"data-uppy-super-focusable\": true\n        }));\n      });\n    };\n    var _file = _this.props.files[_this.props.fileCardFor];\n    var _metaFields = _this.getMetaFields() || [];\n    var storedMetaData = {};\n    _metaFields.forEach(function (field) {\n      storedMetaData[field.id] = _file.meta[field.id] || '';\n    });\n    _this.state = {\n      formState: storedMetaData\n    };\n    return _this;\n  }\n  var _proto = FileCard.prototype;\n  _proto.getMetaFields = function getMetaFields() {\n    return typeof this.props.metaFields === 'function' ? this.props.metaFields(this.props.files[this.props.fileCardFor]) : this.props.metaFields;\n  };\n  _proto.render = function render() {\n    var _this2 = this;\n    var file = this.props.files[this.props.fileCardFor];\n    var showEditButton = this.props.canEditFile(file);\n    return h(\"div\", {\n      className: classNames('uppy-Dashboard-FileCard', this.props.className),\n      \"data-uppy-panelType\": \"FileCard\",\n      onDragOver: ignoreEvent,\n      onDragLeave: ignoreEvent,\n      onDrop: ignoreEvent,\n      onPaste: ignoreEvent\n    }, h(\"div\", {\n      className: \"uppy-DashboardContent-bar\"\n    }, h(\"div\", {\n      className: \"uppy-DashboardContent-title\",\n      role: \"heading\",\n      \"aria-level\": \"1\"\n    }, this.props.i18nArray('editing', {\n      file: h(\"span\", {\n        className: \"uppy-DashboardContent-titleFile\"\n      }, file.meta ? file.meta.name : file.name)\n    })), h(\"button\", {\n      className: \"uppy-DashboardContent-back\",\n      type: \"button\",\n      title: this.props.i18n('finishEditingFile'),\n      onClick: this.handleCancel\n    }, this.props.i18n('cancel'))), h(\"div\", {\n      className: \"uppy-Dashboard-FileCard-inner\"\n    }, h(\"div\", {\n      className: \"uppy-Dashboard-FileCard-preview\",\n      style: {\n        backgroundColor: getFileTypeIcon(file.type).color\n      }\n    }, h(FilePreview, {\n      file: file\n    }), showEditButton && h(\"button\", {\n      type: \"button\",\n      className: \"uppy-u-reset uppy-c-btn uppy-Dashboard-FileCard-edit\",\n      onClick: function onClick() {\n        return _this2.props.openFileEditor(file);\n      }\n    }, this.props.i18n('editFile'))), h(\"div\", {\n      className: \"uppy-Dashboard-FileCard-info\"\n    }, this.renderMetaFields()), h(\"div\", {\n      className: \"uppy-Dashboard-FileCard-actions\"\n    }, h(\"button\", {\n      className: \"uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Dashboard-FileCard-actionsBtn\" // If `form` attribute is not in Preact 8, we canâ€™t trigger the form validation.\n      // We use a classic button with a onClick event handler.\n      ,\n\n      type: \"button\",\n      onClick: this.handleSave\n    }, this.props.i18n('saveChanges')), h(\"button\", {\n      className: \"uppy-u-reset uppy-c-btn uppy-c-btn-link uppy-Dashboard-FileCard-actionsBtn\",\n      type: \"button\",\n      onClick: this.handleCancel\n    }, this.props.i18n('cancel')))));\n  };\n  return FileCard;\n}(Component);\nmodule.exports = FileCard;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}