{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Get uppy instance IDs for which state is stored.\n */\nfunction findUppyInstances() {\n  const instances = [];\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (/^uppyState:/.test(key)) {\n      instances.push(key.slice('uppyState:'.length));\n    }\n  }\n  return instances;\n}\n/**\n * Try to JSON-parse a string, return null on failure.\n */\n\nfunction maybeParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return null;\n  }\n}\nlet cleanedUp = false;\nexport default class MetaDataStore {\n  constructor(opts) {\n    this.opts = _objectSpread({\n      expires: 24 * 60 * 60 * 1000\n    }, opts);\n    this.name = `uppyState:${opts.storeName}`;\n    if (!cleanedUp) {\n      cleanedUp = true;\n      MetaDataStore.cleanup();\n    }\n  }\n  /**\n   *\n   */\n\n  load() {\n    const savedState = localStorage.getItem(this.name);\n    if (!savedState) return null;\n    const data = maybeParse(savedState);\n    if (!data) return null; // Upgrade pre-0.20.0 uppyState: it used to be just a flat object,\n    // without `expires`.\n\n    if (!data.metadata) {\n      this.save(data);\n      return data;\n    }\n    return data.metadata;\n  }\n  save(metadata) {\n    const expires = Date.now() + this.opts.expires;\n    const state = JSON.stringify({\n      metadata,\n      expires\n    });\n    localStorage.setItem(this.name, state);\n  }\n  /**\n   * Remove all expired state.\n   */\n\n  static cleanup(instanceID) {\n    if (instanceID) {\n      localStorage.removeItem(`uppyState:${instanceID}`);\n      return;\n    }\n    const instanceIDs = findUppyInstances();\n    const now = Date.now();\n    instanceIDs.forEach(id => {\n      const data = localStorage.getItem(`uppyState:${id}`);\n      if (!data) return;\n      const obj = maybeParse(data);\n      if (!obj) return;\n      if (obj.expires && obj.expires < now) {\n        localStorage.removeItem(`uppyState:${id}`);\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}