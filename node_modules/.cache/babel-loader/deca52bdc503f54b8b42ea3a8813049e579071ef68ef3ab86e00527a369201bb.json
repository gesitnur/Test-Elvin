{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { h, Component } from 'preact';\nclass StopWatch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elapsedTime: 0\n    };\n    this.wrapperStyle = {\n      width: '100%',\n      height: '100%',\n      display: 'flex'\n    };\n    this.overlayStyle = {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      background: 'black',\n      opacity: 0.7\n    };\n    this.infoContainerStyle = {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginTop: 'auto',\n      marginBottom: 'auto',\n      zIndex: 1,\n      color: 'white'\n    };\n    this.infotextStyle = {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: '1rem',\n      fontSize: '1.5rem'\n    };\n    this.timeStyle = {\n      display: 'block',\n      fontWeight: 'bold',\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      fontSize: '3rem',\n      fontFamily: 'Courier New'\n    };\n  }\n  startTimer() {\n    this.timerTick();\n    this.timerRunning = true;\n  }\n  resetTimer() {\n    clearTimeout(this.timer);\n    this.setState({\n      elapsedTime: 0\n    });\n    this.timerRunning = false;\n  }\n  timerTick() {\n    this.timer = setTimeout(() => {\n      this.setState(state => ({\n        elapsedTime: state.elapsedTime + 1\n      }));\n      this.timerTick();\n    }, 1000);\n  } // eslint-disable-next-line class-methods-use-this\n\n  fmtMSS(s) {\n    // eslint-disable-next-line no-return-assign, no-param-reassign\n    return (s - (s %= 60)) / 60 + (s > 9 ? ':' : ':0') + s;\n  }\n  render() {\n    const _this$props = _objectSpread({}, this.props),\n      recording = _this$props.recording,\n      i18n = _this$props.i18n;\n    const elapsedTime = this.state.elapsedTime; // second to minutes and seconds\n\n    const minAndSec = this.fmtMSS(elapsedTime);\n    if (recording && !this.timerRunning) {\n      this.startTimer();\n    }\n    if (!recording && this.timerRunning) {\n      this.resetTimer();\n    }\n    if (recording) {\n      return h(\"div\", {\n        style: this.wrapperStyle\n      }, h(\"div\", {\n        style: this.overlayStyle\n      }), h(\"div\", {\n        style: this.infoContainerStyle\n      }, h(\"div\", {\n        style: this.infotextStyle\n      }, i18n('recording')), h(\"div\", {\n        style: this.timeStyle\n      }, minAndSec)));\n    }\n    return null;\n  }\n}\nexport default StopWatch;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}