{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar Emitter = require('component-emitter');\n/**\n * Track completion of multiple assemblies.\n *\n * Emits 'assembly-complete' when an assembly completes.\n * Emits 'assembly-error' when an assembly fails.\n * Exposes a `.promise` property that resolves when all assemblies have\n * completed (or failed).\n */\n\nvar TransloaditAssemblyWatcher = /*#__PURE__*/function (_Emitter) {\n  _inheritsLoose(TransloaditAssemblyWatcher, _Emitter);\n  function TransloaditAssemblyWatcher(uppy, assemblyIDs) {\n    var _this;\n    _this = _Emitter.call(this) || this;\n    _this._uppy = uppy;\n    _this._assemblyIDs = assemblyIDs;\n    _this._remaining = assemblyIDs.length;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n    _this._onAssemblyComplete = _this._onAssemblyComplete.bind(_assertThisInitialized(_this));\n    _this._onAssemblyCancel = _this._onAssemblyCancel.bind(_assertThisInitialized(_this));\n    _this._onAssemblyError = _this._onAssemblyError.bind(_assertThisInitialized(_this));\n    _this._onImportError = _this._onImportError.bind(_assertThisInitialized(_this));\n    _this._addListeners();\n    return _this;\n  }\n  /**\n   * Are we watching this assembly ID?\n   */\n\n  var _proto = TransloaditAssemblyWatcher.prototype;\n  _proto._watching = function _watching(id) {\n    return this._assemblyIDs.indexOf(id) !== -1;\n  };\n  _proto._onAssemblyComplete = function _onAssemblyComplete(assembly) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n    this._uppy.log(\"[Transloadit] AssemblyWatcher: Got Assembly finish \" + assembly.assembly_id);\n    this.emit('assembly-complete', assembly.assembly_id);\n    this._checkAllComplete();\n  };\n  _proto._onAssemblyCancel = function _onAssemblyCancel(assembly) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n    this._checkAllComplete();\n  };\n  _proto._onAssemblyError = function _onAssemblyError(assembly, error) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n    this._uppy.log(\"[Transloadit] AssemblyWatcher: Got Assembly error \" + assembly.assembly_id);\n    this._uppy.log(error);\n    this.emit('assembly-error', assembly.assembly_id, error);\n    this._checkAllComplete();\n  };\n  _proto._onImportError = function _onImportError(assembly, fileID, error) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    } // Not sure if we should be doing something when it's just one file failing.\n    // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n    // I think failing the upload is better than silently ignoring.\n    // In the future we should maybe have a way to resolve uploads with some failures,\n    // like returning an object with `{ successful, failed }` uploads.\n\n    this._onAssemblyError(assembly, error);\n  };\n  _proto._checkAllComplete = function _checkAllComplete() {\n    this._remaining -= 1;\n    if (this._remaining === 0) {\n      // We're done, these listeners can be removed\n      this._removeListeners();\n      this._resolve();\n    }\n  };\n  _proto._removeListeners = function _removeListeners() {\n    this._uppy.off('transloadit:complete', this._onAssemblyComplete);\n    this._uppy.off('transloadit:assembly-cancel', this._onAssemblyCancel);\n    this._uppy.off('transloadit:assembly-error', this._onAssemblyError);\n    this._uppy.off('transloadit:import-error', this._onImportError);\n  };\n  _proto._addListeners = function _addListeners() {\n    this._uppy.on('transloadit:complete', this._onAssemblyComplete);\n    this._uppy.on('transloadit:assembly-cancel', this._onAssemblyCancel);\n    this._uppy.on('transloadit:assembly-error', this._onAssemblyError);\n    this._uppy.on('transloadit:import-error', this._onImportError);\n  };\n  return TransloaditAssemblyWatcher;\n}(Emitter);\nmodule.exports = TransloaditAssemblyWatcher;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}