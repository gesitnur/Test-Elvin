{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar _require = require('@uppy/utils/lib/AbortController'),\n  AbortController = _require.AbortController,\n  createAbortError = _require.createAbortError;\nvar delay = require('@uppy/utils/lib/delay');\nvar MB = 1024 * 1024;\nvar defaultOptions = {\n  limit: 1,\n  retryDelays: [0, 1000, 3000, 5000],\n  getChunkSize: function getChunkSize(file) {\n    return Math.ceil(file.size / 10000);\n  },\n  onStart: function onStart() {},\n  onProgress: function onProgress() {},\n  onPartComplete: function onPartComplete() {},\n  onSuccess: function onSuccess() {},\n  onError: function onError(err) {\n    throw err;\n  }\n};\nfunction ensureInt(value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10);\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  throw new TypeError('Expected a number');\n}\nvar MultipartUploader = /*#__PURE__*/function () {\n  function MultipartUploader(file, options) {\n    this.options = _extends({}, defaultOptions, options); // Use default `getChunkSize` if it was null or something\n\n    if (!this.options.getChunkSize) {\n      this.options.getChunkSize = defaultOptions.getChunkSize;\n    }\n    this.file = file;\n    this.abortController = new AbortController();\n    this.key = this.options.key || null;\n    this.uploadId = this.options.uploadId || null;\n    this.parts = []; // Do `this.createdPromise.then(OP)` to execute an operation `OP` _only_ if the\n    // upload was created already. That also ensures that the sequencing is right\n    // (so the `OP` definitely happens if the upload is created).\n    //\n    // This mostly exists to make `_abortUpload` work well: only sending the abort request if\n    // the upload was already created, and if the createMultipartUpload request is still in flight,\n    // aborting it immediately after it finishes.\n\n    this.createdPromise = Promise.reject(); // eslint-disable-line prefer-promise-reject-errors\n\n    this.isPaused = false;\n    this.partsInProgress = 0;\n    this.chunks = null;\n    this.chunkState = null;\n    this._initChunks();\n    this.createdPromise.catch(function () {}); // silence uncaught rejection warning\n  }\n  /**\n   * Was this upload aborted?\n   *\n   * If yes, we may need to throw an AbortError.\n   *\n   * @returns {boolean}\n   */\n\n  var _proto = MultipartUploader.prototype;\n  _proto._aborted = function _aborted() {\n    return this.abortController.signal.aborted;\n  };\n  _proto._initChunks = function _initChunks() {\n    var chunks = [];\n    var desiredChunkSize = this.options.getChunkSize(this.file); // at least 5MB per request, at most 10k requests\n\n    var minChunkSize = Math.max(5 * MB, Math.ceil(this.file.size / 10000));\n    var chunkSize = Math.max(desiredChunkSize, minChunkSize); // Upload zero-sized files in one zero-sized chunk\n\n    if (this.file.size === 0) {\n      chunks.push(this.file);\n    } else {\n      for (var i = 0; i < this.file.size; i += chunkSize) {\n        var end = Math.min(this.file.size, i + chunkSize);\n        chunks.push(this.file.slice(i, end));\n      }\n    }\n    this.chunks = chunks;\n    this.chunkState = chunks.map(function () {\n      return {\n        uploaded: 0,\n        busy: false,\n        done: false\n      };\n    });\n  };\n  _proto._createUpload = function _createUpload() {\n    var _this = this;\n    this.createdPromise = Promise.resolve().then(function () {\n      return _this.options.createMultipartUpload();\n    });\n    return this.createdPromise.then(function (result) {\n      if (_this._aborted()) throw createAbortError();\n      var valid = typeof result === 'object' && result && typeof result.uploadId === 'string' && typeof result.key === 'string';\n      if (!valid) {\n        throw new TypeError('AwsS3/Multipart: Got incorrect result from `createMultipartUpload()`, expected an object `{ uploadId, key }`.');\n      }\n      _this.key = result.key;\n      _this.uploadId = result.uploadId;\n      _this.options.onStart(result);\n      _this._uploadParts();\n    }).catch(function (err) {\n      _this._onError(err);\n    });\n  };\n  _proto._resumeUpload = function _resumeUpload() {\n    var _this2 = this;\n    return Promise.resolve().then(function () {\n      return _this2.options.listParts({\n        uploadId: _this2.uploadId,\n        key: _this2.key\n      });\n    }).then(function (parts) {\n      if (_this2._aborted()) throw createAbortError();\n      parts.forEach(function (part) {\n        var i = part.PartNumber - 1;\n        _this2.chunkState[i] = {\n          uploaded: ensureInt(part.Size),\n          etag: part.ETag,\n          done: true\n        }; // Only add if we did not yet know about this part.\n\n        if (!_this2.parts.some(function (p) {\n          return p.PartNumber === part.PartNumber;\n        })) {\n          _this2.parts.push({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag\n          });\n        }\n      });\n      _this2._uploadParts();\n    }).catch(function (err) {\n      _this2._onError(err);\n    });\n  };\n  _proto._uploadParts = function _uploadParts() {\n    var _this3 = this;\n    if (this.isPaused) return;\n    var need = this.options.limit - this.partsInProgress;\n    if (need === 0) return; // All parts are uploaded.\n\n    if (this.chunkState.every(function (state) {\n      return state.done;\n    })) {\n      this._completeUpload();\n      return;\n    }\n    var candidates = [];\n    for (var i = 0; i < this.chunkState.length; i++) {\n      var state = this.chunkState[i];\n      if (state.done || state.busy) continue;\n      candidates.push(i);\n      if (candidates.length >= need) {\n        break;\n      }\n    }\n    candidates.forEach(function (index) {\n      _this3._uploadPartRetryable(index).then(function () {\n        // Continue uploading parts\n        _this3._uploadParts();\n      }, function (err) {\n        _this3._onError(err);\n      });\n    });\n  };\n  _proto._retryable = function _retryable(_ref) {\n    var _this4 = this;\n    var before = _ref.before,\n      attempt = _ref.attempt,\n      after = _ref.after;\n    var retryDelays = this.options.retryDelays;\n    var signal = this.abortController.signal;\n    if (before) before();\n    function shouldRetry(err) {\n      if (err.source && typeof err.source.status === 'number') {\n        var status = err.source.status; // 0 probably indicates network failure\n\n        return status === 0 || status === 409 || status === 423 || status >= 500 && status < 600;\n      }\n      return false;\n    }\n    var doAttempt = function doAttempt(retryAttempt) {\n      return attempt().catch(function (err) {\n        if (_this4._aborted()) throw createAbortError();\n        if (shouldRetry(err) && retryAttempt < retryDelays.length) {\n          return delay(retryDelays[retryAttempt], {\n            signal: signal\n          }).then(function () {\n            return doAttempt(retryAttempt + 1);\n          });\n        }\n        throw err;\n      });\n    };\n    return doAttempt(0).then(function (result) {\n      if (after) after();\n      return result;\n    }, function (err) {\n      if (after) after();\n      throw err;\n    });\n  };\n  _proto._uploadPartRetryable = function _uploadPartRetryable(index) {\n    var _this5 = this;\n    return this._retryable({\n      before: function before() {\n        _this5.partsInProgress += 1;\n      },\n      attempt: function attempt() {\n        return _this5._uploadPart(index);\n      },\n      after: function after() {\n        _this5.partsInProgress -= 1;\n      }\n    });\n  };\n  _proto._uploadPart = function _uploadPart(index) {\n    var _this6 = this;\n    var body = this.chunks[index];\n    this.chunkState[index].busy = true;\n    return Promise.resolve().then(function () {\n      return _this6.options.prepareUploadPart({\n        key: _this6.key,\n        uploadId: _this6.uploadId,\n        body: body,\n        number: index + 1\n      });\n    }).then(function (result) {\n      var valid = typeof result === 'object' && result && typeof result.url === 'string';\n      if (!valid) {\n        throw new TypeError('AwsS3/Multipart: Got incorrect result from `prepareUploadPart()`, expected an object `{ url }`.');\n      }\n      return result;\n    }).then(function (_ref2) {\n      var url = _ref2.url,\n        headers = _ref2.headers;\n      if (_this6._aborted()) {\n        _this6.chunkState[index].busy = false;\n        throw createAbortError();\n      }\n      return _this6._uploadPartBytes(index, url, headers);\n    });\n  };\n  _proto._onPartProgress = function _onPartProgress(index, sent, total) {\n    this.chunkState[index].uploaded = ensureInt(sent);\n    var totalUploaded = this.chunkState.reduce(function (n, c) {\n      return n + c.uploaded;\n    }, 0);\n    this.options.onProgress(totalUploaded, this.file.size);\n  };\n  _proto._onPartComplete = function _onPartComplete(index, etag) {\n    this.chunkState[index].etag = etag;\n    this.chunkState[index].done = true;\n    var part = {\n      PartNumber: index + 1,\n      ETag: etag\n    };\n    this.parts.push(part);\n    this.options.onPartComplete(part);\n  };\n  _proto._uploadPartBytes = function _uploadPartBytes(index, url, headers) {\n    var _this7 = this;\n    var body = this.chunks[index];\n    var signal = this.abortController.signal;\n    var defer;\n    var promise = new Promise(function (resolve, reject) {\n      defer = {\n        resolve: resolve,\n        reject: reject\n      };\n    });\n    var xhr = new XMLHttpRequest();\n    xhr.open('PUT', url, true);\n    if (headers) {\n      Object.keys(headers).map(function (key) {\n        xhr.setRequestHeader(key, headers[key]);\n      });\n    }\n    xhr.responseType = 'text';\n    function cleanup() {\n      signal.removeEventListener('abort', onabort);\n    }\n    function onabort() {\n      xhr.abort();\n    }\n    signal.addEventListener('abort', onabort);\n    xhr.upload.addEventListener('progress', function (ev) {\n      if (!ev.lengthComputable) return;\n      _this7._onPartProgress(index, ev.loaded, ev.total);\n    });\n    xhr.addEventListener('abort', function (ev) {\n      cleanup();\n      _this7.chunkState[index].busy = false;\n      defer.reject(createAbortError());\n    });\n    xhr.addEventListener('load', function (ev) {\n      cleanup();\n      _this7.chunkState[index].busy = false;\n      if (ev.target.status < 200 || ev.target.status >= 300) {\n        var error = new Error('Non 2xx');\n        error.source = ev.target;\n        defer.reject(error);\n        return;\n      }\n      _this7._onPartProgress(index, body.size, body.size); // NOTE This must be allowed by CORS.\n\n      var etag = ev.target.getResponseHeader('ETag');\n      if (etag === null) {\n        defer.reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'));\n        return;\n      }\n      _this7._onPartComplete(index, etag);\n      defer.resolve();\n    });\n    xhr.addEventListener('error', function (ev) {\n      cleanup();\n      _this7.chunkState[index].busy = false;\n      var error = new Error('Unknown error');\n      error.source = ev.target;\n      defer.reject(error);\n    });\n    xhr.send(body);\n    return promise;\n  };\n  _proto._completeUpload = function _completeUpload() {\n    var _this8 = this;\n\n    // Parts may not have completed uploading in sorted order, if limit > 1.\n    this.parts.sort(function (a, b) {\n      return a.PartNumber - b.PartNumber;\n    });\n    return Promise.resolve().then(function () {\n      return _this8.options.completeMultipartUpload({\n        key: _this8.key,\n        uploadId: _this8.uploadId,\n        parts: _this8.parts\n      });\n    }).then(function (result) {\n      _this8.options.onSuccess(result);\n    }, function (err) {\n      _this8._onError(err);\n    });\n  };\n  _proto._abortUpload = function _abortUpload() {\n    var _this9 = this;\n    this.abortController.abort();\n    this.createdPromise.then(function () {\n      _this9.options.abortMultipartUpload({\n        key: _this9.key,\n        uploadId: _this9.uploadId\n      });\n    }, function () {// if the creation failed we do not need to abort\n    });\n  };\n  _proto._onError = function _onError(err) {\n    if (err && err.name === 'AbortError') {\n      return;\n    }\n    this.options.onError(err);\n  };\n  _proto.start = function start() {\n    this.isPaused = false;\n    if (this.uploadId) {\n      this._resumeUpload();\n    } else {\n      this._createUpload();\n    }\n  };\n  _proto.pause = function pause() {\n    this.abortController.abort(); // Swap it out for a new controller, because this instance may be resumed later.\n\n    this.abortController = new AbortController();\n    this.isPaused = true;\n  };\n  _proto.abort = function abort(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var really = opts.really || false;\n    if (!really) return this.pause();\n    this._abortUpload();\n  };\n  return MultipartUploader;\n}();\nmodule.exports = MultipartUploader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}