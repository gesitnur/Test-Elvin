{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\n/* eslint-disable jsx-a11y/media-has-caption */\nvar _require = require('preact'),\n  h = _require.h,\n  Component = _require.Component;\nvar SnapshotButton = require('./SnapshotButton');\nvar RecordButton = require('./RecordButton');\nvar RecordingLength = require('./RecordingLength');\nvar VideoSourceSelect = require('./VideoSourceSelect');\nvar SubmitButton = require('./SubmitButton');\nvar DiscardButton = require('./DiscardButton');\nfunction isModeAvailable(modes, mode) {\n  return modes.indexOf(mode) !== -1;\n}\nvar CameraScreen = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(CameraScreen, _Component);\n  function CameraScreen() {\n    return _Component.apply(this, arguments) || this;\n  }\n  var _proto = CameraScreen.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    var onFocus = this.props.onFocus;\n    onFocus();\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var onStop = this.props.onStop;\n    onStop();\n  };\n  _proto.render = function render() {\n    var _this = this;\n    var _this$props = this.props,\n      src = _this$props.src,\n      recordedVideo = _this$props.recordedVideo,\n      recording = _this$props.recording,\n      modes = _this$props.modes,\n      supportsRecording = _this$props.supportsRecording,\n      videoSources = _this$props.videoSources,\n      showVideoSourceDropdown = _this$props.showVideoSourceDropdown,\n      showRecordingLength = _this$props.showRecordingLength,\n      onSubmit = _this$props.onSubmit,\n      i18n = _this$props.i18n,\n      mirror = _this$props.mirror,\n      onSnapshot = _this$props.onSnapshot,\n      onStartRecording = _this$props.onStartRecording,\n      onStopRecording = _this$props.onStopRecording,\n      onDiscardRecordedVideo = _this$props.onDiscardRecordedVideo,\n      recordingLengthSeconds = _this$props.recordingLengthSeconds;\n    var hasRecordedVideo = !!recordedVideo;\n    var shouldShowRecordButton = !hasRecordedVideo && supportsRecording && (isModeAvailable(modes, 'video-only') || isModeAvailable(modes, 'audio-only') || isModeAvailable(modes, 'video-audio'));\n    var shouldShowSnapshotButton = !hasRecordedVideo && isModeAvailable(modes, 'picture');\n    var shouldShowRecordingLength = supportsRecording && showRecordingLength;\n    var shouldShowVideoSourceDropdown = showVideoSourceDropdown && videoSources && videoSources.length > 1;\n    var videoProps = {\n      playsinline: true\n    };\n    if (recordedVideo) {\n      videoProps.muted = false;\n      videoProps.controls = true;\n      videoProps.src = recordedVideo; // reset srcObject in dom. If not resetted, stream sticks in element\n\n      if (this.videoElement) {\n        this.videoElement.srcObject = undefined;\n      }\n    } else {\n      videoProps.muted = true;\n      videoProps.autoplay = true;\n      videoProps.srcObject = src;\n    }\n    return h(\"div\", {\n      className: \"uppy uppy-Webcam-container\"\n    }, h(\"div\", {\n      className: \"uppy-Webcam-videoContainer\"\n    }, h(\"video\", _extends({\n      /* eslint-disable-next-line no-return-assign */\n      ref: function ref(videoElement) {\n        return _this.videoElement = videoElement;\n      },\n      className: \"uppy-Webcam-video  \" + (mirror ? 'uppy-Webcam-video--mirrored' : '')\n      /* eslint-disable-next-line react/jsx-props-no-spreading */\n    }, videoProps))), h(\"div\", {\n      className: \"uppy-Webcam-footer\"\n    }, h(\"div\", {\n      className: \"uppy-Webcam-videoSourceContainer\"\n    }, shouldShowVideoSourceDropdown ? VideoSourceSelect(this.props) : null), h(\"div\", {\n      className: \"uppy-Webcam-buttonContainer\"\n    }, shouldShowSnapshotButton && h(SnapshotButton, {\n      onSnapshot: onSnapshot,\n      i18n: i18n\n    }), shouldShowRecordButton && h(RecordButton, {\n      recording: recording,\n      onStartRecording: onStartRecording,\n      onStopRecording: onStopRecording,\n      i18n: i18n\n    }), hasRecordedVideo && h(SubmitButton, {\n      onSubmit: onSubmit,\n      i18n: i18n\n    }), hasRecordedVideo && h(DiscardButton, {\n      onDiscard: onDiscardRecordedVideo,\n      i18n: i18n\n    })), shouldShowRecordingLength && h(\"div\", {\n      className: \"uppy-Webcam-recordingLength\"\n    }, h(RecordingLength, {\n      recordingLengthSeconds: recordingLengthSeconds,\n      i18n: i18n\n    }))));\n  };\n  return CameraScreen;\n}(Component);\nmodule.exports = CameraScreen;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}