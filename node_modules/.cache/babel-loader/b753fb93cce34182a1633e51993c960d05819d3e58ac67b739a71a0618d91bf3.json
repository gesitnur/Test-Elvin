{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nfunction isFunction(v) {\n  return typeof v === 'function';\n}\nfunction result(v) {\n  return isFunction(v) ? v() : v;\n}\n/* Audio Oscilloscope\n  https://github.com/miguelmota/audio-oscilloscope\n*/\n\nvar _draw = /*#__PURE__*/_classPrivateFieldLooseKey(\"draw\");\nexport default class AudioOscilloscope {\n  constructor(canvas, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    Object.defineProperty(this, _draw, {\n      writable: true,\n      value: () => this.draw()\n    });\n    const canvasOptions = options.canvas || {};\n    const canvasContextOptions = options.canvasContext || {};\n    this.analyser = null;\n    this.bufferLength = 0;\n    this.dataArray = [];\n    this.canvas = canvas;\n    this.width = result(canvasOptions.width) || this.canvas.width;\n    this.height = result(canvasOptions.height) || this.canvas.height;\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.canvasContext = this.canvas.getContext('2d');\n    this.canvasContext.fillStyle = result(canvasContextOptions.fillStyle) || 'rgb(255, 255, 255)';\n    this.canvasContext.strokeStyle = result(canvasContextOptions.strokeStyle) || 'rgb(0, 0, 0)';\n    this.canvasContext.lineWidth = result(canvasContextOptions.lineWidth) || 1;\n    this.onDrawFrame = isFunction(options.onDrawFrame) ? options.onDrawFrame : () => {};\n  }\n  addSource(streamSource) {\n    this.streamSource = streamSource;\n    this.audioContext = this.streamSource.context;\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n    this.bufferLength = this.analyser.frequencyBinCount;\n    this.source = this.audioContext.createBufferSource();\n    this.dataArray = new Uint8Array(this.bufferLength);\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.streamSource.connect(this.analyser);\n  }\n  draw() {\n    const analyser = this.analyser,\n      dataArray = this.dataArray,\n      bufferLength = this.bufferLength;\n    const ctx = this.canvasContext;\n    const w = this.width;\n    const h = this.height;\n    if (analyser) {\n      analyser.getByteTimeDomainData(dataArray);\n    }\n    ctx.fillRect(0, 0, w, h);\n    ctx.beginPath();\n    const sliceWidth = w * 1.0 / bufferLength;\n    let x = 0;\n    if (!bufferLength) {\n      ctx.moveTo(0, this.height / 2);\n    }\n    for (let i = 0; i < bufferLength; i++) {\n      const v = dataArray[i] / 128.0;\n      const y = v * (h / 2);\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n      x += sliceWidth;\n    }\n    ctx.lineTo(w, h / 2);\n    ctx.stroke();\n    this.onDrawFrame(this);\n    requestAnimationFrame(_classPrivateFieldLooseBase(this, _draw)[_draw]);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}