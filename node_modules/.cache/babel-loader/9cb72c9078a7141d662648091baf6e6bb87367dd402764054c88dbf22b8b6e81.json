{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('@uppy/core'),\n  Plugin = _require.Plugin;\nvar _require2 = require('preact'),\n  h = _require2.h;\n/**\n * Progress bar\n *\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(ProgressBar, _Plugin);\n  function ProgressBar(uppy, opts) {\n    var _this;\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.id = _this.opts.id || 'ProgressBar';\n    _this.title = 'Progress Bar';\n    _this.type = 'progressindicator'; // set default options\n\n    var defaultOptions = {\n      target: 'body',\n      replaceTargetContent: false,\n      fixed: false,\n      hideAfterFinish: true\n    }; // merge default options with the ones set by user\n\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  var _proto = ProgressBar.prototype;\n  _proto.render = function render(state) {\n    var progress = state.totalProgress || 0; // before starting and after finish should be hidden if specified in the options\n\n    var isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish;\n    return h(\"div\", {\n      className: \"uppy uppy-ProgressBar\",\n      style: {\n        position: this.opts.fixed ? 'fixed' : 'initial'\n      },\n      \"aria-hidden\": isHidden\n    }, h(\"div\", {\n      className: \"uppy-ProgressBar-inner\",\n      style: {\n        width: progress + \"%\"\n      }\n    }), h(\"div\", {\n      className: \"uppy-ProgressBar-percentage\"\n    }, progress));\n  };\n  _proto.install = function install() {\n    var target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n  return ProgressBar;\n}(Plugin), _class.VERSION = \"1.3.30\", _temp);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}