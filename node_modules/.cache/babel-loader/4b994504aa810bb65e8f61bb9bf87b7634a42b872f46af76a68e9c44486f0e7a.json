{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nlet _Symbol$for;\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js';\nimport { Socket, Provider, RequestClient } from '@uppy/companion-client';\nimport EventTracker from '@uppy/utils/lib/EventTracker';\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress';\nimport getSocketHost from '@uppy/utils/lib/getSocketHost';\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue';\nimport { createAbortError } from '@uppy/utils/lib/AbortController';\nconst packageJson = {\n  \"version\": \"3.1.1\"\n};\nimport MultipartUploader from './MultipartUploader.js';\nfunction assertServerError(res) {\n  if (res && res.error) {\n    const error = new Error(res.message);\n    Object.assign(error, res.error);\n    throw error;\n  }\n  return res;\n}\nfunction throwIfAborted(signal) {\n  if (signal != null && signal.aborted) {\n    throw createAbortError('The operation was aborted', {\n      cause: signal.reason\n    });\n  }\n}\nvar _abortMultipartUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortMultipartUpload\");\nvar _cache = /*#__PURE__*/_classPrivateFieldLooseKey(\"cache\");\nvar _createMultipartUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createMultipartUpload\");\nvar _fetchSignature = /*#__PURE__*/_classPrivateFieldLooseKey(\"fetchSignature\");\nvar _listParts = /*#__PURE__*/_classPrivateFieldLooseKey(\"listParts\");\nvar _previousRetryDelay = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousRetryDelay\");\nvar _requests = /*#__PURE__*/_classPrivateFieldLooseKey(\"requests\");\nvar _retryDelayIterator = /*#__PURE__*/_classPrivateFieldLooseKey(\"retryDelayIterator\");\nvar _sendCompletionRequest = /*#__PURE__*/_classPrivateFieldLooseKey(\"sendCompletionRequest\");\nvar _setS3MultipartState = /*#__PURE__*/_classPrivateFieldLooseKey(\"setS3MultipartState\");\nvar _uploadPartBytes = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadPartBytes\");\nvar _shouldRetry = /*#__PURE__*/_classPrivateFieldLooseKey(\"shouldRetry\");\nclass HTTPCommunicationQueue {\n  constructor(_requests2, options, setS3MultipartState) {\n    Object.defineProperty(this, _shouldRetry, {\n      value: _shouldRetry2\n    });\n    Object.defineProperty(this, _abortMultipartUpload, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _cache, {\n      writable: true,\n      value: new WeakMap()\n    });\n    Object.defineProperty(this, _createMultipartUpload, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _fetchSignature, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _listParts, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousRetryDelay, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _requests, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _retryDelayIterator, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _sendCompletionRequest, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _setS3MultipartState, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _uploadPartBytes, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _requests)[_requests] = _requests2;\n    _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState] = setS3MultipartState;\n    this.setOptions(options);\n  }\n  setOptions(options) {\n    const requests = _classPrivateFieldLooseBase(this, _requests)[_requests];\n    if ('abortMultipartUpload' in options) {\n      _classPrivateFieldLooseBase(this, _abortMultipartUpload)[_abortMultipartUpload] = requests.wrapPromiseFunction(options.abortMultipartUpload);\n    }\n    if ('createMultipartUpload' in options) {\n      _classPrivateFieldLooseBase(this, _createMultipartUpload)[_createMultipartUpload] = requests.wrapPromiseFunction(options.createMultipartUpload, {\n        priority: -1\n      });\n    }\n    if ('signPart' in options) {\n      _classPrivateFieldLooseBase(this, _fetchSignature)[_fetchSignature] = requests.wrapPromiseFunction(options.signPart);\n    }\n    if ('listParts' in options) {\n      _classPrivateFieldLooseBase(this, _listParts)[_listParts] = requests.wrapPromiseFunction(options.listParts);\n    }\n    if ('completeMultipartUpload' in options) {\n      _classPrivateFieldLooseBase(this, _sendCompletionRequest)[_sendCompletionRequest] = requests.wrapPromiseFunction(options.completeMultipartUpload);\n    }\n    if ('retryDelays' in options) {\n      var _options$retryDelays;\n      _classPrivateFieldLooseBase(this, _retryDelayIterator)[_retryDelayIterator] = (_options$retryDelays = options.retryDelays) == null ? void 0 : _options$retryDelays.values();\n    }\n    if ('uploadPartBytes' in options) {\n      _classPrivateFieldLooseBase(this, _uploadPartBytes)[_uploadPartBytes] = requests.wrapPromiseFunction(options.uploadPartBytes, {\n        priority: Infinity\n      });\n    }\n  }\n  async getUploadId(file, signal) {\n    const cachedResult = _classPrivateFieldLooseBase(this, _cache)[_cache].get(file.data);\n    if (cachedResult != null) {\n      return cachedResult;\n    }\n    const promise = _classPrivateFieldLooseBase(this, _createMultipartUpload)[_createMultipartUpload](file, signal);\n    const abortPromise = () => {\n      promise.abort(signal.reason);\n      _classPrivateFieldLooseBase(this, _cache)[_cache].delete(file.data);\n    };\n    signal.addEventListener('abort', abortPromise, {\n      once: true\n    });\n    _classPrivateFieldLooseBase(this, _cache)[_cache].set(file.data, promise);\n    promise.then(async result => {\n      signal.removeEventListener('abort', abortPromise);\n      _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState](file, result);\n      _classPrivateFieldLooseBase(this, _cache)[_cache].set(file.data, result);\n    }, () => {\n      signal.removeEventListener('abort', abortPromise);\n    });\n    return promise;\n  }\n  async abortFileUpload(file) {\n    const result = _classPrivateFieldLooseBase(this, _cache)[_cache].get(file.data);\n    if (result != null) {\n      // If the createMultipartUpload request never was made, we don't\n      // need to send the abortMultipartUpload request.\n      await _classPrivateFieldLooseBase(this, _abortMultipartUpload)[_abortMultipartUpload](file, await result);\n    }\n  }\n  async uploadFile(file, chunks, signal) {\n    throwIfAborted(signal);\n    const _await$this$getUpload = await this.getUploadId(file, signal),\n      uploadId = _await$this$getUpload.uploadId,\n      key = _await$this$getUpload.key;\n    throwIfAborted(signal);\n    const parts = await Promise.all(chunks.map((chunk, i) => this.uploadChunk(file, i + 1, chunk, signal)));\n    throwIfAborted(signal);\n    return _classPrivateFieldLooseBase(this, _sendCompletionRequest)[_sendCompletionRequest](file, {\n      key,\n      uploadId,\n      parts,\n      signal\n    }).abortOn(signal);\n  }\n  async resumeUploadFile(file, chunks, signal) {\n    throwIfAborted(signal);\n    const _await$this$getUpload2 = await this.getUploadId(file, signal),\n      uploadId = _await$this$getUpload2.uploadId,\n      key = _await$this$getUpload2.key;\n    throwIfAborted(signal);\n    const alreadyUploadedParts = await _classPrivateFieldLooseBase(this, _listParts)[_listParts](file, {\n      uploadId,\n      key,\n      signal\n    }).abortOn(signal);\n    throwIfAborted(signal);\n    const parts = await Promise.all(chunks.map((chunk, i) => {\n      const partNumber = i + 1;\n      const alreadyUploadedInfo = alreadyUploadedParts.find(_ref => {\n        let PartNumber = _ref.PartNumber;\n        return PartNumber === partNumber;\n      });\n      return alreadyUploadedInfo == null ? this.uploadChunk(file, partNumber, chunk, signal) : {\n        PartNumber: partNumber,\n        ETag: alreadyUploadedInfo.ETag\n      };\n    }));\n    throwIfAborted(signal);\n    return _classPrivateFieldLooseBase(this, _sendCompletionRequest)[_sendCompletionRequest](file, {\n      key,\n      uploadId,\n      parts,\n      signal\n    }).abortOn(signal);\n  }\n  async uploadChunk(file, partNumber, body, signal) {\n    throwIfAborted(signal);\n    const _await$this$getUpload3 = await this.getUploadId(file, signal),\n      uploadId = _await$this$getUpload3.uploadId,\n      key = _await$this$getUpload3.key;\n    throwIfAborted(signal);\n    for (;;) {\n      const signature = await _classPrivateFieldLooseBase(this, _fetchSignature)[_fetchSignature](file, {\n        uploadId,\n        key,\n        partNumber,\n        body,\n        signal\n      }).abortOn(signal);\n      throwIfAborted(signal);\n      try {\n        return _objectSpread({\n          PartNumber: partNumber\n        }, await _classPrivateFieldLooseBase(this, _uploadPartBytes)[_uploadPartBytes](signature, body, signal).abortOn(signal));\n      } catch (err) {\n        if (!(await _classPrivateFieldLooseBase(this, _shouldRetry)[_shouldRetry](err))) throw err;\n      }\n    }\n  }\n}\nasync function _shouldRetry2(err) {\n  var _err$source;\n  const requests = _classPrivateFieldLooseBase(this, _requests)[_requests];\n  const status = err == null ? void 0 : (_err$source = err.source) == null ? void 0 : _err$source.status; // TODO: this retry logic is taken out of Tus. We should have a centralized place for retrying,\n  // perhaps the rate limited queue, and dedupe all plugins with that.\n\n  if (status == null) {\n    return false;\n  }\n  if (status === 403 && err.message === 'Request has expired') {\n    if (!requests.isPaused) {\n      // We don't want to exhaust the retryDelayIterator as long as there are\n      // more than one request in parallel, to give slower connection a chance\n      // to catch up with the expiry set in Companion.\n      if (requests.limit === 1 || _classPrivateFieldLooseBase(this, _previousRetryDelay)[_previousRetryDelay] == null) {\n        var _classPrivateFieldLoo;\n        const next = (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _retryDelayIterator)[_retryDelayIterator]) == null ? void 0 : _classPrivateFieldLoo.next();\n        if (next == null || next.done) {\n          return false;\n        } // If there are more than 1 request done in parallel, the RLQ limit is\n        // decreased and the failed request is requeued after waiting for a bit.\n        // If there is only one request in parallel, the limit can't be\n        // decreased, so we iterate over `retryDelayIterator` as we do for\n        // other failures.\n        // `#previousRetryDelay` caches the value so we can re-use it next time.\n\n        _classPrivateFieldLooseBase(this, _previousRetryDelay)[_previousRetryDelay] = next.value;\n      } // No need to stop the other requests, we just want to lower the limit.\n\n      requests.rateLimit(0);\n      await new Promise(resolve => setTimeout(resolve, _classPrivateFieldLooseBase(this, _previousRetryDelay)[_previousRetryDelay]));\n    }\n  } else if (status === 429) {\n    // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n    if (!requests.isPaused) {\n      var _classPrivateFieldLoo2;\n      const next = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _retryDelayIterator)[_retryDelayIterator]) == null ? void 0 : _classPrivateFieldLoo2.next();\n      if (next == null || next.done) {\n        return false;\n      }\n      requests.rateLimit(next.value);\n    }\n  } else if (status > 400 && status < 500 && status !== 409) {\n    // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n    return false;\n  } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n    // The navigator is offline, let's wait for it to come back online.\n    if (!requests.isPaused) {\n      requests.pause();\n      window.addEventListener('online', () => {\n        requests.resume();\n      }, {\n        once: true\n      });\n    }\n  } else {\n    var _classPrivateFieldLoo3;\n\n    // Other error code means the request can be retried later.\n    const next = (_classPrivateFieldLoo3 = _classPrivateFieldLooseBase(this, _retryDelayIterator)[_retryDelayIterator]) == null ? void 0 : _classPrivateFieldLoo3.next();\n    if (next == null || next.done) {\n      return false;\n    }\n    await new Promise(resolve => setTimeout(resolve, next.value));\n  }\n  return true;\n}\nvar _queueRequestSocketToken = /*#__PURE__*/_classPrivateFieldLooseKey(\"queueRequestSocketToken\");\nvar _companionCommunicationQueue = /*#__PURE__*/_classPrivateFieldLooseKey(\"companionCommunicationQueue\");\nvar _client = /*#__PURE__*/_classPrivateFieldLooseKey(\"client\");\nvar _setS3MultipartState2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"setS3MultipartState\");\nvar _requestSocketToken = /*#__PURE__*/_classPrivateFieldLooseKey(\"requestSocketToken\");\nvar _setCompanionHeaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"setCompanionHeaders\");\n_Symbol$for = Symbol.for('uppy test: getClient');\nexport default class AwsS3Multipart extends BasePlugin {\n  constructor(uppy, _opts) {\n    var _this$opts$rateLimite;\n    super(uppy, _opts);\n    Object.defineProperty(this, _queueRequestSocketToken, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _companionCommunicationQueue, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _client, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _setS3MultipartState2, {\n      writable: true,\n      value: (file, _ref2) => {\n        let key = _ref2.key,\n          uploadId = _ref2.uploadId;\n        const cFile = this.uppy.getFile(file.id);\n        this.uppy.setFileState(file.id, {\n          s3Multipart: _objectSpread(_objectSpread({}, cFile.s3Multipart), {}, {\n            key,\n            uploadId\n          })\n        });\n      }\n    });\n    Object.defineProperty(this, _requestSocketToken, {\n      writable: true,\n      value: async file => {\n        const Client = file.remote.providerOptions.provider ? Provider : RequestClient;\n        const client = new Client(this.uppy, file.remote.providerOptions);\n        const opts = _objectSpread({}, this.opts);\n        if (file.tus) {\n          // Install file-specific upload overrides.\n          Object.assign(opts, file.tus);\n        }\n        if (file.remote.url == null) {\n          throw new Error('Cannot connect to an undefined URL');\n        }\n        const res = await client.post(file.remote.url, _objectSpread(_objectSpread({}, file.remote.body), {}, {\n          protocol: 's3-multipart',\n          size: file.data.size,\n          metadata: file.meta\n        }));\n        return res.token;\n      }\n    });\n    Object.defineProperty(this, _setCompanionHeaders, {\n      writable: true,\n      value: () => {\n        _classPrivateFieldLooseBase(this, _client)[_client].setCompanionHeaders(this.opts.companionHeaders);\n      }\n    });\n    this.type = 'uploader';\n    this.id = this.opts.id || 'AwsS3Multipart';\n    this.title = 'AWS S3 Multipart';\n    _classPrivateFieldLooseBase(this, _client)[_client] = new RequestClient(uppy, _opts);\n    const defaultOptions = {\n      limit: 6,\n      retryDelays: [0, 1000, 3000, 5000],\n      createMultipartUpload: this.createMultipartUpload.bind(this),\n      listParts: this.listParts.bind(this),\n      abortMultipartUpload: this.abortMultipartUpload.bind(this),\n      completeMultipartUpload: this.completeMultipartUpload.bind(this),\n      signPart: this.signPart.bind(this),\n      uploadPartBytes: AwsS3Multipart.uploadPartBytes,\n      companionHeaders: {}\n    };\n    this.opts = _objectSpread(_objectSpread({}, defaultOptions), _opts);\n    if ((_opts == null ? void 0 : _opts.prepareUploadParts) != null && _opts.signPart == null) {\n      this.opts.signPart = async (file, _ref3) => {\n        let uploadId = _ref3.uploadId,\n          key = _ref3.key,\n          partNumber = _ref3.partNumber,\n          body = _ref3.body,\n          signal = _ref3.signal;\n        const _await$_opts$prepareU = await _opts.prepareUploadParts(file, {\n            uploadId,\n            key,\n            parts: [{\n              number: partNumber,\n              chunk: body\n            }],\n            signal\n          }),\n          presignedUrls = _await$_opts$prepareU.presignedUrls,\n          headers = _await$_opts$prepareU.headers;\n        return {\n          url: presignedUrls == null ? void 0 : presignedUrls[partNumber],\n          headers: headers == null ? void 0 : headers[partNumber]\n        };\n      };\n    }\n    this.upload = this.upload.bind(this);\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n\n    this.requests = (_this$opts$rateLimite = this.opts.rateLimitedQueue) != null ? _this$opts$rateLimite : new RateLimitedQueue(this.opts.limit);\n    _classPrivateFieldLooseBase(this, _companionCommunicationQueue)[_companionCommunicationQueue] = new HTTPCommunicationQueue(this.requests, this.opts, _classPrivateFieldLooseBase(this, _setS3MultipartState2)[_setS3MultipartState2]);\n    this.uploaders = Object.create(null);\n    this.uploaderEvents = Object.create(null);\n    this.uploaderSockets = Object.create(null);\n    _classPrivateFieldLooseBase(this, _queueRequestSocketToken)[_queueRequestSocketToken] = this.requests.wrapPromiseFunction(_classPrivateFieldLooseBase(this, _requestSocketToken)[_requestSocketToken], {\n      priority: -1\n    });\n  }\n  [_Symbol$for]() {\n    return _classPrivateFieldLooseBase(this, _client)[_client];\n  }\n  setOptions(newOptions) {\n    _classPrivateFieldLooseBase(this, _companionCommunicationQueue)[_companionCommunicationQueue].setOptions(newOptions);\n    return super.setOptions(newOptions);\n  }\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n\n  resetUploaderReferences(fileID, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID].abort({\n        really: opts.abort || false\n      });\n      this.uploaders[fileID] = null;\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove();\n      this.uploaderEvents[fileID] = null;\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close();\n      this.uploaderSockets[fileID] = null;\n    }\n  } // TODO: make this a private method in the next major\n\n  assertHost(method) {\n    if (!this.opts.companionUrl) {\n      throw new Error(`Expected a \\`companionUrl\\` option containing a Companion address, or if you are not using Companion, a custom \\`${method}\\` implementation.`);\n    }\n  }\n  createMultipartUpload(file, signal) {\n    this.assertHost('createMultipartUpload');\n    throwIfAborted(signal);\n    const metadata = {};\n    Object.keys(file.meta || {}).forEach(key => {\n      if (file.meta[key] != null) {\n        metadata[key] = file.meta[key].toString();\n      }\n    });\n    return _classPrivateFieldLooseBase(this, _client)[_client].post('s3/multipart', {\n      filename: file.name,\n      type: file.type,\n      metadata\n    }, {\n      signal\n    }).then(assertServerError);\n  }\n  listParts(file, _ref4, signal) {\n    let key = _ref4.key,\n      uploadId = _ref4.uploadId;\n    this.assertHost('listParts');\n    throwIfAborted(signal);\n    const filename = encodeURIComponent(key);\n    return _classPrivateFieldLooseBase(this, _client)[_client].get(`s3/multipart/${uploadId}?key=${filename}`, {\n      signal\n    }).then(assertServerError);\n  }\n  completeMultipartUpload(file, _ref5, signal) {\n    let key = _ref5.key,\n      uploadId = _ref5.uploadId,\n      parts = _ref5.parts;\n    this.assertHost('completeMultipartUpload');\n    throwIfAborted(signal);\n    const filename = encodeURIComponent(key);\n    const uploadIdEnc = encodeURIComponent(uploadId);\n    return _classPrivateFieldLooseBase(this, _client)[_client].post(`s3/multipart/${uploadIdEnc}/complete?key=${filename}`, {\n      parts\n    }, {\n      signal\n    }).then(assertServerError);\n  }\n  signPart(file, _ref6) {\n    let uploadId = _ref6.uploadId,\n      key = _ref6.key,\n      partNumber = _ref6.partNumber,\n      signal = _ref6.signal;\n    this.assertHost('signPart');\n    throwIfAborted(signal);\n    if (uploadId == null || key == null || partNumber == null) {\n      throw new Error('Cannot sign without a key, an uploadId, and a partNumber');\n    }\n    const filename = encodeURIComponent(key);\n    return _classPrivateFieldLooseBase(this, _client)[_client].get(`s3/multipart/${uploadId}/${partNumber}?key=${filename}`, {\n      signal\n    }).then(assertServerError);\n  }\n  abortMultipartUpload(file, _ref7, signal) {\n    let key = _ref7.key,\n      uploadId = _ref7.uploadId;\n    this.assertHost('abortMultipartUpload');\n    const filename = encodeURIComponent(key);\n    const uploadIdEnc = encodeURIComponent(uploadId);\n    return _classPrivateFieldLooseBase(this, _client)[_client].delete(`s3/multipart/${uploadIdEnc}?key=${filename}`, undefined, {\n      signal\n    }).then(assertServerError);\n  }\n  static async uploadPartBytes(_ref8, body, signal) {\n    let url = _ref8.url,\n      expires = _ref8.expires,\n      headers = _ref8.headers;\n    throwIfAborted(signal);\n    if (url == null) {\n      throw new Error('Cannot upload to an undefined URL');\n    }\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('PUT', url, true);\n      if (headers) {\n        Object.keys(headers).forEach(key => {\n          xhr.setRequestHeader(key, headers[key]);\n        });\n      }\n      xhr.responseType = 'text';\n      if (typeof expires === 'number') {\n        xhr.timeout = expires * 1000;\n      }\n      function onabort() {\n        xhr.abort();\n      }\n      function cleanup() {\n        signal.removeEventListener('abort', onabort);\n      }\n      signal.addEventListener('abort', onabort);\n      xhr.upload.addEventListener('progress', body.onProgress);\n      xhr.addEventListener('abort', () => {\n        cleanup();\n        reject(createAbortError());\n      });\n      xhr.addEventListener('timeout', () => {\n        cleanup();\n        const error = new Error('Request has expired');\n        error.source = {\n          status: 403\n        };\n        reject(error);\n      });\n      xhr.addEventListener('load', ev => {\n        cleanup();\n        if (ev.target.status === 403 && ev.target.responseText.includes('<Message>Request has expired</Message>')) {\n          const error = new Error('Request has expired');\n          error.source = ev.target;\n          reject(error);\n          return;\n        }\n        if (ev.target.status < 200 || ev.target.status >= 300) {\n          const error = new Error('Non 2xx');\n          error.source = ev.target;\n          reject(error);\n          return;\n        }\n        body.onProgress == null ? void 0 : body.onProgress(body.size); // NOTE This must be allowed by CORS.\n\n        const etag = ev.target.getResponseHeader('ETag');\n        if (etag === null) {\n          reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'));\n          return;\n        }\n        body.onComplete == null ? void 0 : body.onComplete(etag);\n        resolve({\n          ETag: etag\n        });\n      });\n      xhr.addEventListener('error', ev => {\n        cleanup();\n        const error = new Error('Unknown error');\n        error.source = ev.target;\n        reject(error);\n      });\n      xhr.send(body);\n    });\n  }\n  uploadFile(file) {\n    var _this = this;\n    return new Promise((resolve, reject) => {\n      const onProgress = (bytesUploaded, bytesTotal) => {\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal\n        });\n      };\n      const onError = err => {\n        this.uppy.log(err);\n        this.uppy.emit('upload-error', file, err);\n        this.resetUploaderReferences(file.id);\n        reject(err);\n      };\n      const onSuccess = result => {\n        const uploadObject = upload; // eslint-disable-line no-use-before-define\n\n        const uploadResp = {\n          body: _objectSpread({}, result),\n          uploadURL: result.location\n        };\n        this.resetUploaderReferences(file.id);\n        const cFile = this.uppy.getFile(file.id);\n        this.uppy.emit('upload-success', cFile || file, uploadResp);\n        if (result.location) {\n          this.uppy.log(`Download ${file.name} from ${result.location}`);\n        }\n        resolve(uploadObject);\n      };\n      const onPartComplete = part => {\n        const cFile = this.uppy.getFile(file.id);\n        if (!cFile) {\n          return;\n        }\n        this.uppy.emit('s3-multipart:part-uploaded', cFile, part);\n      };\n      const upload = new MultipartUploader(file.data, _objectSpread({\n        // .bind to pass the file object to each handler.\n        companionComm: _classPrivateFieldLooseBase(this, _companionCommunicationQueue)[_companionCommunicationQueue],\n        log: function () {\n          return _this.uppy.log(...arguments);\n        },\n        getChunkSize: this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : null,\n        onProgress,\n        onError,\n        onSuccess,\n        onPartComplete,\n        file\n      }, file.s3Multipart));\n      this.uploaders[file.id] = upload;\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy);\n      this.onFileRemove(file.id, removed => {\n        upload.abort();\n        this.resetUploaderReferences(file.id, {\n          abort: true\n        });\n        resolve(`upload ${removed.id} was removed`);\n      });\n      this.onCancelAll(file.id, function (_temp) {\n        let _ref9 = _temp === void 0 ? {} : _temp,\n          reason = _ref9.reason;\n        if (reason === 'user') {\n          upload.abort();\n          _this.resetUploaderReferences(file.id, {\n            abort: true\n          });\n        }\n        resolve(`upload ${file.id} was canceled`);\n      });\n      this.onFilePause(file.id, isPaused => {\n        if (isPaused) {\n          upload.pause();\n        } else {\n          upload.start();\n        }\n      });\n      this.onPauseAll(file.id, () => {\n        upload.pause();\n      });\n      this.onResumeAll(file.id, () => {\n        upload.start();\n      }); // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n\n      if (!file.progress.uploadStarted || !file.isRestored) {\n        upload.start();\n        this.uppy.emit('upload-started', file);\n      }\n    });\n  }\n  async uploadRemote(file) {\n    this.resetUploaderReferences(file.id); // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n\n    if (!file.progress.uploadStarted || !file.isRestored) {\n      this.uppy.emit('upload-started', file);\n    }\n    try {\n      if (file.serverToken) {\n        return this.connectToServerSocket(file);\n      }\n      const serverToken = await _classPrivateFieldLooseBase(this, _queueRequestSocketToken)[_queueRequestSocketToken](file);\n      this.uppy.setFileState(file.id, {\n        serverToken\n      });\n      return this.connectToServerSocket(this.uppy.getFile(file.id));\n    } catch (err) {\n      this.uppy.emit('upload-error', file, err);\n      throw err;\n    }\n  }\n  async connectToServerSocket(file) {\n    var _this2 = this;\n    return new Promise((resolve, reject) => {\n      let queuedRequest;\n      const token = file.serverToken;\n      const host = getSocketHost(file.remote.companionUrl);\n      const socket = new Socket({\n        target: `${host}/api/${token}`\n      });\n      this.uploaderSockets[file.id] = socket;\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy);\n      this.onFileRemove(file.id, () => {\n        queuedRequest.abort();\n        socket.send('cancel', {});\n        this.resetUploaderReferences(file.id, {\n          abort: true\n        });\n        resolve(`upload ${file.id} was removed`);\n      });\n      this.onFilePause(file.id, isPaused => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort();\n          socket.send('pause', {});\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest.abort();\n          queuedRequest = this.requests.run(() => {\n            socket.send('resume', {});\n            return () => {};\n          });\n        }\n      });\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort();\n        socket.send('pause', {});\n      });\n      this.onCancelAll(file.id, function (_temp2) {\n        let _ref10 = _temp2 === void 0 ? {} : _temp2,\n          reason = _ref10.reason;\n        if (reason === 'user') {\n          queuedRequest.abort();\n          socket.send('cancel', {});\n          _this2.resetUploaderReferences(file.id);\n        }\n        resolve(`upload ${file.id} was canceled`);\n      });\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort();\n        if (file.error) {\n          socket.send('pause', {});\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.send('resume', {});\n        });\n      });\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {});\n          socket.send('resume', {});\n        }\n      });\n      this.onRetryAll(file.id, () => {\n        if (socket.isOpen) {\n          socket.send('pause', {});\n          socket.send('resume', {});\n        }\n      });\n      socket.on('progress', progressData => emitSocketProgress(this, progressData, file));\n      socket.on('error', errData => {\n        this.uppy.emit('upload-error', file, new Error(errData.error));\n        this.resetUploaderReferences(file.id);\n        queuedRequest.done();\n        reject(new Error(errData.error));\n      });\n      socket.on('success', data => {\n        const uploadResp = {\n          uploadURL: data.url\n        };\n        this.uppy.emit('upload-success', file, uploadResp);\n        this.resetUploaderReferences(file.id);\n        queuedRequest.done();\n        resolve();\n      });\n      queuedRequest = this.requests.run(() => {\n        if (file.isPaused) {\n          socket.send('pause', {});\n        }\n        return () => {};\n      });\n    });\n  }\n  async upload(fileIDs) {\n    if (fileIDs.length === 0) return undefined;\n    const promises = fileIDs.map(id => {\n      const file = this.uppy.getFile(id);\n      if (file.isRemote) {\n        return this.uploadRemote(file);\n      }\n      return this.uploadFile(file);\n    });\n    return Promise.all(promises);\n  }\n  onFileRemove(fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', file => {\n      if (fileID === file.id) cb(file.id);\n    });\n  }\n  onFilePause(fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        cb(isPaused);\n      }\n    });\n  }\n  onRetry(fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', targetFileID => {\n      if (fileID === targetFileID) {\n        cb();\n      }\n    });\n  }\n  onRetryAll(fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return;\n      cb();\n    });\n  }\n  onPauseAll(fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return;\n      cb();\n    });\n  }\n  onCancelAll(fileID, eventHandler) {\n    var _this3 = this;\n    this.uploaderEvents[fileID].on('cancel-all', function () {\n      if (!_this3.uppy.getFile(fileID)) return;\n      eventHandler(...arguments);\n    });\n  }\n  onResumeAll(fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return;\n      cb();\n    });\n  }\n  install() {\n    const _this$uppy$getState = this.uppy.getState(),\n      capabilities = _this$uppy$getState.capabilities;\n    this.uppy.setState({\n      capabilities: _objectSpread(_objectSpread({}, capabilities), {}, {\n        resumableUploads: true\n      })\n    });\n    this.uppy.addPreProcessor(_classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]);\n    this.uppy.addUploader(this.upload);\n  }\n  uninstall() {\n    const _this$uppy$getState2 = this.uppy.getState(),\n      capabilities = _this$uppy$getState2.capabilities;\n    this.uppy.setState({\n      capabilities: _objectSpread(_objectSpread({}, capabilities), {}, {\n        resumableUploads: false\n      })\n    });\n    this.uppy.removePreProcessor(_classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]);\n    this.uppy.removeUploader(this.upload);\n  }\n}\nAwsS3Multipart.VERSION = packageJson.version;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}