{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar preact = require('preact');\nvar findDOMElement = require('@uppy/utils/lib/findDOMElement');\n/**\n * Defer a frequent call to the microtask queue.\n */\n\nfunction debounce(fn) {\n  var calling = null;\n  var latestArgs = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    latestArgs = args;\n    if (!calling) {\n      calling = Promise.resolve().then(function () {\n        calling = null; // At this point `args` may be different from the most\n        // recent state, if multiple calls happened since this task\n        // was queued. So we use the `latestArgs`, which definitely\n        // is the most recent call.\n\n        return fn.apply(void 0, latestArgs);\n      });\n    }\n    return calling;\n  };\n}\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @returns {Array|string} files or success/fail message\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  function Plugin(uppy, opts) {\n    this.uppy = uppy;\n    this.opts = opts || {};\n    this.update = this.update.bind(this);\n    this.mount = this.mount.bind(this);\n    this.install = this.install.bind(this);\n    this.uninstall = this.uninstall.bind(this);\n  }\n  var _proto = Plugin.prototype;\n  _proto.getPluginState = function getPluginState() {\n    var _this$uppy$getState = this.uppy.getState(),\n      plugins = _this$uppy$getState.plugins;\n    return plugins[this.id] || {};\n  };\n  _proto.setPluginState = function setPluginState(update) {\n    var _extends2;\n    var _this$uppy$getState2 = this.uppy.getState(),\n      plugins = _this$uppy$getState2.plugins;\n    this.uppy.setState({\n      plugins: _extends({}, plugins, (_extends2 = {}, _extends2[this.id] = _extends({}, plugins[this.id], update), _extends2))\n    });\n  };\n  _proto.setOptions = function setOptions(newOpts) {\n    this.opts = _extends({}, this.opts, newOpts);\n    this.setPluginState(); // so that UI re-renders with new options\n  };\n\n  _proto.update = function update(state) {\n    if (typeof this.el === 'undefined') {\n      return;\n    }\n    if (this._updateUI) {\n      this._updateUI(state);\n    }\n  } // Called after every state update, after everything's mounted. Debounced.\n  ;\n\n  _proto.afterUpdate = function afterUpdate() {}\n  /**\n   * Called when plugin is mounted, whether in DOM or into another plugin.\n   * Needed because sometimes plugins are mounted separately/after `install`,\n   * so this.el and this.parent might not be available in `install`.\n   * This is the case with @uppy/react plugins, for example.\n   */;\n\n  _proto.onMount = function onMount() {}\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {string|object} target\n   *\n   */;\n\n  _proto.mount = function mount(target, plugin) {\n    var _this = this;\n    var callerPluginName = plugin.id;\n    var targetElement = findDOMElement(target);\n    if (targetElement) {\n      this.isTargetDOMEl = true; // API for plugins that require a synchronous rerender.\n\n      this.rerender = function (state) {\n        // plugin could be removed, but this.rerender is debounced below,\n        // so it could still be called even after uppy.removePlugin or uppy.close\n        // hence the check\n        if (!_this.uppy.getPlugin(_this.id)) return;\n        _this.el = preact.render(_this.render(state), targetElement, _this.el);\n        _this.afterUpdate();\n      };\n      this._updateUI = debounce(this.rerender);\n      this.uppy.log(\"Installing \" + callerPluginName + \" to a DOM element '\" + target + \"'\"); // clear everything inside the target container\n\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = '';\n      }\n      this.el = preact.render(this.render(this.uppy.getState()), targetElement);\n      this.onMount();\n      return this.el;\n    }\n    var targetPlugin;\n    if (typeof target === 'object' && target instanceof Plugin) {\n      // Targeting a plugin *instance*\n      targetPlugin = target;\n    } else if (typeof target === 'function') {\n      // Targeting a plugin type\n      var Target = target; // Find the target plugin instance.\n\n      this.uppy.iteratePlugins(function (plugin) {\n        if (plugin instanceof Target) {\n          targetPlugin = plugin;\n          return false;\n        }\n      });\n    }\n    if (targetPlugin) {\n      this.uppy.log(\"Installing \" + callerPluginName + \" to \" + targetPlugin.id);\n      this.parent = targetPlugin;\n      this.el = targetPlugin.addTarget(plugin);\n      this.onMount();\n      return this.el;\n    }\n    this.uppy.log(\"Not installing \" + callerPluginName);\n    var message = \"Invalid target option given to \" + callerPluginName + \".\";\n    if (typeof target === 'function') {\n      message += ' The given target is not a Plugin class. ' + 'Please check that you\\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';\n    } else {\n      message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\\n\\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';\n    }\n    throw new Error(message);\n  };\n  _proto.render = function render(state) {\n    throw new Error('Extend the render method to add your plugin to a DOM element');\n  };\n  _proto.addTarget = function addTarget(plugin) {\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n  };\n  _proto.unmount = function unmount() {\n    if (this.isTargetDOMEl && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n  };\n  _proto.install = function install() {};\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n  return Plugin;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}