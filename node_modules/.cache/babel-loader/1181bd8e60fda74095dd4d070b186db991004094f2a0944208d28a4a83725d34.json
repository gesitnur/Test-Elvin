{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js';\nimport findDOMElement from '@uppy/utils/lib/findDOMElement';\nimport toArray from '@uppy/utils/lib/toArray';\nimport getFormData from 'get-form-data';\nconst packageJson = {\n  \"version\": \"3.0.1\"\n};\n/**\n * Form\n */\n\nexport default class Form extends BasePlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.type = 'acquirer';\n    this.id = this.opts.id || 'Form';\n    this.title = 'Form'; // set default options\n\n    const defaultOptions = {\n      target: null,\n      resultName: 'uppyResult',\n      getMetaFromForm: true,\n      addResultToForm: true,\n      submitOnSuccess: false,\n      triggerUploadOnSubmit: false\n    }; // merge default options with the ones set by user\n\n    this.opts = _objectSpread(_objectSpread({}, defaultOptions), opts);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleUploadStart = this.handleUploadStart.bind(this);\n    this.handleSuccess = this.handleSuccess.bind(this);\n    this.addResultToForm = this.addResultToForm.bind(this);\n    this.getMetaFromForm = this.getMetaFromForm.bind(this);\n  }\n  handleUploadStart() {\n    if (this.opts.getMetaFromForm) {\n      this.getMetaFromForm();\n    }\n  }\n  handleSuccess(result) {\n    if (this.opts.addResultToForm) {\n      this.addResultToForm(result);\n    }\n    if (this.opts.submitOnSuccess) {\n      this.form.submit();\n    }\n  }\n  handleFormSubmit(ev) {\n    if (this.opts.triggerUploadOnSubmit) {\n      ev.preventDefault();\n      const elements = toArray(ev.target.elements);\n      const disabledByUppy = [];\n      elements.forEach(el => {\n        const isButton = el.tagName === 'BUTTON' || el.tagName === 'INPUT' && el.type === 'submit';\n        if (isButton && !el.disabled) {\n          el.disabled = true; // eslint-disable-line no-param-reassign\n\n          disabledByUppy.push(el);\n        }\n      });\n      this.uppy.upload().then(() => {\n        disabledByUppy.forEach(button => {\n          button.disabled = false; // eslint-disable-line no-param-reassign\n        });\n      }, err => {\n        disabledByUppy.forEach(button => {\n          button.disabled = false; // eslint-disable-line no-param-reassign\n        });\n\n        return Promise.reject(err);\n      }).catch(err => {\n        this.uppy.log(err.stack || err.message || err);\n      });\n    }\n  }\n  addResultToForm(result) {\n    this.uppy.log('[Form] Adding result to the original form:');\n    this.uppy.log(result);\n    let resultInput = this.form.querySelector(`[name=\"${this.opts.resultName}\"]`);\n    if (resultInput) {\n      // Append new result to the previous result array.\n      // If the previous result is empty, or not an array,\n      // set it to an empty array.\n      let updatedResult;\n      try {\n        updatedResult = JSON.parse(resultInput.value);\n      } catch (err) {// Nothing, since we check for array below anyway\n      }\n      if (!Array.isArray(updatedResult)) {\n        updatedResult = [];\n      }\n      updatedResult.push(result);\n      resultInput.value = JSON.stringify(updatedResult);\n      return;\n    }\n    resultInput = document.createElement('input');\n    resultInput.name = this.opts.resultName;\n    resultInput.type = 'hidden';\n    resultInput.value = JSON.stringify([result]);\n    this.form.appendChild(resultInput);\n  }\n  getMetaFromForm() {\n    const formMeta = getFormData(this.form); // We want to exclude meta the the Form plugin itself has added\n    // See https://github.com/transloadit/uppy/issues/1637\n\n    delete formMeta[this.opts.resultName];\n    this.uppy.setMeta(formMeta);\n  }\n  install() {\n    this.form = findDOMElement(this.opts.target);\n    if (!this.form || this.form.nodeName !== 'FORM') {\n      this.uppy.log('Form plugin requires a <form> target element passed in options to operate, none was found', 'error');\n      return;\n    }\n    this.form.addEventListener('submit', this.handleFormSubmit);\n    this.uppy.on('upload', this.handleUploadStart);\n    this.uppy.on('complete', this.handleSuccess);\n  }\n  uninstall() {\n    this.form.removeEventListener('submit', this.handleFormSubmit);\n    this.uppy.off('upload', this.handleUploadStart);\n    this.uppy.off('complete', this.handleSuccess);\n  }\n}\nForm.VERSION = packageJson.version;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}