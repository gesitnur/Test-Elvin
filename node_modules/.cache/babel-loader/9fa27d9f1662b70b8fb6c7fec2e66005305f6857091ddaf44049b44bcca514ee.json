{"ast":null,"code":"var remoteFileObjToLocal = require('@uppy/utils/lib/remoteFileObjToLocal');\nmodule.exports = /*#__PURE__*/function () {\n  function SharedHandler(plugin) {\n    this.plugin = plugin;\n    this.filterItems = this.filterItems.bind(this);\n    this.toggleCheckbox = this.toggleCheckbox.bind(this);\n    this.isChecked = this.isChecked.bind(this);\n    this.loaderWrapper = this.loaderWrapper.bind(this);\n  }\n  var _proto = SharedHandler.prototype;\n  _proto.filterItems = function filterItems(items) {\n    var state = this.plugin.getPluginState();\n    if (!state.filterInput || state.filterInput === '') {\n      return items;\n    }\n    return items.filter(function (folder) {\n      return folder.name.toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;\n    });\n  }\n  /**\n   * Toggles file/folder checkbox to on/off state while updating files list.\n   *\n   * Note that some extra complexity comes from supporting shift+click to\n   * toggle multiple checkboxes at once, which is done by getting all files\n   * in between last checked file and current one.\n   */;\n\n  _proto.toggleCheckbox = function toggleCheckbox(e, file) {\n    var _this = this;\n    e.stopPropagation();\n    e.preventDefault();\n    e.currentTarget.focus();\n    var _this$plugin$getPlugi = this.plugin.getPluginState(),\n      folders = _this$plugin$getPlugi.folders,\n      files = _this$plugin$getPlugi.files;\n    var items = this.filterItems(folders.concat(files)); // Shift-clicking selects a single consecutive list of items\n    // starting at the previous click and deselects everything else.\n\n    if (this.lastCheckbox && e.shiftKey) {\n      var _currentSelection;\n      var prevIndex = items.indexOf(this.lastCheckbox);\n      var currentIndex = items.indexOf(file);\n      if (prevIndex < currentIndex) {\n        _currentSelection = items.slice(prevIndex, currentIndex + 1);\n      } else {\n        _currentSelection = items.slice(currentIndex, prevIndex + 1);\n      } // Check restrictions on each file in currentSelection,\n      // reduce it to only contain files that pass restrictions\n\n      _currentSelection = _currentSelection.reduce(function (reducedCurrentSelection, item) {\n        var uppy = _this.plugin.uppy;\n        var validatedRestrictions = uppy.validateRestrictions(remoteFileObjToLocal(item), [].concat(uppy.getFiles(), reducedCurrentSelection));\n        if (!validatedRestrictions.result) {\n          uppy.info({\n            message: validatedRestrictions.reason\n          }, 'error', uppy.opts.infoTimeout);\n          return reducedCurrentSelection;\n        }\n        return [].concat(reducedCurrentSelection, [item]);\n      });\n      this.plugin.setPluginState({\n        currentSelection: _currentSelection\n      });\n      return;\n    }\n    this.lastCheckbox = file;\n    var _this$plugin$getPlugi2 = this.plugin.getPluginState(),\n      currentSelection = _this$plugin$getPlugi2.currentSelection;\n    if (this.isChecked(file)) {\n      this.plugin.setPluginState({\n        currentSelection: currentSelection.filter(function (item) {\n          return item.id !== file.id;\n        })\n      });\n    } else {\n      this.plugin.setPluginState({\n        currentSelection: currentSelection.concat([file])\n      });\n    }\n  };\n  _proto.isChecked = function isChecked(file) {\n    var _this$plugin$getPlugi3 = this.plugin.getPluginState(),\n      currentSelection = _this$plugin$getPlugi3.currentSelection; // comparing id instead of the file object, because the reference to the object\n    // changes when we switch folders, and the file list is updated\n\n    return currentSelection.some(function (item) {\n      return item.id === file.id;\n    });\n  };\n  _proto.loaderWrapper = function loaderWrapper(promise, then, catch_) {\n    var _this2 = this;\n    promise.then(function (result) {\n      _this2.plugin.setPluginState({\n        loading: false\n      });\n      then(result);\n    }).catch(function (err) {\n      _this2.plugin.setPluginState({\n        loading: false\n      });\n      catch_(err);\n    });\n    this.plugin.setPluginState({\n      loading: true\n    });\n  };\n  return SharedHandler;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}