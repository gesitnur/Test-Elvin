{"ast":null,"code":"export default function calculateProcessingProgress(files) {\n  const values = [];\n  let mode;\n  let message;\n  for (const _ref of Object.values(files)) {\n    const progress = _ref.progress;\n    const preprocess = progress.preprocess,\n      postprocess = progress.postprocess; // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first fileâ€¦\n\n    if (message == null && (preprocess || postprocess)) {\n      var _ref2 = preprocess || postprocess;\n      mode = _ref2.mode;\n      message = _ref2.message;\n    }\n    if ((preprocess == null ? void 0 : preprocess.mode) === 'determinate') values.push(preprocess.value);\n    if ((postprocess == null ? void 0 : postprocess.mode) === 'determinate') values.push(postprocess.value);\n  }\n  const value = values.reduce((total, progressValue) => {\n    return total + progressValue / values.length;\n  }, 0);\n  return {\n    mode,\n    message,\n    value\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}