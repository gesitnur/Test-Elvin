{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport { AbortController } from '@uppy/utils/lib/AbortController';\nconst MB = 1024 * 1024;\nconst defaultOptions = {\n  getChunkSize(file) {\n    return Math.ceil(file.size / 10000);\n  },\n  onProgress() {},\n  onPartComplete() {},\n  onSuccess() {},\n  onError(err) {\n    throw err;\n  }\n};\nfunction ensureInt(value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10);\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  throw new TypeError('Expected a number');\n}\nconst pausingUploadReason = Symbol('pausing upload, not an actual error');\nvar _abortController = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortController\");\nvar _chunks = /*#__PURE__*/_classPrivateFieldLooseKey(\"chunks\");\nvar _chunkState = /*#__PURE__*/_classPrivateFieldLooseKey(\"chunkState\");\nvar _data = /*#__PURE__*/_classPrivateFieldLooseKey(\"data\");\nvar _file = /*#__PURE__*/_classPrivateFieldLooseKey(\"file\");\nvar _uploadPromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadPromise\");\nvar _onError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onError\");\nvar _onSuccess = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSuccess\");\nvar _onReject = /*#__PURE__*/_classPrivateFieldLooseKey(\"onReject\");\nvar _initChunks = /*#__PURE__*/_classPrivateFieldLooseKey(\"initChunks\");\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\nvar _resumeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"resumeUpload\");\nvar _onPartProgress = /*#__PURE__*/_classPrivateFieldLooseKey(\"onPartProgress\");\nvar _onPartComplete = /*#__PURE__*/_classPrivateFieldLooseKey(\"onPartComplete\");\nvar _abortUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortUpload\");\nclass MultipartUploader {\n  constructor(data, options) {\n    var _this$options, _this$options$getChun;\n    Object.defineProperty(this, _abortUpload, {\n      value: _abortUpload2\n    });\n    Object.defineProperty(this, _resumeUpload, {\n      value: _resumeUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _initChunks, {\n      value: _initChunks2\n    });\n    Object.defineProperty(this, _abortController, {\n      writable: true,\n      value: new AbortController()\n    });\n    Object.defineProperty(this, _chunks, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _chunkState, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _data, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _file, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _uploadPromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _onError, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _onSuccess, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _onReject, {\n      writable: true,\n      value: err => (err == null ? void 0 : err.cause) === pausingUploadReason ? null : _classPrivateFieldLooseBase(this, _onError)[_onError](err)\n    });\n    Object.defineProperty(this, _onPartProgress, {\n      writable: true,\n      value: index => ev => {\n        if (!ev.lengthComputable) return;\n        const sent = ev.loaded;\n        _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][index].uploaded = ensureInt(sent);\n        const totalUploaded = _classPrivateFieldLooseBase(this, _chunkState)[_chunkState].reduce((n, c) => n + c.uploaded, 0);\n        this.options.onProgress(totalUploaded, _classPrivateFieldLooseBase(this, _data)[_data].size);\n      }\n    });\n    Object.defineProperty(this, _onPartComplete, {\n      writable: true,\n      value: index => etag => {\n        // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n        _classPrivateFieldLooseBase(this, _chunks)[_chunks][index] = null;\n        _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][index].etag = etag;\n        _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][index].done = true;\n        const part = {\n          PartNumber: index + 1,\n          ETag: etag\n        };\n        this.options.onPartComplete(part);\n      }\n    });\n    this.options = _objectSpread(_objectSpread({}, defaultOptions), options); // Use default `getChunkSize` if it was null or something\n\n    (_this$options$getChun = (_this$options = this.options).getChunkSize) != null ? _this$options$getChun : _this$options.getChunkSize = defaultOptions.getChunkSize;\n    _classPrivateFieldLooseBase(this, _data)[_data] = data;\n    _classPrivateFieldLooseBase(this, _file)[_file] = options.file;\n    _classPrivateFieldLooseBase(this, _onSuccess)[_onSuccess] = this.options.onSuccess;\n    _classPrivateFieldLooseBase(this, _onError)[_onError] = this.options.onError;\n    _classPrivateFieldLooseBase(this, _initChunks)[_initChunks]();\n  }\n  start() {\n    if (_classPrivateFieldLooseBase(this, _uploadPromise)[_uploadPromise]) {\n      if (!_classPrivateFieldLooseBase(this, _abortController)[_abortController].signal.aborted) _classPrivateFieldLooseBase(this, _abortController)[_abortController].abort(pausingUploadReason);\n      _classPrivateFieldLooseBase(this, _abortController)[_abortController] = new AbortController();\n      _classPrivateFieldLooseBase(this, _resumeUpload)[_resumeUpload]();\n    } else {\n      _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]();\n    }\n  }\n  pause() {\n    _classPrivateFieldLooseBase(this, _abortController)[_abortController].abort(pausingUploadReason); // Swap it out for a new controller, because this instance may be resumed later.\n\n    _classPrivateFieldLooseBase(this, _abortController)[_abortController] = new AbortController();\n  }\n  abort(opts) {\n    var _opts;\n    if (opts === void 0) {\n      opts = undefined;\n    }\n    if ((_opts = opts) != null && _opts.really) _classPrivateFieldLooseBase(this, _abortUpload)[_abortUpload]();else this.pause();\n  } // TODO: remove this in the next major\n\n  get chunkState() {\n    return _classPrivateFieldLooseBase(this, _chunkState)[_chunkState];\n  }\n}\nfunction _initChunks2() {\n  const desiredChunkSize = this.options.getChunkSize(_classPrivateFieldLooseBase(this, _data)[_data]); // at least 5MB per request, at most 10k requests\n\n  const fileSize = _classPrivateFieldLooseBase(this, _data)[_data].size;\n  const minChunkSize = Math.max(5 * MB, Math.ceil(fileSize / 10000));\n  const chunkSize = Math.max(desiredChunkSize, minChunkSize); // Upload zero-sized files in one zero-sized chunk\n\n  if (_classPrivateFieldLooseBase(this, _data)[_data].size === 0) {\n    _classPrivateFieldLooseBase(this, _chunks)[_chunks] = [_classPrivateFieldLooseBase(this, _data)[_data]];\n    _classPrivateFieldLooseBase(this, _data)[_data].onProgress = _classPrivateFieldLooseBase(this, _onPartProgress)[_onPartProgress](0);\n    _classPrivateFieldLooseBase(this, _data)[_data].onComplete = _classPrivateFieldLooseBase(this, _onPartComplete)[_onPartComplete](0);\n  } else {\n    const arraySize = Math.ceil(fileSize / chunkSize);\n    _classPrivateFieldLooseBase(this, _chunks)[_chunks] = Array(arraySize);\n    let j = 0;\n    for (let i = 0; i < fileSize; i += chunkSize) {\n      const end = Math.min(fileSize, i + chunkSize);\n      const chunk = _classPrivateFieldLooseBase(this, _data)[_data].slice(i, end);\n      chunk.onProgress = _classPrivateFieldLooseBase(this, _onPartProgress)[_onPartProgress](j);\n      chunk.onComplete = _classPrivateFieldLooseBase(this, _onPartComplete)[_onPartComplete](j);\n      _classPrivateFieldLooseBase(this, _chunks)[_chunks][j++] = chunk;\n    }\n  }\n  _classPrivateFieldLooseBase(this, _chunkState)[_chunkState] = _classPrivateFieldLooseBase(this, _chunks)[_chunks].map(() => ({\n    uploaded: 0\n  }));\n}\nfunction _createUpload2() {\n  _classPrivateFieldLooseBase(this, _uploadPromise)[_uploadPromise] = this.options.companionComm.uploadFile(_classPrivateFieldLooseBase(this, _file)[_file], _classPrivateFieldLooseBase(this, _chunks)[_chunks], _classPrivateFieldLooseBase(this, _abortController)[_abortController].signal).then(_classPrivateFieldLooseBase(this, _onSuccess)[_onSuccess], _classPrivateFieldLooseBase(this, _onReject)[_onReject]);\n}\nfunction _resumeUpload2() {\n  _classPrivateFieldLooseBase(this, _uploadPromise)[_uploadPromise] = this.options.companionComm.resumeUploadFile(_classPrivateFieldLooseBase(this, _file)[_file], _classPrivateFieldLooseBase(this, _chunks)[_chunks], _classPrivateFieldLooseBase(this, _abortController)[_abortController].signal).then(_classPrivateFieldLooseBase(this, _onSuccess)[_onSuccess], _classPrivateFieldLooseBase(this, _onReject)[_onReject]);\n}\nfunction _abortUpload2() {\n  _classPrivateFieldLooseBase(this, _abortController)[_abortController].abort();\n  this.options.companionComm.abortFileUpload(_classPrivateFieldLooseBase(this, _file)[_file]).catch(err => this.options.log(err));\n}\nexport default MultipartUploader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}