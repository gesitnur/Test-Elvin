{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar cuid = require('cuid'); // Redux action name.\n\nvar STATE_UPDATE = 'uppy/STATE_UPDATE'; // Pluck Uppy state from the Redux store in the default location.\n\nvar defaultSelector = function defaultSelector(id) {\n  return function (state) {\n    return state.uppy[id];\n  };\n};\n/**\n * Redux store.\n *\n * @param {object} opts.store - The Redux store to use.\n * @param {string} opts.id - This store instance's ID. Defaults to a random string.\n *    If you need to access Uppy state through Redux, eg. to render custom UI, set this to something constant.\n * @param {Function} opts.selector - Function, `(state) => uppyState`, to pluck state from the Redux store.\n *    Defaults to retrieving `state.uppy[opts.id]`. Override if you placed Uppy state elsewhere in the Redux store.\n */\n\nvar ReduxStore = /*#__PURE__*/function () {\n  function ReduxStore(opts) {\n    this._store = opts.store;\n    this._id = opts.id || cuid();\n    this._selector = opts.selector || defaultSelector(this._id); // Calling `setState` to dispatch an action to the Redux store.\n    // The intent is to make sure that the reducer has run once.\n\n    this.setState({});\n  }\n  var _proto = ReduxStore.prototype;\n  _proto.setState = function setState(patch) {\n    this._store.dispatch({\n      type: STATE_UPDATE,\n      id: this._id,\n      payload: patch\n    });\n  };\n  _proto.getState = function getState() {\n    return this._selector(this._store.getState());\n  };\n  _proto.subscribe = function subscribe(cb) {\n    var _this = this;\n    var prevState = this.getState();\n    return this._store.subscribe(function () {\n      var nextState = _this.getState();\n      if (prevState !== nextState) {\n        var patch = getPatch(prevState, nextState);\n        cb(prevState, nextState, patch);\n        prevState = nextState;\n      }\n    });\n  };\n  return ReduxStore;\n}();\nReduxStore.VERSION = \"1.2.8\";\nfunction getPatch(prev, next) {\n  var nextKeys = Object.keys(next);\n  var patch = {};\n  nextKeys.forEach(function (k) {\n    if (prev[k] !== next[k]) patch[k] = next[k];\n  });\n  return patch;\n}\nfunction reducer(state, action) {\n  if (state === void 0) {\n    state = {};\n  }\n  if (action.type === STATE_UPDATE) {\n    var _extends2;\n    var newState = _extends({}, state[action.id], action.payload);\n    return _extends({}, state, (_extends2 = {}, _extends2[action.id] = newState, _extends2));\n  }\n  return state;\n}\nfunction middleware() {\n  // Do nothing, at the moment.\n  return function () {\n    return function (next) {\n      return function (action) {\n        next(action);\n      };\n    };\n  };\n}\nmodule.exports = function createReduxStore(opts) {\n  return new ReduxStore(opts);\n};\nmodule.exports.STATE_UPDATE = STATE_UPDATE;\nmodule.exports.reducer = reducer;\nmodule.exports.middleware = middleware;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}