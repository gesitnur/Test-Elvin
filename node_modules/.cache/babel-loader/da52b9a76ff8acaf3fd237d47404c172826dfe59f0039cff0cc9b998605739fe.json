{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('@uppy/core'),\n  Plugin = _require.Plugin;\nvar Translator = require('@uppy/utils/lib/Translator');\nvar dataURItoBlob = require('@uppy/utils/lib/dataURItoBlob');\nvar isObjectURL = require('@uppy/utils/lib/isObjectURL');\nvar isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');\nvar MathLog2 = require('math-log2'); // Polyfill for IE.\n\nvar exifr = require('exifr/dist/mini.legacy.umd.js');\n/**\n * The Thumbnail Generator plugin\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(ThumbnailGenerator, _Plugin);\n  function ThumbnailGenerator(uppy, opts) {\n    var _this;\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.onFileAdded = function (file) {\n      if (!file.preview && file.data && isPreviewSupported(file.type) && !file.isRemote) {\n        _this.addToQueue(file.id);\n      }\n    };\n    _this.onCancelRequest = function (file) {\n      var index = _this.queue.indexOf(file.id);\n      if (index !== -1) {\n        _this.queue.splice(index, 1);\n      }\n    };\n    _this.onFileRemoved = function (file) {\n      var index = _this.queue.indexOf(file.id);\n      if (index !== -1) {\n        _this.queue.splice(index, 1);\n      } // Clean up object URLs.\n\n      if (file.preview && isObjectURL(file.preview)) {\n        URL.revokeObjectURL(file.preview);\n      }\n    };\n    _this.onRestored = function () {\n      var restoredFiles = _this.uppy.getFiles().filter(function (file) {\n        return file.isRestored;\n      });\n      restoredFiles.forEach(function (file) {\n        // Only add blob URLs; they are likely invalid after being restored.\n        if (!file.preview || isObjectURL(file.preview)) {\n          _this.addToQueue(file.id);\n        }\n      });\n    };\n    _this.waitUntilAllProcessed = function (fileIDs) {\n      fileIDs.forEach(function (fileID) {\n        var file = _this.uppy.getFile(fileID);\n        _this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: _this.i18n('generatingThumbnails')\n        });\n      });\n      var emitPreprocessCompleteForAll = function emitPreprocessCompleteForAll() {\n        fileIDs.forEach(function (fileID) {\n          var file = _this.uppy.getFile(fileID);\n          _this.uppy.emit('preprocess-complete', file);\n        });\n      };\n      return new Promise(function (resolve, reject) {\n        if (_this.queueProcessing) {\n          _this.uppy.once('thumbnail:all-generated', function () {\n            emitPreprocessCompleteForAll();\n            resolve();\n          });\n        } else {\n          emitPreprocessCompleteForAll();\n          resolve();\n        }\n      });\n    };\n    _this.type = 'modifier';\n    _this.id = _this.opts.id || 'ThumbnailGenerator';\n    _this.title = 'Thumbnail Generator';\n    _this.queue = [];\n    _this.queueProcessing = false;\n    _this.defaultThumbnailDimension = 200;\n    _this.thumbnailType = _this.opts.thumbnailType || 'image/jpeg';\n    _this.defaultLocale = {\n      strings: {\n        generatingThumbnails: 'Generating thumbnails...'\n      }\n    };\n    var defaultOptions = {\n      thumbnailWidth: null,\n      thumbnailHeight: null,\n      waitForThumbnailsBeforeUpload: false,\n      lazy: false\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    if (_this.opts.lazy && _this.opts.waitForThumbnailsBeforeUpload) {\n      throw new Error('ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.');\n    }\n    _this.i18nInit();\n    return _this;\n  }\n  var _proto = ThumbnailGenerator.prototype;\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n    this.i18nInit();\n  };\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  }\n  /**\n   * Create a thumbnail for the given Uppy file object.\n   *\n   * @param {{data: Blob}} file\n   * @param {number} targetWidth\n   * @param {number} targetHeight\n   * @returns {Promise}\n   */;\n\n  _proto.createThumbnail = function createThumbnail(file, targetWidth, targetHeight) {\n    var _this2 = this;\n\n    // bug in the compatibility data\n    // eslint-disable-next-line compat/compat\n    var originalUrl = URL.createObjectURL(file.data);\n    var onload = new Promise(function (resolve, reject) {\n      var image = new Image();\n      image.src = originalUrl;\n      image.addEventListener('load', function () {\n        // bug in the compatibility data\n        // eslint-disable-next-line compat/compat\n        URL.revokeObjectURL(originalUrl);\n        resolve(image);\n      });\n      image.addEventListener('error', function (event) {\n        // bug in the compatibility data\n        // eslint-disable-next-line compat/compat\n        URL.revokeObjectURL(originalUrl);\n        reject(event.error || new Error('Could not create thumbnail'));\n      });\n    });\n    var orientationPromise = exifr.rotation(file.data).catch(function (_err) {\n      return 1;\n    });\n    return Promise.all([onload, orientationPromise]).then(function (_ref) {\n      var image = _ref[0],\n        orientation = _ref[1];\n      var dimensions = _this2.getProportionalDimensions(image, targetWidth, targetHeight, orientation.deg);\n      var rotatedImage = _this2.rotateImage(image, orientation);\n      var resizedImage = _this2.resizeImage(rotatedImage, dimensions.width, dimensions.height);\n      return _this2.canvasToBlob(resizedImage, _this2.thumbnailType, 80);\n    }).then(function (blob) {\n      // bug in the compatibility data\n      // eslint-disable-next-line compat/compat\n      return URL.createObjectURL(blob);\n    });\n  }\n  /**\n   * Get the new calculated dimensions for the given image and a target width\n   * or height. If both width and height are given, only width is taken into\n   * account. If neither width nor height are given, the default dimension\n   * is used.\n   */;\n\n  _proto.getProportionalDimensions = function getProportionalDimensions(img, width, height, rotation) {\n    var aspect = img.width / img.height;\n    if (rotation === 90 || rotation === 270) {\n      aspect = img.height / img.width;\n    }\n    if (width != null) {\n      return {\n        width: width,\n        height: Math.round(width / aspect)\n      };\n    }\n    if (height != null) {\n      return {\n        width: Math.round(height * aspect),\n        height: height\n      };\n    }\n    return {\n      width: this.defaultThumbnailDimension,\n      height: Math.round(this.defaultThumbnailDimension / aspect)\n    };\n  }\n  /**\n   * Make sure the image doesnâ€™t exceed browser/device canvas limits.\n   * For ios with 256 RAM and ie\n   */;\n\n  _proto.protect = function protect(image) {\n    // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\n    var ratio = image.width / image.height;\n    var maxSquare = 5000000; // ios max canvas square\n\n    var maxSize = 4096; // ie max canvas dimensions\n\n    var maxW = Math.floor(Math.sqrt(maxSquare * ratio));\n    var maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));\n    if (maxW > maxSize) {\n      maxW = maxSize;\n      maxH = Math.round(maxW / ratio);\n    }\n    if (maxH > maxSize) {\n      maxH = maxSize;\n      maxW = Math.round(ratio * maxH);\n    }\n    if (image.width > maxW) {\n      var canvas = document.createElement('canvas');\n      canvas.width = maxW;\n      canvas.height = maxH;\n      canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH);\n      image = canvas;\n    }\n    return image;\n  }\n  /**\n   * Resize an image to the target `width` and `height`.\n   *\n   * Returns a Canvas with the resized image on it.\n   */;\n\n  _proto.resizeImage = function resizeImage(image, targetWidth, targetHeight) {\n    // Resizing in steps refactored to use a solution from\n    // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01\n    image = this.protect(image);\n    var steps = Math.ceil(MathLog2(image.width / targetWidth));\n    if (steps < 1) {\n      steps = 1;\n    }\n    var sW = targetWidth * Math.pow(2, steps - 1);\n    var sH = targetHeight * Math.pow(2, steps - 1);\n    var x = 2;\n    while (steps--) {\n      var canvas = document.createElement('canvas');\n      canvas.width = sW;\n      canvas.height = sH;\n      canvas.getContext('2d').drawImage(image, 0, 0, sW, sH);\n      image = canvas;\n      sW = Math.round(sW / x);\n      sH = Math.round(sH / x);\n    }\n    return image;\n  };\n  _proto.rotateImage = function rotateImage(image, translate) {\n    var w = image.width;\n    var h = image.height;\n    if (translate.deg === 90 || translate.deg === 270) {\n      w = image.height;\n      h = image.width;\n    }\n    var canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    var context = canvas.getContext('2d');\n    context.translate(w / 2, h / 2);\n    if (translate.canvas) {\n      context.rotate(translate.rad);\n      context.scale(translate.scaleX, translate.scaleY);\n    }\n    context.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);\n    return canvas;\n  }\n  /**\n   * Save a <canvas> element's content to a Blob object.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @returns {Promise}\n   */;\n\n  _proto.canvasToBlob = function canvasToBlob(canvas, type, quality) {\n    try {\n      canvas.getContext('2d').getImageData(0, 0, 1, 1);\n    } catch (err) {\n      if (err.code === 18) {\n        return Promise.reject(new Error('cannot read image, probably an svg with external resources'));\n      }\n    }\n    if (canvas.toBlob) {\n      return new Promise(function (resolve) {\n        canvas.toBlob(resolve, type, quality);\n      }).then(function (blob) {\n        if (blob === null) {\n          throw new Error('cannot read image, probably an svg with external resources');\n        }\n        return blob;\n      });\n    }\n    return Promise.resolve().then(function () {\n      return dataURItoBlob(canvas.toDataURL(type, quality), {});\n    }).then(function (blob) {\n      if (blob === null) {\n        throw new Error('could not extract blob, probably an old browser');\n      }\n      return blob;\n    });\n  }\n  /**\n   * Set the preview URL for a file.\n   */;\n\n  _proto.setPreviewURL = function setPreviewURL(fileID, preview) {\n    this.uppy.setFileState(fileID, {\n      preview: preview\n    });\n  };\n  _proto.addToQueue = function addToQueue(item) {\n    this.queue.push(item);\n    if (this.queueProcessing === false) {\n      this.processQueue();\n    }\n  };\n  _proto.processQueue = function processQueue() {\n    var _this3 = this;\n    this.queueProcessing = true;\n    if (this.queue.length > 0) {\n      var current = this.uppy.getFile(this.queue.shift());\n      if (!current) {\n        this.uppy.log('[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug', 'error');\n        return;\n      }\n      return this.requestThumbnail(current).catch(function (err) {}) // eslint-disable-line handle-callback-err\n      .then(function () {\n        return _this3.processQueue();\n      });\n    }\n    this.queueProcessing = false;\n    this.uppy.log('[ThumbnailGenerator] Emptied thumbnail queue');\n    this.uppy.emit('thumbnail:all-generated');\n  };\n  _proto.requestThumbnail = function requestThumbnail(file) {\n    var _this4 = this;\n    if (isPreviewSupported(file.type) && !file.isRemote) {\n      return this.createThumbnail(file, this.opts.thumbnailWidth, this.opts.thumbnailHeight).then(function (preview) {\n        _this4.setPreviewURL(file.id, preview);\n        _this4.uppy.log(\"[ThumbnailGenerator] Generated thumbnail for \" + file.id);\n        _this4.uppy.emit('thumbnail:generated', _this4.uppy.getFile(file.id), preview);\n      }).catch(function (err) {\n        _this4.uppy.log(\"[ThumbnailGenerator] Failed thumbnail for \" + file.id + \":\", 'warning');\n        _this4.uppy.log(err, 'warning');\n        _this4.uppy.emit('thumbnail:error', _this4.uppy.getFile(file.id), err);\n      });\n    }\n    return Promise.resolve();\n  };\n  _proto.install = function install() {\n    this.uppy.on('file-removed', this.onFileRemoved);\n    if (this.opts.lazy) {\n      this.uppy.on('thumbnail:request', this.onFileAdded);\n      this.uppy.on('thumbnail:cancel', this.onCancelRequest);\n    } else {\n      this.uppy.on('file-added', this.onFileAdded);\n      this.uppy.on('restored', this.onRestored);\n    }\n    if (this.opts.waitForThumbnailsBeforeUpload) {\n      this.uppy.addPreProcessor(this.waitUntilAllProcessed);\n    }\n  };\n  _proto.uninstall = function uninstall() {\n    this.uppy.off('file-removed', this.onFileRemoved);\n    if (this.opts.lazy) {\n      this.uppy.off('thumbnail:request', this.onFileAdded);\n      this.uppy.off('thumbnail:cancel', this.onCancelRequest);\n    } else {\n      this.uppy.off('file-added', this.onFileAdded);\n      this.uppy.off('restored', this.onRestored);\n    }\n    if (this.opts.waitForThumbnailsBeforeUpload) {\n      this.uppy.removePreProcessor(this.waitUntilAllProcessed);\n    }\n  };\n  return ThumbnailGenerator;\n}(Plugin), _class.VERSION = \"1.7.11\", _temp);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}