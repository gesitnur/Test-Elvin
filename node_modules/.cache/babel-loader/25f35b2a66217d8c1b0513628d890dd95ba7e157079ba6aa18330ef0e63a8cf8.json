{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport Emitter from 'component-emitter';\n/**\n * Track completion of multiple assemblies.\n *\n * Emits 'assembly-complete' when an assembly completes.\n * Emits 'assembly-error' when an assembly fails.\n * Exposes a `.promise` property that resolves when all assemblies have\n * completed (or failed).\n */\n\nvar _assemblyIDs = /*#__PURE__*/_classPrivateFieldLooseKey(\"assemblyIDs\");\nvar _reject = /*#__PURE__*/_classPrivateFieldLooseKey(\"reject\");\nvar _remaining = /*#__PURE__*/_classPrivateFieldLooseKey(\"remaining\");\nvar _resolve = /*#__PURE__*/_classPrivateFieldLooseKey(\"resolve\");\nvar _uppy = /*#__PURE__*/_classPrivateFieldLooseKey(\"uppy\");\nvar _watching = /*#__PURE__*/_classPrivateFieldLooseKey(\"watching\");\nvar _onAssemblyComplete = /*#__PURE__*/_classPrivateFieldLooseKey(\"onAssemblyComplete\");\nvar _onAssemblyCancel = /*#__PURE__*/_classPrivateFieldLooseKey(\"onAssemblyCancel\");\nvar _onAssemblyError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onAssemblyError\");\nvar _onImportError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onImportError\");\nvar _checkAllComplete = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAllComplete\");\nvar _removeListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeListeners\");\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\nclass TransloaditAssemblyWatcher extends Emitter {\n  constructor(uppy, assemblyIDs) {\n    super();\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _removeListeners, {\n      value: _removeListeners2\n    });\n    Object.defineProperty(this, _checkAllComplete, {\n      value: _checkAllComplete2\n    });\n    Object.defineProperty(this, _watching, {\n      value: _watching2\n    });\n    Object.defineProperty(this, _assemblyIDs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _reject, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _remaining, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _resolve, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _uppy, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _onAssemblyComplete, {\n      writable: true,\n      value: assembly => {\n        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _uppy)[_uppy].log(`[Transloadit] AssemblyWatcher: Got Assembly finish ${assembly.assembly_id}`);\n        this.emit('assembly-complete', assembly.assembly_id);\n        _classPrivateFieldLooseBase(this, _checkAllComplete)[_checkAllComplete]();\n      }\n    });\n    Object.defineProperty(this, _onAssemblyCancel, {\n      writable: true,\n      value: assembly => {\n        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _checkAllComplete)[_checkAllComplete]();\n      }\n    });\n    Object.defineProperty(this, _onAssemblyError, {\n      writable: true,\n      value: (assembly, error) => {\n        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _uppy)[_uppy].log(`[Transloadit] AssemblyWatcher: Got Assembly error ${assembly.assembly_id}`);\n        _classPrivateFieldLooseBase(this, _uppy)[_uppy].log(error);\n        this.emit('assembly-error', assembly.assembly_id, error);\n        _classPrivateFieldLooseBase(this, _checkAllComplete)[_checkAllComplete]();\n      }\n    });\n    Object.defineProperty(this, _onImportError, {\n      writable: true,\n      value: (assembly, fileID, error) => {\n        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {\n          return;\n        } // Not sure if we should be doing something when it's just one file failing.\n        // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n        // I think failing the upload is better than silently ignoring.\n        // In the future we should maybe have a way to resolve uploads with some failures,\n        // like returning an object with `{ successful, failed }` uploads.\n\n        _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError](assembly, error);\n      }\n    });\n    _classPrivateFieldLooseBase(this, _uppy)[_uppy] = uppy;\n    _classPrivateFieldLooseBase(this, _assemblyIDs)[_assemblyIDs] = assemblyIDs;\n    _classPrivateFieldLooseBase(this, _remaining)[_remaining] = assemblyIDs.length;\n    this.promise = new Promise((resolve, reject) => {\n      _classPrivateFieldLooseBase(this, _resolve)[_resolve] = resolve;\n      _classPrivateFieldLooseBase(this, _reject)[_reject] = reject;\n    });\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n  /**\n   * Are we watching this assembly ID?\n   */\n}\n\nfunction _watching2(id) {\n  return _classPrivateFieldLooseBase(this, _assemblyIDs)[_assemblyIDs].indexOf(id) !== -1;\n}\nfunction _checkAllComplete2() {\n  _classPrivateFieldLooseBase(this, _remaining)[_remaining] -= 1;\n  if (_classPrivateFieldLooseBase(this, _remaining)[_remaining] === 0) {\n    // We're done, these listeners can be removed\n    _classPrivateFieldLooseBase(this, _removeListeners)[_removeListeners]();\n    _classPrivateFieldLooseBase(this, _resolve)[_resolve]();\n  }\n}\nfunction _removeListeners2() {\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:complete', _classPrivateFieldLooseBase(this, _onAssemblyComplete)[_onAssemblyComplete]);\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:assembly-cancel', _classPrivateFieldLooseBase(this, _onAssemblyCancel)[_onAssemblyCancel]);\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:assembly-error', _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError]);\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:import-error', _classPrivateFieldLooseBase(this, _onImportError)[_onImportError]);\n}\nfunction _addListeners2() {\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:complete', _classPrivateFieldLooseBase(this, _onAssemblyComplete)[_onAssemblyComplete]);\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:assembly-cancel', _classPrivateFieldLooseBase(this, _onAssemblyCancel)[_onAssemblyCancel]);\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:assembly-error', _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError]);\n  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:import-error', _classPrivateFieldLooseBase(this, _onImportError)[_onImportError]);\n}\nexport default TransloaditAssemblyWatcher;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}