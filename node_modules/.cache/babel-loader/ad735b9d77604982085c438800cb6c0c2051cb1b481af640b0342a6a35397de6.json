{"ast":null,"code":"import remoteFileObjToLocal from '@uppy/utils/lib/remoteFileObjToLocal';\nexport default class SharedHandler {\n  constructor(plugin) {\n    this.plugin = plugin;\n    this.filterItems = this.filterItems.bind(this);\n    this.toggleCheckbox = this.toggleCheckbox.bind(this);\n    this.recordShiftKeyPress = this.recordShiftKeyPress.bind(this);\n    this.isChecked = this.isChecked.bind(this);\n    this.loaderWrapper = this.loaderWrapper.bind(this);\n  }\n  filterItems(items) {\n    const state = this.plugin.getPluginState();\n    if (!state.filterInput || state.filterInput === '') {\n      return items;\n    }\n    return items.filter(folder => {\n      return folder.name.toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;\n    });\n  }\n  recordShiftKeyPress(e) {\n    this.isShiftKeyPressed = e.shiftKey;\n  }\n  /**\n   * Toggles file/folder checkbox to on/off state while updating files list.\n   *\n   * Note that some extra complexity comes from supporting shift+click to\n   * toggle multiple checkboxes at once, which is done by getting all files\n   * in between last checked file and current one.\n   */\n\n  toggleCheckbox(e, file) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.currentTarget.focus();\n    const _this$plugin$getPlugi = this.plugin.getPluginState(),\n      folders = _this$plugin$getPlugi.folders,\n      files = _this$plugin$getPlugi.files;\n    const items = this.filterItems(folders.concat(files)); // Shift-clicking selects a single consecutive list of items\n    // starting at the previous click and deselects everything else.\n\n    if (this.lastCheckbox && this.isShiftKeyPressed) {\n      const prevIndex = items.indexOf(this.lastCheckbox);\n      const currentIndex = items.indexOf(file);\n      const currentSelection = prevIndex < currentIndex ? items.slice(prevIndex, currentIndex + 1) : items.slice(currentIndex, prevIndex + 1);\n      const reducedCurrentSelection = []; // Check restrictions on each file in currentSelection,\n      // reduce it to only contain files that pass restrictions\n\n      for (const item of currentSelection) {\n        const uppy = this.plugin.uppy;\n        const restrictionError = uppy.validateRestrictions(remoteFileObjToLocal(item), [...uppy.getFiles(), ...reducedCurrentSelection]);\n        if (!restrictionError) {\n          reducedCurrentSelection.push(item);\n        } else {\n          uppy.info({\n            message: restrictionError.message\n          }, 'error', uppy.opts.infoTimeout);\n        }\n      }\n      this.plugin.setPluginState({\n        currentSelection: reducedCurrentSelection\n      });\n      return;\n    }\n    this.lastCheckbox = file;\n    const _this$plugin$getPlugi2 = this.plugin.getPluginState(),\n      currentSelection = _this$plugin$getPlugi2.currentSelection;\n    if (this.isChecked(file)) {\n      this.plugin.setPluginState({\n        currentSelection: currentSelection.filter(item => item.id !== file.id)\n      });\n    } else {\n      this.plugin.setPluginState({\n        currentSelection: currentSelection.concat([file])\n      });\n    }\n  }\n  isChecked(file) {\n    const _this$plugin$getPlugi3 = this.plugin.getPluginState(),\n      currentSelection = _this$plugin$getPlugi3.currentSelection; // comparing id instead of the file object, because the reference to the object\n    // changes when we switch folders, and the file list is updated\n\n    return currentSelection.some(item => item.id === file.id);\n  }\n  loaderWrapper(promise, then, catch_) {\n    promise.then(result => {\n      this.plugin.setPluginState({\n        loading: false\n      });\n      then(result);\n    }).catch(err => {\n      this.plugin.setPluginState({\n        loading: false\n      });\n      catch_(err);\n    });\n    this.plugin.setPluginState({\n      loading: true\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}