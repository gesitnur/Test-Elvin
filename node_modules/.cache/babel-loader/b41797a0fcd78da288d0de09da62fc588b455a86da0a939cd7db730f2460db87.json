{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('@uppy/core'),\n  Plugin = _require.Plugin;\nvar getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');\nvar toArray = require('@uppy/utils/lib/toArray');\n/**\n * Drop Target plugin\n *\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(DropTarget, _Plugin);\n  function DropTarget(uppy, opts) {\n    var _this;\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.addFiles = function (files) {\n      var descriptors = files.map(function (file) {\n        return {\n          source: _this.id,\n          name: file.name,\n          type: file.type,\n          data: file,\n          meta: {\n            // path of the file relative to the ancestor directory the user selected.\n            // e.g. 'docs/Old Prague/airbnb.pdf'\n            relativePath: file.relativePath || null\n          }\n        };\n      });\n      try {\n        _this.uppy.addFiles(descriptors);\n      } catch (err) {\n        _this.uppy.log(err);\n      }\n    };\n    _this.handleDrop = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(_this.removeDragOverClassTimeout); // 2. Remove dragover class\n\n      event.currentTarget.classList.remove('uppy-is-drag-over');\n      _this.setPluginState({\n        isDraggingOver: false\n      }); // 3. Add all dropped files\n\n      _this.uppy.log('[DropTarget] Files were dropped');\n      var logDropError = function logDropError(error) {\n        _this.uppy.log(error, 'error');\n      };\n      getDroppedFiles(event.dataTransfer, {\n        logDropError: logDropError\n      }).then(function (files) {\n        return _this.addFiles(files);\n      });\n    };\n    _this.handleDragOver = function (event) {\n      event.preventDefault();\n      event.stopPropagation(); // 1. Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the browser,\n      // https://github.com/transloadit/uppy/issues/1978)\n\n      event.dataTransfer.dropEffect = 'copy';\n      clearTimeout(_this.removeDragOverClassTimeout);\n      event.currentTarget.classList.add('uppy-is-drag-over');\n      _this.setPluginState({\n        isDraggingOver: true\n      });\n    };\n    _this.handleDragLeave = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var currentTarget = event.currentTarget;\n      clearTimeout(_this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n\n      _this.removeDragOverClassTimeout = setTimeout(function () {\n        currentTarget.classList.remove('uppy-is-drag-over');\n        _this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n    };\n    _this.addListeners = function () {\n      var target = _this.opts.target;\n      if (target instanceof Element) {\n        _this.nodes = [target];\n      } else if (typeof target === 'string') {\n        _this.nodes = toArray(document.querySelectorAll(target));\n      }\n      if (!_this.nodes && !_this.nodes.length > 0) {\n        throw new Error(\"\\\"\" + target + \"\\\" does not match any HTML elements\");\n      }\n      _this.nodes.forEach(function (node) {\n        node.addEventListener('dragover', _this.handleDragOver, false);\n        node.addEventListener('dragleave', _this.handleDragLeave, false);\n        node.addEventListener('drop', _this.handleDrop, false);\n      });\n    };\n    _this.removeListeners = function () {\n      if (_this.nodes) {\n        _this.nodes.forEach(function (node) {\n          node.removeEventListener('dragover', _this.handleDragOver, false);\n          node.removeEventListener('dragleave', _this.handleDragLeave, false);\n          node.removeEventListener('drop', _this.handleDrop, false);\n        });\n      }\n    };\n    _this.type = 'acquirer';\n    _this.id = _this.opts.id || 'DropTarget';\n    _this.title = 'Drop Target'; // Default options\n\n    var defaultOpts = {\n      target: null\n    }; // Merge default options with the ones set by user\n\n    _this.opts = _extends({}, defaultOpts, opts);\n    _this.removeDragOverClassTimeout = null;\n    return _this;\n  }\n  var _proto = DropTarget.prototype;\n  _proto.install = function install() {\n    this.setPluginState({\n      isDraggingOver: false\n    });\n    this.addListeners();\n  };\n  _proto.uninstall = function uninstall() {\n    this.removeListeners();\n  };\n  return DropTarget;\n}(Plugin), _class.VERSION = \"0.2.4\", _temp);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}