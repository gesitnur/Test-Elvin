{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * Default store that keeps state in a simple object.\n */\nvar DefaultStore = /*#__PURE__*/function () {\n  function DefaultStore() {\n    this.state = {};\n    this.callbacks = [];\n  }\n  var _proto = DefaultStore.prototype;\n  _proto.getState = function getState() {\n    return this.state;\n  };\n  _proto.setState = function setState(patch) {\n    var prevState = _extends({}, this.state);\n    var nextState = _extends({}, this.state, patch);\n    this.state = nextState;\n    this._publish(prevState, nextState, patch);\n  };\n  _proto.subscribe = function subscribe(listener) {\n    var _this = this;\n    this.callbacks.push(listener);\n    return function () {\n      // Remove the listener.\n      _this.callbacks.splice(_this.callbacks.indexOf(listener), 1);\n    };\n  };\n  _proto._publish = function _publish() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this.callbacks.forEach(function (listener) {\n      listener.apply(void 0, args);\n    });\n  };\n  return DefaultStore;\n}();\nDefaultStore.VERSION = \"1.2.7\";\nmodule.exports = function defaultStore() {\n  return new DefaultStore();\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}