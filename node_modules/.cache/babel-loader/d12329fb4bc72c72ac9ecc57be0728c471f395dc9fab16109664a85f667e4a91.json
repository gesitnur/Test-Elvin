{"ast":null,"code":"import getFileType from '@uppy/utils/lib/getFileType';\nimport isPreviewSupported from '@uppy/utils/lib/isPreviewSupported';\nimport generateFileID from '@uppy/utils/lib/generateFileID'; // TODO: now that we have a shared `View` class,\n// `SharedHandler` could be cleaned up and moved into here\n\nimport SharedHandler from './SharedHandler.js';\nexport default class View {\n  constructor(plugin, opts) {\n    this.plugin = plugin;\n    this.provider = opts.provider;\n    this.sharedHandler = new SharedHandler(plugin);\n    this.isHandlingScroll = false;\n    this.preFirstRender = this.preFirstRender.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.addFile = this.addFile.bind(this);\n    this.clearSelection = this.clearSelection.bind(this);\n    this.cancelPicking = this.cancelPicking.bind(this);\n  } // eslint-disable-next-line class-methods-use-this\n\n  providerFileToId(file) {\n    return generateFileID({\n      data: file,\n      name: file.name || file.id,\n      type: file.mimetype\n    });\n  }\n  preFirstRender() {\n    this.plugin.setPluginState({\n      didFirstRender: true\n    });\n    this.plugin.onFirstRender();\n  } // eslint-disable-next-line class-methods-use-this\n\n  shouldHandleScroll(event) {\n    const _event$target = event.target,\n      scrollHeight = _event$target.scrollHeight,\n      scrollTop = _event$target.scrollTop,\n      offsetHeight = _event$target.offsetHeight;\n    const scrollPosition = scrollHeight - (scrollTop + offsetHeight);\n    return scrollPosition < 50 && !this.isHandlingScroll;\n  }\n  clearSelection() {\n    this.plugin.setPluginState({\n      currentSelection: [],\n      filterInput: ''\n    });\n  }\n  cancelPicking() {\n    this.clearSelection();\n    const dashboard = this.plugin.uppy.getPlugin('Dashboard');\n    if (dashboard) {\n      dashboard.hideAllPanels();\n    }\n  }\n  handleError(error) {\n    const uppy = this.plugin.uppy;\n    const message = uppy.i18n('companionError');\n    uppy.log(error.toString());\n    if (error.isAuthError) {\n      return;\n    }\n    uppy.info({\n      message,\n      details: error.toString()\n    }, 'error', 5000);\n  }\n  addFile(file) {\n    const tagFile = {\n      id: this.providerFileToId(file),\n      source: this.plugin.id,\n      data: file,\n      name: file.name || file.id,\n      type: file.mimeType,\n      isRemote: true,\n      meta: {},\n      body: {\n        fileId: file.id\n      },\n      remote: {\n        companionUrl: this.plugin.opts.companionUrl,\n        url: `${this.provider.fileUrl(file.requestPath)}`,\n        body: {\n          fileId: file.id\n        },\n        providerOptions: this.provider.opts,\n        providerName: this.provider.name\n      }\n    };\n    const fileType = getFileType(tagFile); // TODO Should we just always use the thumbnail URL if it exists?\n\n    if (fileType && isPreviewSupported(fileType)) {\n      tagFile.preview = file.thumbnail;\n    }\n    if (file.author) {\n      if (file.author.name != null) tagFile.meta.authorName = String(file.author.name);\n      if (file.author.url) tagFile.meta.authorUrl = file.author.url;\n    }\n    this.plugin.uppy.log('Adding remote file');\n    try {\n      this.plugin.uppy.addFile(tagFile);\n      return true;\n    } catch (err) {\n      if (!err.isRestriction) {\n        this.plugin.uppy.log(err);\n      }\n      return false;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}