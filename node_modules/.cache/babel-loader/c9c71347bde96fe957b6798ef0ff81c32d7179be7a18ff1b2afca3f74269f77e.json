{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('preact'),\n  h = _require.h,\n  Component = _require.Component;\nvar RecordButton = require('./RecordButton');\nvar SubmitButton = require('./SubmitButton');\nvar StopWatch = require('./StopWatch');\nvar StreamStatus = require('./StreamStatus');\nvar RecorderScreen = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(RecorderScreen, _Component);\n  function RecorderScreen() {\n    return _Component.apply(this, arguments) || this;\n  }\n  var _proto = RecorderScreen.prototype;\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.props.onStop();\n  };\n  _proto.render = function render() {\n    var _this = this;\n    var _this$props = this.props,\n      recording = _this$props.recording,\n      videoStream = _this$props.stream,\n      recordedVideo = _this$props.recordedVideo;\n    var videoProps = {\n      playsinline: true\n    }; // show stream\n\n    if (recording || !recordedVideo && !recording) {\n      videoProps.muted = true;\n      videoProps.autoplay = true;\n      videoProps.srcObject = videoStream;\n    } // show preview\n\n    if (recordedVideo && !recording) {\n      videoProps.muted = false;\n      videoProps.controls = true;\n      videoProps.src = recordedVideo; // reset srcObject in dom. If not resetted, stream sticks in element\n\n      if (this.videoElement) {\n        this.videoElement.srcObject = undefined;\n      }\n    }\n    return h(\"div\", {\n      className: \"uppy uppy-ScreenCapture-container\"\n    }, h(\"div\", {\n      className: \"uppy-ScreenCapture-videoContainer\"\n    }, h(StreamStatus, this.props), h(\"video\", _extends({\n      ref: function ref(videoElement) {\n        return _this.videoElement = videoElement;\n      },\n      className: \"uppy-ScreenCapture-video\"\n    }, videoProps)), h(StopWatch, this.props)), h(\"div\", {\n      className: \"uppy-ScreenCapture-buttonContainer\"\n    }, h(RecordButton, this.props), h(SubmitButton, this.props)));\n  };\n  return RecorderScreen;\n}(Component);\nmodule.exports = RecorderScreen;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}