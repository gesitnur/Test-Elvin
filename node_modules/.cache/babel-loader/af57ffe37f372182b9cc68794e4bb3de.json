{"ast":null,"code":"var async = require('async');\n\nvar Font = require('./font');\n\nvar Meter = require('./meter');\n\nvar own = require('own');\n\nvar TIMEOUT_DURATION = 10e3;\nvar DELAY_DURATION = 25;\nvar PROTOTYPE = {\n  watch: function (callback) {\n    callback = callback || function () {};\n\n    this.started = Date.now();\n    async.whilst(this.isMatch.bind(this), this.delay.bind(this), function (err) {\n      this.cleanup();\n      return callback(err);\n    }.bind(this));\n  },\n  isMatch: function () {\n    return this.meterFontSerif.getWidth() === this.meterSerifWidth && this.meterFontSans.getWidth() === this.meterSansWidth;\n  },\n  isTimedOut: function () {\n    return Date.now() - this.started >= TIMEOUT_DURATION;\n  },\n  delay: function (callback) {\n    if (this.isTimedOut()) return callback(new Error('font \"' + this.family + '\" timed out'));\n    setTimeout(callback, DELAY_DURATION);\n  },\n  cleanup: function () {\n    var meters = [this.meterFontSerif, this.meterFontSans, this.meterSerif, this.meterSans];\n\n    for (var i = 0; i < meters.length; i++) {\n      meters[i].destroy();\n    }\n  }\n};\nexports.create = create;\n\nfunction create(family, variation) {\n  var meterSerif = Meter.create(Font.create(Font.SERIF, variation));\n  var meterSans = Meter.create(Font.create(Font.SANS_SERIF, variation));\n  return Object.create(PROTOTYPE, own({\n    started: null,\n    family: family,\n    meterFontSerif: Meter.create(Font.create([family, Font.SERIF].join(','), variation)),\n    meterFontSans: Meter.create(Font.create([family, Font.SANS_SERIF].join(','), variation)),\n    meterSerif: meterSerif,\n    meterSans: meterSans,\n    meterSerifWidth: meterSerif.getWidth(),\n    meterSansWidth: meterSans.getWidth()\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}