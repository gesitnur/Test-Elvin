{"ast":null,"code":"/* eslint-disable jsx-a11y/media-has-caption */\nimport { h } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport RecordButton from \"./RecordButton.js\";\nimport RecordingLength from \"./RecordingLength.js\";\nimport AudioSourceSelect from \"./AudioSourceSelect.js\";\nimport AudioOscilloscope from './audio-oscilloscope/index.js';\nimport SubmitButton from \"./SubmitButton.js\";\nimport DiscardButton from \"./DiscardButton.js\";\nexport default function RecordingScreen(props) {\n  const stream = props.stream,\n    recordedAudio = props.recordedAudio,\n    onStop = props.onStop,\n    recording = props.recording,\n    supportsRecording = props.supportsRecording,\n    audioSources = props.audioSources,\n    showAudioSourceDropdown = props.showAudioSourceDropdown,\n    onSubmit = props.onSubmit,\n    i18n = props.i18n,\n    onStartRecording = props.onStartRecording,\n    onStopRecording = props.onStopRecording,\n    onDiscardRecordedAudio = props.onDiscardRecordedAudio,\n    recordingLengthSeconds = props.recordingLengthSeconds;\n  const canvasEl = useRef(null);\n  const oscilloscope = useRef(null); // componentDidMount / componentDidUnmount\n\n  useEffect(() => {\n    return () => {\n      oscilloscope.current = null;\n      onStop();\n    };\n  }, [onStop]); // componentDidUpdate\n\n  useEffect(() => {\n    if (!recordedAudio) {\n      oscilloscope.current = new AudioOscilloscope(canvasEl.current, {\n        canvas: {\n          width: 600,\n          height: 600\n        },\n        canvasContext: {\n          lineWidth: 2,\n          fillStyle: 'rgb(0,0,0)',\n          strokeStyle: 'green'\n        }\n      });\n      oscilloscope.current.draw();\n      if (stream) {\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaStreamSource(stream);\n        oscilloscope.current.addSource(source);\n      }\n    }\n  }, [recordedAudio, stream]);\n  const hasRecordedAudio = recordedAudio != null;\n  const shouldShowRecordButton = !hasRecordedAudio && supportsRecording;\n  const shouldShowAudioSourceDropdown = showAudioSourceDropdown && !hasRecordedAudio && audioSources && audioSources.length > 1;\n  return h(\"div\", {\n    className: \"uppy-Audio-container\"\n  }, h(\"div\", {\n    className: \"uppy-Audio-audioContainer\"\n  }, hasRecordedAudio ? h(\"audio\", {\n    className: \"uppy-Audio-player\",\n    controls: true,\n    src: recordedAudio\n  }) : h(\"canvas\", {\n    ref: canvasEl,\n    className: \"uppy-Audio-canvas\"\n  })), h(\"div\", {\n    className: \"uppy-Audio-footer\"\n  }, h(\"div\", {\n    className: \"uppy-Audio-audioSourceContainer\"\n  }, shouldShowAudioSourceDropdown ? AudioSourceSelect(props) : null), h(\"div\", {\n    className: \"uppy-Audio-buttonContainer\"\n  }, shouldShowRecordButton && h(RecordButton, {\n    recording: recording,\n    onStartRecording: onStartRecording,\n    onStopRecording: onStopRecording,\n    i18n: i18n\n  }), hasRecordedAudio && h(SubmitButton, {\n    onSubmit: onSubmit,\n    i18n: i18n\n  }), hasRecordedAudio && h(DiscardButton, {\n    onDiscard: onDiscardRecordedAudio,\n    i18n: i18n\n  })), h(\"div\", {\n    className: \"uppy-Audio-recordingLength\"\n  }, !hasRecordedAudio && h(RecordingLength, {\n    recordingLengthSeconds: recordingLengthSeconds,\n    i18n: i18n\n  }))));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}