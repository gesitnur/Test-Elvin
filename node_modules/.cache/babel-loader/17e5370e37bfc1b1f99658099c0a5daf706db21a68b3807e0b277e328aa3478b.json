{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n/* global AggregateError */\nvar Translator = require('@uppy/utils/lib/Translator');\nvar ee = require('namespace-emitter');\nvar cuid = require('cuid');\nvar throttle = require('lodash.throttle');\nvar prettierBytes = require('@transloadit/prettier-bytes');\nvar match = require('mime-match');\nvar DefaultStore = require('@uppy/store-default');\nvar getFileType = require('@uppy/utils/lib/getFileType');\nvar getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');\nvar generateFileID = require('@uppy/utils/lib/generateFileID');\nvar findIndex = require('@uppy/utils/lib/findIndex');\nvar supportsUploadProgress = require('./supportsUploadProgress');\nvar _require = require('./loggers'),\n  justErrorsLogger = _require.justErrorsLogger,\n  debugLogger = _require.debugLogger;\nvar Plugin = require('./Plugin'); // Exported from here.\n\nvar RestrictionError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(RestrictionError, _Error);\n  function RestrictionError() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _Error.call.apply(_Error, [this].concat(args)) || this;\n    _this.isRestriction = true;\n    return _this;\n  }\n  return RestrictionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nif (typeof AggregateError === 'undefined') {\n  // eslint-disable-next-line no-global-assign\n  AggregateError = /*#__PURE__*/function (_Error2) {\n    _inheritsLoose(AggregateError, _Error2);\n    function AggregateError(message, errors) {\n      var _this2;\n      _this2 = _Error2.call(this, message) || this;\n      _this2.errors = errors;\n      return _this2;\n    }\n    return AggregateError;\n  }( /*#__PURE__*/_wrapNativeSuper(Error));\n}\nvar AggregateRestrictionError = /*#__PURE__*/function (_AggregateError) {\n  _inheritsLoose(AggregateRestrictionError, _AggregateError);\n  function AggregateRestrictionError() {\n    var _this3;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _this3 = _AggregateError.call.apply(_AggregateError, [this].concat(args)) || this;\n    _this3.isRestriction = true;\n    return _this3;\n  }\n  return AggregateRestrictionError;\n}(AggregateError);\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\nvar Uppy = /*#__PURE__*/function () {\n  // eslint-disable-next-line global-require\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts â€” Uppy options\n   */\n  function Uppy(opts) {\n    var _this4 = this;\n    this.defaultLocale = {\n      strings: {\n        addBulkFilesFailed: {\n          0: 'Failed to add %{smart_count} file due to an internal error',\n          1: 'Failed to add %{smart_count} files due to internal errors'\n        },\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        missingRequiredMetaField: 'Missing required meta fields',\n        missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',\n        // The default `exceedsSize2` string only combines the `exceedsSize` string (%{backwardsCompat}) with the size.\n        // Locales can override `exceedsSize2` to specify a different word order. This is for backwards compat with\n        // Uppy 1.9.x and below which did a naive concatenation of `exceedsSize2 + size` instead of using a locale-specific\n        // substitution.\n        // TODO: In 2.0 `exceedsSize2` should be removed in and `exceedsSize` updated to use substitution.\n        exceedsSize2: '%{backwardsCompat} %{size}',\n        exceedsSize: '%{file} exceeds maximum allowed size of',\n        inferiorSize: 'This file is smaller than the allowed size of %{size}',\n        youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n        noNewAlreadyUploading: 'Cannot add new files: already uploading',\n        noDuplicates: 'Cannot add the duplicate file \\'%{fileName}\\', it already exists',\n        companionError: 'Connection with Companion failed',\n        companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',\n        failedToUpload: 'Failed to upload %{file}',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        // Strings for remote providers\n        noFilesFound: 'You have no files or folders here',\n        selectX: {\n          0: 'Select %{smart_count}',\n          1: 'Select %{smart_count}'\n        },\n        selectAllFilesFromFolderNamed: 'Select all files from folder %{name}',\n        unselectAllFilesFromFolderNamed: 'Unselect all files from folder %{name}',\n        selectFileNamed: 'Select file %{name}',\n        unselectFileNamed: 'Unselect file %{name}',\n        openFolderNamed: 'Open folder %{name}',\n        cancel: 'Cancel',\n        logOut: 'Log out',\n        filter: 'Filter',\n        resetFilter: 'Reset filter',\n        loading: 'Loading...',\n        authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',\n        authenticateWith: 'Connect to %{pluginName}',\n        searchImages: 'Search for images',\n        enterTextToSearch: 'Enter text to search for images',\n        backToSearch: 'Back to Search',\n        emptyFolderAdded: 'No files were added from empty folder',\n        folderAdded: {\n          0: 'Added %{smart_count} file from %{folder}',\n          1: 'Added %{smart_count} files from %{folder}'\n        }\n      }\n    };\n    var defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploads: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: []\n      },\n      meta: {},\n      onBeforeFileAdded: function onBeforeFileAdded(currentFile) {\n        return currentFile;\n      },\n      onBeforeUpload: function onBeforeUpload(files) {\n        return files;\n      },\n      store: DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = _extends({}, defaultOptions, opts, {\n      restrictions: _extends({}, defaultOptions.restrictions, opts && opts.restrictions)\n    }); // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects â€” we set logger: justErrorsLogger in defaultOptions\n\n    if (opts && opts.logger && opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n    this.log(\"Using Core v\" + this.constructor.VERSION);\n    if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n      throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n    }\n    this.i18nInit(); // Container for different types of plugins\n\n    this.plugins = {};\n    this.getState = this.getState.bind(this);\n    this.getPlugin = this.getPlugin.bind(this);\n    this.setFileMeta = this.setFileMeta.bind(this);\n    this.setFileState = this.setFileState.bind(this);\n    this.log = this.log.bind(this);\n    this.info = this.info.bind(this);\n    this.hideInfo = this.hideInfo.bind(this);\n    this.addFile = this.addFile.bind(this);\n    this.removeFile = this.removeFile.bind(this);\n    this.pauseResume = this.pauseResume.bind(this);\n    this.validateRestrictions = this.validateRestrictions.bind(this); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.updateOnlineStatus = this.updateOnlineStatus.bind(this);\n    this.resetProgress = this.resetProgress.bind(this);\n    this.pauseAll = this.pauseAll.bind(this);\n    this.resumeAll = this.resumeAll.bind(this);\n    this.retryAll = this.retryAll.bind(this);\n    this.cancelAll = this.cancelAll.bind(this);\n    this.retryUpload = this.retryUpload.bind(this);\n    this.upload = this.upload.bind(this);\n    this.emitter = ee();\n    this.on = this.on.bind(this);\n    this.off = this.off.bind(this);\n    this.once = this.emitter.once.bind(this.emitter);\n    this.emit = this.emitter.emit.bind(this.emitter);\n    this.preProcessors = [];\n    this.uploaders = [];\n    this.postProcessors = [];\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: _extends({}, this.opts.meta),\n      info: {\n        isHidden: true,\n        type: 'info',\n        message: ''\n      },\n      recoveredState: null\n    });\n    this.storeUnsubscribe = this.store.subscribe(function (prevState, nextState, patch) {\n      _this4.emit('state-update', prevState, nextState, patch);\n      _this4.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n    this.addListeners(); // Re-enable if weâ€™ll need some capabilities on boot, like isMobileDevice\n    // this._setCapabilities()\n  } // _setCapabilities = () => {\n  //   const capabilities = {\n  //     isMobileDevice: isMobileDevice()\n  //   }\n  //   this.setState({\n  //     ...this.getState().capabilities,\n  //     capabilities\n  //   })\n  // }\n\n  var _proto = Uppy.prototype;\n  _proto.on = function on(event, callback) {\n    this.emitter.on(event, callback);\n    return this;\n  };\n  _proto.off = function off(event, callback) {\n    this.emitter.off(event, callback);\n    return this;\n  }\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */;\n\n  _proto.updateAll = function updateAll(state) {\n    this.iteratePlugins(function (plugin) {\n      plugin.update(state);\n    });\n  }\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */;\n\n  _proto.setState = function setState(patch) {\n    this.store.setState(patch);\n  }\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */;\n\n  _proto.getState = function getState() {\n    return this.store.getState();\n  }\n  /**\n   * Back compat for when uppy.state is used instead of uppy.getState().\n   * @deprecated\n   */;\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  _proto.setFileState = function setFileState(fileID, state) {\n    var _extends2;\n    if (!this.getState().files[fileID]) {\n      throw new Error(\"Can\\u2019t set state for \" + fileID + \" (the file could have been removed)\");\n    }\n    this.setState({\n      files: _extends({}, this.getState().files, (_extends2 = {}, _extends2[fileID] = _extends({}, this.getState().files[fileID], state), _extends2))\n    });\n  };\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.opts.locale]);\n    this.locale = this.translator.locale;\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.i18nArray = this.translator.translateArray.bind(this.translator);\n  };\n  _proto.setOptions = function setOptions(newOpts) {\n    this.opts = _extends({}, this.opts, newOpts, {\n      restrictions: _extends({}, this.opts.restrictions, newOpts && newOpts.restrictions)\n    });\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta);\n    }\n    this.i18nInit();\n    if (newOpts.locale) {\n      this.iteratePlugins(function (plugin) {\n        plugin.setOptions();\n      });\n    } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n    this.setState(); // so that UI re-renders with new options\n  };\n\n  _proto.resetProgress = function resetProgress() {\n    var defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null\n    };\n    var files = _extends({}, this.getState().files);\n    var updatedFiles = {};\n    Object.keys(files).forEach(function (fileID) {\n      var updatedFile = _extends({}, files[fileID]);\n      updatedFile.progress = _extends({}, updatedFile.progress, defaultProgress);\n      updatedFiles[fileID] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    });\n    this.emit('reset-progress');\n  };\n  _proto.addPreProcessor = function addPreProcessor(fn) {\n    this.preProcessors.push(fn);\n  };\n  _proto.removePreProcessor = function removePreProcessor(fn) {\n    var i = this.preProcessors.indexOf(fn);\n    if (i !== -1) {\n      this.preProcessors.splice(i, 1);\n    }\n  };\n  _proto.addPostProcessor = function addPostProcessor(fn) {\n    this.postProcessors.push(fn);\n  };\n  _proto.removePostProcessor = function removePostProcessor(fn) {\n    var i = this.postProcessors.indexOf(fn);\n    if (i !== -1) {\n      this.postProcessors.splice(i, 1);\n    }\n  };\n  _proto.addUploader = function addUploader(fn) {\n    this.uploaders.push(fn);\n  };\n  _proto.removeUploader = function removeUploader(fn) {\n    var i = this.uploaders.indexOf(fn);\n    if (i !== -1) {\n      this.uploaders.splice(i, 1);\n    }\n  };\n  _proto.setMeta = function setMeta(data) {\n    var updatedMeta = _extends({}, this.getState().meta, data);\n    var updatedFiles = _extends({}, this.getState().files);\n    Object.keys(updatedFiles).forEach(function (fileID) {\n      updatedFiles[fileID] = _extends({}, updatedFiles[fileID], {\n        meta: _extends({}, updatedFiles[fileID].meta, data)\n      });\n    });\n    this.log('Adding metadata:');\n    this.log(data);\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    });\n  };\n  _proto.setFileMeta = function setFileMeta(fileID, data) {\n    var updatedFiles = _extends({}, this.getState().files);\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n      return;\n    }\n    var newMeta = _extends({}, updatedFiles[fileID].meta, data);\n    updatedFiles[fileID] = _extends({}, updatedFiles[fileID], {\n      meta: newMeta\n    });\n    this.setState({\n      files: updatedFiles\n    });\n  }\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */;\n\n  _proto.getFile = function getFile(fileID) {\n    return this.getState().files[fileID];\n  }\n  /**\n   * Get all files in an array.\n   */;\n\n  _proto.getFiles = function getFiles() {\n    var _this$getState = this.getState(),\n      files = _this$getState.files;\n    return Object.keys(files).map(function (fileID) {\n      return files[fileID];\n    });\n  }\n  /**\n   * A public wrapper for _checkRestrictions â€” checks if a file passes a set of restrictions.\n   * For use in UI pluigins (like Providers), to disallow selecting files that wonâ€™t pass restrictions.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @returns {object} { result: true/false, reason: why file didnâ€™t pass restrictions }\n   */;\n\n  _proto.validateRestrictions = function validateRestrictions(file, files) {\n    try {\n      this.checkRestrictions(file, files);\n      return {\n        result: true\n      };\n    } catch (err) {\n      return {\n        result: false,\n        reason: err.message\n      };\n    }\n  }\n  /**\n   * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n   * maxNumberOfFiles and allowedFileTypes.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @private\n   */;\n\n  _proto.checkRestrictions = function checkRestrictions(file, files) {\n    if (files === void 0) {\n      files = this.getFiles();\n    }\n    var _this$opts$restrictio = this.opts.restrictions,\n      maxFileSize = _this$opts$restrictio.maxFileSize,\n      minFileSize = _this$opts$restrictio.minFileSize,\n      maxTotalFileSize = _this$opts$restrictio.maxTotalFileSize,\n      maxNumberOfFiles = _this$opts$restrictio.maxNumberOfFiles,\n      allowedFileTypes = _this$opts$restrictio.allowedFileTypes;\n    if (maxNumberOfFiles) {\n      if (files.length + 1 > maxNumberOfFiles) {\n        throw new RestrictionError(\"\" + this.i18n('youCanOnlyUploadX', {\n          smart_count: maxNumberOfFiles\n        }));\n      }\n    }\n    if (allowedFileTypes) {\n      var isCorrectFileType = allowedFileTypes.some(function (type) {\n        // check if this is a mime-type\n        if (type.indexOf('/') > -1) {\n          if (!file.type) return false;\n          return match(file.type.replace(/;.*?$/, ''), type);\n        } // otherwise this is likely an extension\n\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.substr(1).toLowerCase();\n        }\n        return false;\n      });\n      if (!isCorrectFileType) {\n        var allowedFileTypesString = allowedFileTypes.join(', ');\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n          types: allowedFileTypesString\n        }));\n      }\n    } // We can't check maxTotalFileSize if the size is unknown.\n\n    if (maxTotalFileSize && file.size != null) {\n      var totalFilesSize = 0;\n      totalFilesSize += file.size;\n      files.forEach(function (f) {\n        totalFilesSize += f.size;\n      });\n      if (totalFilesSize > maxTotalFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize2', {\n          backwardsCompat: this.i18n('exceedsSize'),\n          size: prettierBytes(maxTotalFileSize),\n          file: file.name\n        }));\n      }\n    } // We can't check maxFileSize if the size is unknown.\n\n    if (maxFileSize && file.size != null) {\n      if (file.size > maxFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize2', {\n          backwardsCompat: this.i18n('exceedsSize'),\n          size: prettierBytes(maxFileSize),\n          file: file.name\n        }));\n      }\n    } // We can't check minFileSize if the size is unknown.\n\n    if (minFileSize && file.size != null) {\n      if (file.size < minFileSize) {\n        throw new RestrictionError(this.i18n('inferiorSize', {\n          size: prettierBytes(minFileSize)\n        }));\n      }\n    }\n  }\n  /**\n   * Check if minNumberOfFiles restriction is reached before uploading.\n   *\n   * @private\n   */;\n\n  _proto.checkMinNumberOfFiles = function checkMinNumberOfFiles(files) {\n    var minNumberOfFiles = this.opts.restrictions.minNumberOfFiles;\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(\"\" + this.i18n('youHaveToAtLeastSelectX', {\n        smart_count: minNumberOfFiles\n      }));\n    }\n  }\n  /**\n   * Check if requiredMetaField restriction is met before uploading.\n   *\n   * @private\n   */;\n\n  _proto.checkRequiredMetaFields = function checkRequiredMetaFields(files) {\n    var requiredMetaFields = this.opts.restrictions.requiredMetaFields;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var errors = [];\n    var fileIDs = Object.keys(files);\n    for (var i = 0; i < fileIDs.length; i++) {\n      var file = this.getFile(fileIDs[i]);\n      for (var _i = 0; _i < requiredMetaFields.length; _i++) {\n        if (!hasOwnProperty.call(file.meta, requiredMetaFields[_i]) || file.meta[requiredMetaFields[_i]] === '') {\n          var err = new RestrictionError(\"\" + this.i18n('missingRequiredMetaFieldOnFile', {\n            fileName: file.name\n          }));\n          errors.push(err);\n          this.showOrLogErrorAndThrow(err, {\n            file: file,\n            throwErr: false\n          });\n        }\n      }\n    }\n    if (errors.length) {\n      throw new AggregateRestrictionError(\"\" + this.i18n('missingRequiredMetaField'), errors);\n    }\n  }\n  /**\n   * Logs an error, sets Informer message, then throws the error.\n   * Emits a 'restriction-failed' event if itâ€™s a restriction error\n   *\n   * @param {object | string} err â€” Error object or plain string message\n   * @param {object} [options]\n   * @param {boolean} [options.showInformer=true] â€” Sometimes developer might want to show Informer manually\n   * @param {object} [options.file=null] â€” File object used to emit the restriction error\n   * @param {boolean} [options.throwErr=true] â€” Errors shouldnâ€™t be thrown, for example, in `upload-error` event\n   * @private\n   */;\n\n  _proto.showOrLogErrorAndThrow = function showOrLogErrorAndThrow(err, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      _ref$showInformer = _ref.showInformer,\n      showInformer = _ref$showInformer === void 0 ? true : _ref$showInformer,\n      _ref$file = _ref.file,\n      file = _ref$file === void 0 ? null : _ref$file,\n      _ref$throwErr = _ref.throwErr,\n      throwErr = _ref$throwErr === void 0 ? true : _ref$throwErr;\n    var message = typeof err === 'object' ? err.message : err;\n    var details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,\n    // as they are expected and shown in the UI.\n\n    var logMessageWithDetails = message;\n    if (details) {\n      logMessageWithDetails += \" \" + details;\n    }\n    if (err.isRestriction) {\n      this.log(logMessageWithDetails);\n      this.emit('restriction-failed', file, err);\n    } else {\n      this.log(logMessageWithDetails, 'error');\n    } // Sometimes informer has to be shown manually by the developer,\n    // for example, in `onBeforeFileAdded`.\n\n    if (showInformer) {\n      this.info({\n        message: message,\n        details: details\n      }, 'error', this.opts.infoTimeout);\n    }\n    if (throwErr) {\n      throw typeof err === 'object' ? err : new Error(err);\n    }\n  };\n  _proto.assertNewUploadAllowed = function assertNewUploadAllowed(file) {\n    var _this$getState2 = this.getState(),\n      allowNewUpload = _this$getState2.allowNewUpload;\n    if (allowNewUpload === false) {\n      this.showOrLogErrorAndThrow(new RestrictionError(this.i18n('noNewAlreadyUploading')), {\n        file: file\n      });\n    }\n  }\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */;\n\n  _proto.checkAndCreateFileStateObject = function checkAndCreateFileStateObject(files, f) {\n    var fileType = getFileType(f);\n    var file = f;\n    file.type = fileType;\n    var onBeforeFileAddedResult = this.opts.onBeforeFileAdded(file, files);\n    if (onBeforeFileAddedResult === false) {\n      // Donâ€™t show UI info for this error, as it should be done by the developer\n      this.showOrLogErrorAndThrow(new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {\n        showInformer: false,\n        file: file\n      });\n    }\n    if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult) {\n      file = onBeforeFileAddedResult;\n    }\n    var fileName;\n    if (file.name) {\n      fileName = file.name;\n    } else if (fileType.split('/')[0] === 'image') {\n      fileName = fileType.split('/')[0] + \".\" + fileType.split('/')[1];\n    } else {\n      fileName = 'noname';\n    }\n    var fileExtension = getFileNameAndExtension(fileName).extension;\n    var isRemote = file.isRemote || false;\n    var fileID = generateFileID(file);\n    if (files[fileID] && !files[fileID].isGhost) {\n      this.showOrLogErrorAndThrow(new RestrictionError(this.i18n('noDuplicates', {\n        fileName: fileName\n      })), {\n        file: file\n      });\n    }\n    var meta = file.meta || {};\n    meta.name = fileName;\n    meta.type = fileType; // `null` means the size is unknown.\n\n    var size = isFinite(file.data.size) ? file.data.size : null;\n    var newFile = {\n      source: file.source || '',\n      id: fileID,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: _extends({}, this.getState().meta, meta),\n      type: fileType,\n      data: file.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null\n      },\n      size: size,\n      isRemote: isRemote,\n      remote: file.remote || '',\n      preview: file.preview\n    };\n    try {\n      var filesArray = Object.keys(files).map(function (i) {\n        return files[i];\n      });\n      this.checkRestrictions(newFile, filesArray);\n    } catch (err) {\n      this.showOrLogErrorAndThrow(err, {\n        file: newFile\n      });\n    }\n    return newFile;\n  } // Schedule an upload if `autoProceed` is enabled.\n  ;\n\n  _proto.startIfAutoProceed = function startIfAutoProceed() {\n    var _this5 = this;\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(function () {\n        _this5.scheduledAutoProceed = null;\n        _this5.upload().catch(function (err) {\n          if (!err.isRestriction) {\n            _this5.log(err.stack || err.message || err);\n          }\n        });\n      }, 4);\n    }\n  }\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */;\n\n  _proto.addFile = function addFile(file) {\n    var _extends3;\n    this.assertNewUploadAllowed(file);\n    var _this$getState3 = this.getState(),\n      files = _this$getState3.files;\n    var newFile = this.checkAndCreateFileStateObject(files, file); // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = _extends({}, files[newFile.id], {\n        data: file.data,\n        isGhost: false\n      });\n      this.log(\"Replaced the blob in the restored ghost file: \" + newFile.name + \", \" + newFile.id);\n    }\n    this.setState({\n      files: _extends({}, files, (_extends3 = {}, _extends3[newFile.id] = newFile, _extends3))\n    });\n    this.emit('file-added', newFile);\n    this.emit('files-added', [newFile]);\n    this.log(\"Added file: \" + newFile.name + \", \" + newFile.id + \", mime type: \" + newFile.type);\n    this.startIfAutoProceed();\n    return newFile.id;\n  }\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */;\n\n  _proto.addFiles = function addFiles(fileDescriptors) {\n    var _this6 = this;\n    this.assertNewUploadAllowed(); // create a copy of the files object only once\n\n    var files = _extends({}, this.getState().files);\n    var newFiles = [];\n    var errors = [];\n    for (var i = 0; i < fileDescriptors.length; i++) {\n      try {\n        var newFile = this.checkAndCreateFileStateObject(files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = _extends({}, files[newFile.id], {\n            data: fileDescriptors[i].data,\n            isGhost: false\n          });\n          this.log(\"Replaced blob in a ghost file: \" + newFile.name + \", \" + newFile.id);\n        }\n        files[newFile.id] = newFile;\n        newFiles.push(newFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err);\n        }\n      }\n    }\n    this.setState({\n      files: files\n    });\n    newFiles.forEach(function (newFile) {\n      _this6.emit('file-added', newFile);\n    });\n    this.emit('files-added', newFiles);\n    if (newFiles.length > 5) {\n      this.log(\"Added batch of \" + newFiles.length + \" files\");\n    } else {\n      Object.keys(newFiles).forEach(function (fileID) {\n        _this6.log(\"Added file: \" + newFiles[fileID].name + \"\\n id: \" + newFiles[fileID].id + \"\\n type: \" + newFiles[fileID].type);\n      });\n    }\n    if (newFiles.length > 0) {\n      this.startIfAutoProceed();\n    }\n    if (errors.length > 0) {\n      var message = 'Multiple errors occurred while adding files:\\n';\n      errors.forEach(function (subError) {\n        message += \"\\n * \" + subError.message;\n      });\n      this.info({\n        message: this.i18n('addBulkFilesFailed', {\n          smart_count: errors.length\n        }),\n        details: message\n      }, 'error', this.opts.infoTimeout);\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message);\n      } else {\n        var err = new Error(message);\n        err.errors = errors;\n        throw err;\n      }\n    }\n  };\n  _proto.removeFiles = function removeFiles(fileIDs, reason) {\n    var _this7 = this;\n    var _this$getState4 = this.getState(),\n      files = _this$getState4.files,\n      currentUploads = _this$getState4.currentUploads;\n    var updatedFiles = _extends({}, files);\n    var updatedUploads = _extends({}, currentUploads);\n    var removedFiles = Object.create(null);\n    fileIDs.forEach(function (fileID) {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID];\n        delete updatedFiles[fileID];\n      }\n    }); // Remove files from the `fileIDs` list in each upload.\n\n    function fileIsNotRemoved(uploadFileID) {\n      return removedFiles[uploadFileID] === undefined;\n    }\n    Object.keys(updatedUploads).forEach(function (uploadID) {\n      var newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID];\n        return;\n      }\n      updatedUploads[uploadID] = _extends({}, currentUploads[uploadID], {\n        fileIDs: newFileIDs\n      });\n    });\n    var stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    }; // If all files were removed - allow new uploads,\n    // and clear recoveredState\n\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true;\n      stateUpdate.error = null;\n      stateUpdate.recoveredState = null;\n    }\n    this.setState(stateUpdate);\n    this.calculateTotalProgress();\n    var removedFileIDs = Object.keys(removedFiles);\n    removedFileIDs.forEach(function (fileID) {\n      _this7.emit('file-removed', removedFiles[fileID], reason);\n    });\n    if (removedFileIDs.length > 5) {\n      this.log(\"Removed \" + removedFileIDs.length + \" files\");\n    } else {\n      this.log(\"Removed files: \" + removedFileIDs.join(', '));\n    }\n  };\n  _proto.removeFile = function removeFile(fileID, reason) {\n    if (reason === void 0) {\n      reason = null;\n    }\n    this.removeFiles([fileID], reason);\n  };\n  _proto.pauseResume = function pauseResume(fileID) {\n    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n      return undefined;\n    }\n    var wasPaused = this.getFile(fileID).isPaused || false;\n    var isPaused = !wasPaused;\n    this.setFileState(fileID, {\n      isPaused: isPaused\n    });\n    this.emit('upload-pause', fileID, isPaused);\n    return isPaused;\n  };\n  _proto.pauseAll = function pauseAll() {\n    var updatedFiles = _extends({}, this.getState().files);\n    var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(function (file) {\n      var updatedFile = _extends({}, updatedFiles[file], {\n        isPaused: true\n      });\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('pause-all');\n  };\n  _proto.resumeAll = function resumeAll() {\n    var updatedFiles = _extends({}, this.getState().files);\n    var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(function (file) {\n      var updatedFile = _extends({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      });\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('resume-all');\n  };\n  _proto.retryAll = function retryAll() {\n    var updatedFiles = _extends({}, this.getState().files);\n    var filesToRetry = Object.keys(updatedFiles).filter(function (file) {\n      return updatedFiles[file].error;\n    });\n    filesToRetry.forEach(function (file) {\n      var updatedFile = _extends({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      });\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      error: null\n    });\n    this.emit('retry-all', filesToRetry);\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: []\n      });\n    }\n    var uploadID = this.createUpload(filesToRetry, {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n    });\n\n    return this.runUpload(uploadID);\n  };\n  _proto.cancelAll = function cancelAll() {\n    this.emit('cancel-all');\n    var _this$getState5 = this.getState(),\n      files = _this$getState5.files;\n    var fileIDs = Object.keys(files);\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs, 'cancel-all');\n    }\n    this.setState({\n      totalProgress: 0,\n      error: null,\n      recoveredState: null\n    });\n  };\n  _proto.retryUpload = function retryUpload(fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false\n    });\n    this.emit('upload-retry', fileID);\n    var uploadID = this.createUpload([fileID], {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n    });\n\n    return this.runUpload(uploadID);\n  };\n  _proto.reset = function reset() {\n    this.cancelAll();\n  };\n  _proto.logout = function logout() {\n    this.iteratePlugins(function (plugin) {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout();\n      }\n    });\n  };\n  _proto.calculateProgress = function calculateProgress(file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(\"Not setting progress for a file that has been removed: \" + file.id);\n      return;\n    } // bytesTotal may be null or zero; in that case we can't divide by it\n\n    var canHavePercentage = isFinite(data.bytesTotal) && data.bytesTotal > 0;\n    this.setFileState(file.id, {\n      progress: _extends({}, this.getFile(file.id).progress, {\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage // TODO(goto-bus-stop) flooring this should probably be the choice of the UI?\n        // we get more accurate calculations if we don't round this at all.\n        ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n      })\n    });\n    this.calculateTotalProgress();\n  };\n  _proto.calculateTotalProgress = function calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    var files = this.getFiles();\n    var inProgress = files.filter(function (file) {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n    if (inProgress.length === 0) {\n      this.emit('progress', 0);\n      this.setState({\n        totalProgress: 0\n      });\n      return;\n    }\n    var sizedFiles = inProgress.filter(function (file) {\n      return file.progress.bytesTotal != null;\n    });\n    var unsizedFiles = inProgress.filter(function (file) {\n      return file.progress.bytesTotal == null;\n    });\n    if (sizedFiles.length === 0) {\n      var progressMax = inProgress.length * 100;\n      var currentProgress = unsizedFiles.reduce(function (acc, file) {\n        return acc + file.progress.percentage;\n      }, 0);\n      var _totalProgress = Math.round(currentProgress / progressMax * 100);\n      this.setState({\n        totalProgress: _totalProgress\n      });\n      return;\n    }\n    var totalSize = sizedFiles.reduce(function (acc, file) {\n      return acc + file.progress.bytesTotal;\n    }, 0);\n    var averageSize = totalSize / sizedFiles.length;\n    totalSize += averageSize * unsizedFiles.length;\n    var uploadedSize = 0;\n    sizedFiles.forEach(function (file) {\n      uploadedSize += file.progress.bytesUploaded;\n    });\n    unsizedFiles.forEach(function (file) {\n      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n    });\n    var totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n    if (totalProgress > 100) {\n      totalProgress = 100;\n    }\n    this.setState({\n      totalProgress: totalProgress\n    });\n    this.emit('progress', totalProgress);\n  }\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */;\n\n  _proto.addListeners = function addListeners() {\n    var _this8 = this;\n\n    /**\n     * @param {Error} error\n     * @param {object} [file]\n     * @param {object} [response]\n     */\n    var errorHandler = function errorHandler(error, file, response) {\n      var errorMsg = error.message || 'Unknown error';\n      if (error.details) {\n        errorMsg += \" \" + error.details;\n      }\n      _this8.setState({\n        error: errorMsg\n      }); // When a file is also given, we store the error on the file object.\n\n      if (file != null && typeof file.id === 'string') {\n        _this8.setFileState(file.id, {\n          error: errorMsg,\n          response: response\n        });\n      }\n    };\n    this.on('error', errorHandler);\n    this.on('upload-error', function (file, error, response) {\n      errorHandler(error, file, response);\n      if (typeof error === 'object' && error.message) {\n        var newError = new Error(error.message);\n        newError.details = error.message;\n        if (error.details) {\n          newError.details += \" \" + error.details;\n        }\n        newError.message = _this8.i18n('failedToUpload', {\n          file: file.name\n        });\n        _this8.showOrLogErrorAndThrow(newError, {\n          throwErr: false\n        });\n      } else {\n        _this8.showOrLogErrorAndThrow(error, {\n          throwErr: false\n        });\n      }\n    });\n    this.on('upload', function () {\n      _this8.setState({\n        error: null\n      });\n    });\n    this.on('upload-started', function (file) {\n      if (!_this8.getFile(file.id)) {\n        _this8.log(\"Not setting progress for a file that has been removed: \" + file.id);\n        return;\n      }\n      _this8.setFileState(file.id, {\n        progress: {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0,\n          bytesTotal: file.size\n        }\n      });\n    });\n    this.on('upload-progress', this.calculateProgress);\n    this.on('upload-success', function (file, uploadResp) {\n      if (!_this8.getFile(file.id)) {\n        _this8.log(\"Not setting progress for a file that has been removed: \" + file.id);\n        return;\n      }\n      var currentProgress = _this8.getFile(file.id).progress;\n      _this8.setFileState(file.id, {\n        progress: _extends({}, currentProgress, {\n          postprocess: _this8.postProcessors.length > 0 ? {\n            mode: 'indeterminate'\n          } : null,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal\n        }),\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false\n      }); // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n\n      if (file.size == null) {\n        _this8.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n        });\n      }\n      _this8.calculateTotalProgress();\n    });\n    this.on('preprocess-progress', function (file, progress) {\n      if (!_this8.getFile(file.id)) {\n        _this8.log(\"Not setting progress for a file that has been removed: \" + file.id);\n        return;\n      }\n      _this8.setFileState(file.id, {\n        progress: _extends({}, _this8.getFile(file.id).progress, {\n          preprocess: progress\n        })\n      });\n    });\n    this.on('preprocess-complete', function (file) {\n      if (!_this8.getFile(file.id)) {\n        _this8.log(\"Not setting progress for a file that has been removed: \" + file.id);\n        return;\n      }\n      var files = _extends({}, _this8.getState().files);\n      files[file.id] = _extends({}, files[file.id], {\n        progress: _extends({}, files[file.id].progress)\n      });\n      delete files[file.id].progress.preprocess;\n      _this8.setState({\n        files: files\n      });\n    });\n    this.on('postprocess-progress', function (file, progress) {\n      if (!_this8.getFile(file.id)) {\n        _this8.log(\"Not setting progress for a file that has been removed: \" + file.id);\n        return;\n      }\n      _this8.setFileState(file.id, {\n        progress: _extends({}, _this8.getState().files[file.id].progress, {\n          postprocess: progress\n        })\n      });\n    });\n    this.on('postprocess-complete', function (file) {\n      if (!_this8.getFile(file.id)) {\n        _this8.log(\"Not setting progress for a file that has been removed: \" + file.id);\n        return;\n      }\n      var files = _extends({}, _this8.getState().files);\n      files[file.id] = _extends({}, files[file.id], {\n        progress: _extends({}, files[file.id].progress)\n      });\n      delete files[file.id].progress.postprocess; // TODO should we set some kind of `fullyComplete` property on the file object\n      // so it's easier to see that the file is uploadâ€¦fully completeâ€¦rather than\n      // what we have to do now (`uploadComplete && !postprocess`)\n\n      _this8.setState({\n        files: files\n      });\n    });\n    this.on('restored', function () {\n      // Files may have changed--ensure progress is still accurate.\n      _this8.calculateTotalProgress();\n    }); // show informer if offline\n\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', function () {\n        return _this8.updateOnlineStatus();\n      });\n      window.addEventListener('offline', function () {\n        return _this8.updateOnlineStatus();\n      });\n      setTimeout(function () {\n        return _this8.updateOnlineStatus();\n      }, 3000);\n    }\n  };\n  _proto.updateOnlineStatus = function updateOnlineStatus() {\n    var online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n    if (!online) {\n      this.emit('is-offline');\n      this.info(this.i18n('noInternetConnection'), 'error', 0);\n      this.wasOffline = true;\n    } else {\n      this.emit('is-online');\n      if (this.wasOffline) {\n        this.emit('back-online');\n        this.info(this.i18n('connectedToInternet'), 'success', 3000);\n        this.wasOffline = false;\n      }\n    }\n  };\n  _proto.getID = function getID() {\n    return this.opts.id;\n  }\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n  ;\n\n  _proto.use = function use(Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      var msg = \"Expected a plugin class, but got \" + (Plugin === null ? 'null' : typeof Plugin) + \".\" + ' Please verify that the plugin was imported and spelled correctly.';\n      throw new TypeError(msg);\n    } // Instantiate\n\n    var plugin = new Plugin(this, opts);\n    var pluginId = plugin.id;\n    this.plugins[plugin.type] = this.plugins[plugin.type] || [];\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id');\n    }\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type');\n    }\n    var existsPluginAlready = this.getPlugin(pluginId);\n    if (existsPluginAlready) {\n      var _msg = \"Already found a plugin named '\" + existsPluginAlready.id + \"'. \" + (\"Tried to use: '\" + pluginId + \"'.\\n\") + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n      throw new Error(_msg);\n    }\n    if (Plugin.VERSION) {\n      this.log(\"Using \" + pluginId + \" v\" + Plugin.VERSION);\n    }\n    this.plugins[plugin.type].push(plugin);\n    plugin.install();\n    return this;\n  }\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {object|boolean}\n   */;\n\n  _proto.getPlugin = function getPlugin(id) {\n    var foundPlugin = null;\n    this.iteratePlugins(function (plugin) {\n      if (plugin.id === id) {\n        foundPlugin = plugin;\n        return false;\n      }\n    });\n    return foundPlugin;\n  }\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */;\n\n  _proto.iteratePlugins = function iteratePlugins(method) {\n    var _this9 = this;\n    Object.keys(this.plugins).forEach(function (pluginType) {\n      _this9.plugins[pluginType].forEach(method);\n    });\n  }\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */;\n\n  _proto.removePlugin = function removePlugin(instance) {\n    var _extends4;\n    this.log(\"Removing plugin \" + instance.id);\n    this.emit('plugin-remove', instance);\n    if (instance.uninstall) {\n      instance.uninstall();\n    }\n    var list = this.plugins[instance.type].slice(); // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n\n    var index = findIndex(list, function (item) {\n      return item.id === instance.id;\n    });\n    if (index !== -1) {\n      list.splice(index, 1);\n      this.plugins[instance.type] = list;\n    }\n    var state = this.getState();\n    var updatedState = {\n      plugins: _extends({}, state.plugins, (_extends4 = {}, _extends4[instance.id] = undefined, _extends4))\n    };\n    this.setState(updatedState);\n  }\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */;\n\n  _proto.close = function close() {\n    var _this10 = this;\n    this.log(\"Closing Uppy instance \" + this.opts.id + \": removing all files and uninstalling plugins\");\n    this.reset();\n    this.storeUnsubscribe();\n    this.iteratePlugins(function (plugin) {\n      _this10.removePlugin(plugin);\n    });\n  }\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */;\n\n  _proto.info = function info(message, type, duration) {\n    if (type === void 0) {\n      type = 'info';\n    }\n    if (duration === void 0) {\n      duration = 3000;\n    }\n    var isComplexMessage = typeof message === 'object';\n    this.setState({\n      info: {\n        isHidden: false,\n        type: type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }\n    });\n    this.emit('info-visible');\n    clearTimeout(this.infoTimeoutID);\n    if (duration === 0) {\n      this.infoTimeoutID = undefined;\n      return;\n    } // hide the informer after `duration` milliseconds\n\n    this.infoTimeoutID = setTimeout(this.hideInfo, duration);\n  };\n  _proto.hideInfo = function hideInfo() {\n    var newInfo = _extends({}, this.getState().info, {\n      isHidden: true\n    });\n    this.setState({\n      info: newInfo\n    });\n    this.emit('info-hidden');\n  }\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */;\n\n  _proto.log = function log(message, type) {\n    var logger = this.opts.logger;\n    switch (type) {\n      case 'error':\n        logger.error(message);\n        break;\n      case 'warning':\n        logger.warn(message);\n        break;\n      default:\n        logger.debug(message);\n        break;\n    }\n  }\n  /**\n   * Obsolete, event listeners are now added in the constructor.\n   */;\n\n  _proto.run = function run() {\n    this.log('Calling run() is no longer necessary.', 'warning');\n    return this;\n  }\n  /**\n   * Restore an upload by its ID.\n   */;\n\n  _proto.restore = function restore(uploadID) {\n    this.log(\"Core: attempting to restore upload \\\"\" + uploadID + \"\\\"\");\n    if (!this.getState().currentUploads[uploadID]) {\n      this.removeUpload(uploadID);\n      return Promise.reject(new Error('Nonexistent upload'));\n    }\n    return this.runUpload(uploadID);\n  }\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */;\n\n  _proto.createUpload = function createUpload(fileIDs, opts) {\n    var _extends5;\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    // uppy.retryAll sets this to true â€” when retrying we want to ignore `allowNewUpload: false`\n    var _opts = opts,\n      _opts$forceAllowNewUp = _opts.forceAllowNewUpload,\n      forceAllowNewUpload = _opts$forceAllowNewUp === void 0 ? false : _opts$forceAllowNewUp;\n    var _this$getState6 = this.getState(),\n      allowNewUpload = _this$getState6.allowNewUpload,\n      currentUploads = _this$getState6.currentUploads;\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.');\n    }\n    var uploadID = cuid();\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs: fileIDs\n    });\n    this.setState({\n      allowNewUpload: this.opts.allowMultipleUploads !== false,\n      currentUploads: _extends({}, currentUploads, (_extends5 = {}, _extends5[uploadID] = {\n        fileIDs: fileIDs,\n        step: 0,\n        result: {}\n      }, _extends5))\n    });\n    return uploadID;\n  };\n  _proto.getUpload = function getUpload(uploadID) {\n    var _this$getState7 = this.getState(),\n      currentUploads = _this$getState7.currentUploads;\n    return currentUploads[uploadID];\n  }\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */;\n\n  _proto.addResultData = function addResultData(uploadID, data) {\n    var _extends6;\n    if (!this.getUpload(uploadID)) {\n      this.log(\"Not setting result for an upload that has been removed: \" + uploadID);\n      return;\n    }\n    var _this$getState8 = this.getState(),\n      currentUploads = _this$getState8.currentUploads;\n    var currentUpload = _extends({}, currentUploads[uploadID], {\n      result: _extends({}, currentUploads[uploadID].result, data)\n    });\n    this.setState({\n      currentUploads: _extends({}, currentUploads, (_extends6 = {}, _extends6[uploadID] = currentUpload, _extends6))\n    });\n  }\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */;\n\n  _proto.removeUpload = function removeUpload(uploadID) {\n    var currentUploads = _extends({}, this.getState().currentUploads);\n    delete currentUploads[uploadID];\n    this.setState({\n      currentUploads: currentUploads\n    });\n  }\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */;\n\n  _proto.runUpload = function runUpload(uploadID) {\n    var _this11 = this;\n    var uploadData = this.getState().currentUploads[uploadID];\n    var restoreStep = uploadData.step;\n    var steps = [].concat(this.preProcessors, this.uploaders, this.postProcessors);\n    var lastStep = Promise.resolve();\n    steps.forEach(function (fn, step) {\n      // Skip this step if we are restoring and have already completed this step before.\n      if (step < restoreStep) {\n        return;\n      }\n      lastStep = lastStep.then(function () {\n        var _extends7;\n        var _this11$getState = _this11.getState(),\n          currentUploads = _this11$getState.currentUploads;\n        var currentUpload = currentUploads[uploadID];\n        if (!currentUpload) {\n          return;\n        }\n        var updatedUpload = _extends({}, currentUpload, {\n          step: step\n        });\n        _this11.setState({\n          currentUploads: _extends({}, currentUploads, (_extends7 = {}, _extends7[uploadID] = updatedUpload, _extends7))\n        }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        // eslint-disable-next-line consistent-return\n\n        return fn(updatedUpload.fileIDs, uploadID);\n      }).then(function () {\n        return null;\n      });\n    }); // Not returning the `catch`ed promise, because we still want to return a rejected\n    // promise from this method if the upload failed.\n\n    lastStep.catch(function (err) {\n      _this11.emit('error', err);\n      _this11.removeUpload(uploadID);\n    });\n    return lastStep.then(function () {\n      // Set result data.\n      var _this11$getState2 = _this11.getState(),\n        currentUploads = _this11$getState2.currentUploads;\n      var currentUpload = currentUploads[uploadID];\n      if (!currentUpload) {\n        return;\n      } // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n\n      currentUpload.fileIDs.forEach(function (fileID) {\n        var file = _this11.getFile(fileID);\n        if (file && file.progress.postprocess) {\n          _this11.emit('postprocess-complete', file);\n        }\n      });\n      var files = currentUpload.fileIDs.map(function (fileID) {\n        return _this11.getFile(fileID);\n      });\n      var successful = files.filter(function (file) {\n        return !file.error;\n      });\n      var failed = files.filter(function (file) {\n        return file.error;\n      });\n      _this11.addResultData(uploadID, {\n        successful: successful,\n        failed: failed,\n        uploadID: uploadID\n      });\n    }).then(function () {\n      // Emit completion events.\n      // This is in a separate function so that the `currentUploads` variable\n      // always refers to the latest state. In the handler right above it refers\n      // to an outdated object without the `.result` property.\n      var _this11$getState3 = _this11.getState(),\n        currentUploads = _this11$getState3.currentUploads;\n      if (!currentUploads[uploadID]) {\n        return;\n      }\n      var currentUpload = currentUploads[uploadID];\n      var result = currentUpload.result;\n      _this11.emit('complete', result);\n      _this11.removeUpload(uploadID); // eslint-disable-next-line consistent-return\n\n      return result;\n    }).then(function (result) {\n      if (result == null) {\n        _this11.log(\"Not setting result for an upload that has been removed: \" + uploadID);\n      }\n      return result;\n    });\n  }\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */;\n\n  _proto.upload = function upload() {\n    var _this12 = this;\n    if (!this.plugins.uploader) {\n      this.log('No uploader type plugins are used', 'warning');\n    }\n    var _this$getState9 = this.getState(),\n      files = _this$getState9.files;\n    var onBeforeUploadResult = this.opts.onBeforeUpload(files);\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n    }\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n\n      this.setState({\n        files: files\n      });\n    }\n    return Promise.resolve().then(function () {\n      _this12.checkMinNumberOfFiles(files);\n      _this12.checkRequiredMetaFields(files);\n    }).catch(function (err) {\n      _this12.showOrLogErrorAndThrow(err);\n    }).then(function () {\n      var _this12$getState = _this12.getState(),\n        currentUploads = _this12$getState.currentUploads; // get a list of files that are currently assigned to uploads\n\n      var currentlyUploadingFiles = Object.keys(currentUploads).reduce(function (prev, curr) {\n        return prev.concat(currentUploads[curr].fileIDs);\n      }, []);\n      var waitingFileIDs = [];\n      Object.keys(files).forEach(function (fileID) {\n        var file = _this12.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n          waitingFileIDs.push(file.id);\n        }\n      });\n      var uploadID = _this12.createUpload(waitingFileIDs);\n      return _this12.runUpload(uploadID);\n    }).catch(function (err) {\n      _this12.showOrLogErrorAndThrow(err, {\n        showInformer: false\n      });\n    });\n  };\n  _createClass(Uppy, [{\n    key: \"state\",\n    get: function get() {\n      // Here, state is a non-enumerable property.\n      return this.getState();\n    }\n  }]);\n  return Uppy;\n}();\nUppy.VERSION = \"1.20.1\";\nmodule.exports = function core(opts) {\n  return new Uppy(opts);\n}; // Expose class constructor.\n\nmodule.exports.Uppy = Uppy;\nmodule.exports.Plugin = Plugin;\nmodule.exports.debugLogger = debugLogger;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}