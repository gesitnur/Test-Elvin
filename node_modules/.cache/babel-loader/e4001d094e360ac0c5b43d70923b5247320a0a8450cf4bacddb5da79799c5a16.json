{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError';\nconst ASSEMBLIES_ENDPOINT = '/assemblies';\n/**\n * A Barebones HTTP API client for Transloadit.\n */\n\nvar _headers = /*#__PURE__*/_classPrivateFieldLooseKey(\"headers\");\nvar _fetchWithNetworkError = /*#__PURE__*/_classPrivateFieldLooseKey(\"fetchWithNetworkError\");\nvar _fetchJSON = /*#__PURE__*/_classPrivateFieldLooseKey(\"fetchJSON\");\nvar _reportError = /*#__PURE__*/_classPrivateFieldLooseKey(\"reportError\");\nexport default class Client {\n  constructor(_opts) {\n    if (_opts === void 0) {\n      _opts = {};\n    }\n    Object.defineProperty(this, _fetchJSON, {\n      value: _fetchJSON2\n    });\n    Object.defineProperty(this, _headers, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _fetchWithNetworkError, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _reportError, {\n      writable: true,\n      value: (err, params) => {\n        if (this.opts.errorReporting === false) {\n          throw err;\n        }\n        const opts = {\n          type: params.type\n        };\n        if (params.assembly) {\n          opts.assembly = params.assembly.assembly_id;\n          opts.instance = params.assembly.instance;\n        }\n        if (params.url) {\n          opts.endpoint = params.url;\n        }\n        this.submitError(err, opts).catch(() => {// not much we can do then is there\n        });\n        throw err;\n      }\n    });\n    this.opts = _opts;\n    if (this.opts.client != null) {\n      _classPrivateFieldLooseBase(this, _headers)[_headers]['Transloadit-Client'] = this.opts.client;\n    }\n    _classPrivateFieldLooseBase(this, _fetchWithNetworkError)[_fetchWithNetworkError] = this.opts.rateLimitedQueue.wrapPromiseFunction(fetchWithNetworkError);\n  }\n  /**\n   * @param  {[RequestInfo | URL, RequestInit]} args\n   * @returns {Promise<any>}\n   */\n\n  /**\n   * Create a new assembly.\n   *\n   * @param {object} options\n   * @param {string|object} options.params\n   * @param {object} options.fields\n   * @param {string} options.signature\n   * @param {number} options.expectedFiles\n   */\n  createAssembly(_ref) {\n    let params = _ref.params,\n      fields = _ref.fields,\n      signature = _ref.signature,\n      expectedFiles = _ref.expectedFiles;\n    const data = new FormData();\n    data.append('params', typeof params === 'string' ? params : JSON.stringify(params));\n    if (signature) {\n      data.append('signature', signature);\n    }\n    Object.keys(fields).forEach(key => {\n      data.append(key, fields[key]);\n    });\n    data.append('num_expected_upload_files', expectedFiles);\n    const url = new URL(ASSEMBLIES_ENDPOINT, `${this.opts.service}`).href;\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](url, {\n      method: 'post',\n      headers: _classPrivateFieldLooseBase(this, _headers)[_headers],\n      body: data\n    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {\n      url,\n      type: 'API_ERROR'\n    }));\n  }\n  /**\n   * Reserve resources for a file in an Assembly. Then addFile can be used later.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */\n\n  reserveFile(assembly, file) {\n    const size = encodeURIComponent(file.size);\n    const url = `${assembly.assembly_ssl_url}/reserve_file?size=${size}`;\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](url, {\n      method: 'post',\n      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]\n    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {\n      assembly,\n      file,\n      url,\n      type: 'API_ERROR'\n    }));\n  }\n  /**\n   * Import a remote file to an Assembly.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */\n\n  addFile(assembly, file) {\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'));\n    }\n    const size = encodeURIComponent(file.size);\n    const uploadUrl = encodeURIComponent(file.uploadURL);\n    const filename = encodeURIComponent(file.name);\n    const fieldname = 'file';\n    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${uploadUrl}`;\n    const url = `${assembly.assembly_ssl_url}/add_file?${qs}`;\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](url, {\n      method: 'post',\n      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]\n    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {\n      assembly,\n      file,\n      url,\n      type: 'API_ERROR'\n    }));\n  }\n  /**\n   * Update the number of expected files in an already created assembly.\n   *\n   * @param {object} assembly\n   * @param {number} num_expected_upload_files\n   */\n\n  updateNumberOfFilesInAssembly(assembly, num_expected_upload_files) {\n    const url = new URL(assembly.assembly_ssl_url);\n    url.pathname = '/update_assemblies';\n    const body = JSON.stringify({\n      assembly_updates: [{\n        assembly_id: assembly.assembly_id,\n        num_expected_upload_files\n      }]\n    });\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](url, {\n      method: 'post',\n      headers: _classPrivateFieldLooseBase(this, _headers)[_headers],\n      body\n    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {\n      url,\n      type: 'API_ERROR'\n    }));\n  }\n  /**\n   * Cancel a running Assembly.\n   *\n   * @param {object} assembly\n   */\n\n  cancelAssembly(assembly) {\n    const url = assembly.assembly_ssl_url;\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](url, {\n      method: 'delete',\n      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]\n    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {\n      url,\n      type: 'API_ERROR'\n    }));\n  }\n  /**\n   * Get the current status for an assembly.\n   *\n   * @param {string} url The status endpoint of the assembly.\n   */\n\n  getAssemblyStatus(url) {\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](url, {\n      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]\n    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {\n      url,\n      type: 'STATUS_ERROR'\n    }));\n  }\n  submitError(err, _temp) {\n    let _ref2 = _temp === void 0 ? {} : _temp,\n      endpoint = _ref2.endpoint,\n      instance = _ref2.instance,\n      assembly = _ref2.assembly;\n    const message = err.details ? `${err.message} (${err.details})` : err.message;\n    return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON]('https://transloaditstatus.com/client_error', {\n      method: 'post',\n      body: JSON.stringify({\n        endpoint,\n        instance,\n        assembly_id: assembly,\n        agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        client: this.opts.client,\n        error: message\n      })\n    });\n  }\n}\nfunction _fetchJSON2() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return _classPrivateFieldLooseBase(this, _fetchWithNetworkError)[_fetchWithNetworkError](...args).then(response => {\n    if (response.status === 429) {\n      this.opts.rateLimitedQueue.rateLimit(2000);\n      return _classPrivateFieldLooseBase(this, _fetchJSON)[_fetchJSON](...args);\n    }\n    if (!response.ok) {\n      const serverError = new Error(response.statusText);\n      serverError.statusCode = response.status;\n      if (!`${args[0]}`.endsWith(ASSEMBLIES_ENDPOINT)) return Promise.reject(serverError); // Failed assembly requests should return a more detailed error in JSON.\n\n      return response.json().then(assembly => {\n        if (!assembly.error) throw serverError;\n        const error = new Error(assembly.error);\n        error.details = assembly.message;\n        error.assembly = assembly;\n        if (assembly.assembly_id) {\n          error.details += ` Assembly ID: ${assembly.assembly_id}`;\n        }\n        throw error;\n      }, err => {\n        // eslint-disable-next-line no-param-reassign\n        err.cause = serverError;\n        throw err;\n      });\n    }\n    return response.json();\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}