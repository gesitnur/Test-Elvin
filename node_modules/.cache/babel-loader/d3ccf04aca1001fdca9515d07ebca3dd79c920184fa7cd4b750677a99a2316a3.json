{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause';\n/**\n * Check that Assembly parameters are present and include all required fields.\n */\n\nfunction validateParams(params) {\n  if (params == null) {\n    throw new Error('Transloadit: The `params` option is required.');\n  }\n  if (typeof params === 'string') {\n    try {\n      // eslint-disable-next-line no-param-reassign\n      params = JSON.parse(params);\n    } catch (err) {\n      // Tell the user that this is not an Uppy bug!\n      throw new ErrorWithCause('Transloadit: The `params` option is a malformed JSON string.', {\n        cause: err\n      });\n    }\n  }\n  if (!params.auth || !params.auth.key) {\n    throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/c/template-credentials');\n  }\n}\n/**\n * Combine Assemblies with the same options into a single Assembly for all the\n * relevant files.\n */\n\nfunction dedupe(list) {\n  const dedupeMap = Object.create(null);\n  for (const _ref2 of list.filter(Boolean)) {\n    const fileIDs = _ref2.fileIDs;\n    const options = _ref2.options;\n    {\n      const id = JSON.stringify(options);\n      if (id in dedupeMap) {\n        dedupeMap[id].fileIDArrays.push(fileIDs);\n      } else {\n        dedupeMap[id] = {\n          options,\n          fileIDArrays: [fileIDs]\n        };\n      }\n    }\n  }\n  return Object.values(dedupeMap).map(_ref => {\n    let options = _ref.options,\n      fileIDArrays = _ref.fileIDArrays;\n    return {\n      options,\n      fileIDs: fileIDArrays.flat(1)\n    };\n  });\n}\n/**\n * Turn Transloadit plugin options and a list of files into a list of Assembly\n * options.\n */\n\nvar _getAssemblyOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAssemblyOptions\");\nclass AssemblyOptions {\n  constructor(files, opts) {\n    Object.defineProperty(this, _getAssemblyOptions, {\n      value: _getAssemblyOptions2\n    });\n    this.files = files;\n    this.opts = opts;\n  }\n  /**\n   * Get Assembly options for a file.\n   */\n\n  /**\n   * Generate a set of Assemblies that will handle the upload.\n   * Returns a Promise for an object with keys:\n   *  - fileIDs - an array of file IDs to add to this Assembly\n   *  - options - Assembly options\n   */\n  async build() {\n    const options = this.opts;\n    if (this.files.length > 0) {\n      return Promise.all(this.files.map(file => _classPrivateFieldLooseBase(this, _getAssemblyOptions)[_getAssemblyOptions](file))).then(dedupe);\n    }\n    if (options.alwaysRunAssembly) {\n      // No files, just generate one Assembly\n      const assemblyOptions = await options.getAssemblyOptions(null, options);\n      validateParams(assemblyOptions.params);\n      return [{\n        fileIDs: this.files.map(file => file.id),\n        options: assemblyOptions\n      }];\n    } // If there are no files and we do not `alwaysRunAssembly`,\n    // don't do anything.\n\n    return [];\n  }\n}\nasync function _getAssemblyOptions2(file) {\n  if (file == null) return undefined;\n  const options = this.opts;\n  const assemblyOptions = await options.getAssemblyOptions(file, options); // We check if the file is present here again, because it could had been\n  // removed during the await, e.g. if the user hit cancel while we were\n  // waiting for the options.\n\n  if (file == null) return undefined;\n  if (Array.isArray(assemblyOptions.fields)) {\n    assemblyOptions.fields = Object.fromEntries(assemblyOptions.fields.map(fieldName => [fieldName, file.meta[fieldName]]));\n  } else if (assemblyOptions.fields == null) {\n    assemblyOptions.fields = {};\n  }\n  validateParams(assemblyOptions.params);\n  return {\n    fileIDs: [file.id],\n    options: assemblyOptions\n  };\n}\nexport default AssemblyOptions;\nexport { validateParams };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}