{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/* eslint-disable jsx-a11y/media-has-caption */\nimport { h, Component } from 'preact';\nimport SnapshotButton from \"./SnapshotButton.js\";\nimport RecordButton from \"./RecordButton.js\";\nimport RecordingLength from \"./RecordingLength.js\";\nimport VideoSourceSelect from \"./VideoSourceSelect.js\";\nimport SubmitButton from \"./SubmitButton.js\";\nimport DiscardButton from \"./DiscardButton.js\";\nfunction isModeAvailable(modes, mode) {\n  return modes.includes(mode);\n}\nclass CameraScreen extends Component {\n  componentDidMount() {\n    const onFocus = this.props.onFocus;\n    onFocus();\n  }\n  componentWillUnmount() {\n    const onStop = this.props.onStop;\n    onStop();\n  }\n  render() {\n    const _this$props = this.props,\n      src = _this$props.src,\n      recordedVideo = _this$props.recordedVideo,\n      recording = _this$props.recording,\n      modes = _this$props.modes,\n      supportsRecording = _this$props.supportsRecording,\n      videoSources = _this$props.videoSources,\n      showVideoSourceDropdown = _this$props.showVideoSourceDropdown,\n      showRecordingLength = _this$props.showRecordingLength,\n      onSubmit = _this$props.onSubmit,\n      i18n = _this$props.i18n,\n      mirror = _this$props.mirror,\n      onSnapshot = _this$props.onSnapshot,\n      onStartRecording = _this$props.onStartRecording,\n      onStopRecording = _this$props.onStopRecording,\n      onDiscardRecordedVideo = _this$props.onDiscardRecordedVideo,\n      recordingLengthSeconds = _this$props.recordingLengthSeconds;\n    const hasRecordedVideo = !!recordedVideo;\n    const shouldShowRecordButton = !hasRecordedVideo && supportsRecording && (isModeAvailable(modes, 'video-only') || isModeAvailable(modes, 'audio-only') || isModeAvailable(modes, 'video-audio'));\n    const shouldShowSnapshotButton = !hasRecordedVideo && isModeAvailable(modes, 'picture');\n    const shouldShowRecordingLength = supportsRecording && showRecordingLength && !hasRecordedVideo;\n    const shouldShowVideoSourceDropdown = showVideoSourceDropdown && videoSources && videoSources.length > 1;\n    const videoProps = {\n      playsinline: true\n    };\n    if (recordedVideo) {\n      videoProps.muted = false;\n      videoProps.controls = true;\n      videoProps.src = recordedVideo; // reset srcObject in dom. If not resetted, stream sticks in element\n\n      if (this.videoElement) {\n        this.videoElement.srcObject = undefined;\n      }\n    } else {\n      videoProps.muted = true;\n      videoProps.autoplay = true;\n      videoProps.srcObject = src;\n    }\n    return h(\"div\", {\n      className: \"uppy uppy-Webcam-container\"\n    }, h(\"div\", {\n      className: \"uppy-Webcam-videoContainer\"\n    }, h(\"video\", _extends({\n      /* eslint-disable-next-line no-return-assign */\n      ref: videoElement => this.videoElement = videoElement,\n      className: `uppy-Webcam-video  ${mirror ? 'uppy-Webcam-video--mirrored' : ''}`\n      /* eslint-disable-next-line react/jsx-props-no-spreading */\n    }, videoProps))), h(\"div\", {\n      className: \"uppy-Webcam-footer\"\n    }, h(\"div\", {\n      className: \"uppy-Webcam-videoSourceContainer\"\n    }, shouldShowVideoSourceDropdown ? VideoSourceSelect(this.props) : null), h(\"div\", {\n      className: \"uppy-Webcam-buttonContainer\"\n    }, shouldShowSnapshotButton && h(SnapshotButton, {\n      onSnapshot: onSnapshot,\n      i18n: i18n\n    }), shouldShowRecordButton && h(RecordButton, {\n      recording: recording,\n      onStartRecording: onStartRecording,\n      onStopRecording: onStopRecording,\n      i18n: i18n\n    }), hasRecordedVideo && h(SubmitButton, {\n      onSubmit: onSubmit,\n      i18n: i18n\n    }), hasRecordedVideo && h(DiscardButton, {\n      onDiscard: onDiscardRecordedVideo,\n      i18n: i18n\n    })), h(\"div\", {\n      className: \"uppy-Webcam-recordingLength\"\n    }, shouldShowRecordingLength && h(RecordingLength, {\n      recordingLengthSeconds: recordingLengthSeconds,\n      i18n: i18n\n    }))));\n  }\n}\nexport default CameraScreen;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}