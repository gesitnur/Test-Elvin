{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport { h } from 'preact';\nimport { UIPlugin } from '@uppy/core';\nimport getFileTypeExtension from '@uppy/utils/lib/getFileTypeExtension';\nimport supportsMediaRecorder from './supportsMediaRecorder.js';\nimport RecordingScreen from \"./RecordingScreen.js\";\nimport PermissionsScreen from \"./PermissionsScreen.js\";\nimport locale from './locale.js';\nconst packageJson = {\n  \"version\": \"1.0.2\"\n};\n/**\n * Audio recording plugin\n */\n\nvar _stream = /*#__PURE__*/_classPrivateFieldLooseKey(\"stream\");\nvar _audioActive = /*#__PURE__*/_classPrivateFieldLooseKey(\"audioActive\");\nvar _recordingChunks = /*#__PURE__*/_classPrivateFieldLooseKey(\"recordingChunks\");\nvar _recorder = /*#__PURE__*/_classPrivateFieldLooseKey(\"recorder\");\nvar _capturedMediaFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"capturedMediaFile\");\nvar _mediaDevices = /*#__PURE__*/_classPrivateFieldLooseKey(\"mediaDevices\");\nvar _supportsUserMedia = /*#__PURE__*/_classPrivateFieldLooseKey(\"supportsUserMedia\");\nvar _hasAudioCheck = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasAudioCheck\");\nvar _start = /*#__PURE__*/_classPrivateFieldLooseKey(\"start\");\nvar _startRecording = /*#__PURE__*/_classPrivateFieldLooseKey(\"startRecording\");\nvar _stopRecording = /*#__PURE__*/_classPrivateFieldLooseKey(\"stopRecording\");\nvar _discardRecordedAudio = /*#__PURE__*/_classPrivateFieldLooseKey(\"discardRecordedAudio\");\nvar _submit = /*#__PURE__*/_classPrivateFieldLooseKey(\"submit\");\nvar _stop = /*#__PURE__*/_classPrivateFieldLooseKey(\"stop\");\nvar _getAudio = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAudio\");\nvar _changeSource = /*#__PURE__*/_classPrivateFieldLooseKey(\"changeSource\");\nvar _updateSources = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateSources\");\nexport default class Audio extends UIPlugin {\n  constructor(uppy, opts) {\n    var _this;\n    super(uppy, opts);\n    _this = this;\n    Object.defineProperty(this, _getAudio, {\n      value: _getAudio2\n    });\n    Object.defineProperty(this, _hasAudioCheck, {\n      value: _hasAudioCheck2\n    });\n    Object.defineProperty(this, _stream, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _audioActive, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _recordingChunks, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _recorder, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _capturedMediaFile, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _mediaDevices, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _supportsUserMedia, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _start, {\n      writable: true,\n      value: function (options) {\n        if (options === void 0) {\n          options = null;\n        }\n        if (!_classPrivateFieldLooseBase(_this, _supportsUserMedia)[_supportsUserMedia]) {\n          return Promise.reject(new Error('Microphone access not supported'));\n        }\n        _classPrivateFieldLooseBase(_this, _audioActive)[_audioActive] = true;\n        _classPrivateFieldLooseBase(_this, _hasAudioCheck)[_hasAudioCheck]().then(hasAudio => {\n          _this.setPluginState({\n            hasAudio\n          }); // ask user for access to their camera\n\n          return _classPrivateFieldLooseBase(_this, _mediaDevices)[_mediaDevices].getUserMedia({\n            audio: true\n          }).then(stream => {\n            _classPrivateFieldLooseBase(_this, _stream)[_stream] = stream;\n            let currentDeviceId = null;\n            const tracks = stream.getAudioTracks();\n            if (!options || !options.deviceId) {\n              currentDeviceId = tracks[0].getSettings().deviceId;\n            } else {\n              tracks.forEach(track => {\n                if (track.getSettings().deviceId === options.deviceId) {\n                  currentDeviceId = track.getSettings().deviceId;\n                }\n              });\n            } // Update the sources now, so we can access the names.\n\n            _classPrivateFieldLooseBase(_this, _updateSources)[_updateSources]();\n            _this.setPluginState({\n              currentDeviceId,\n              audioReady: true\n            });\n          }).catch(err => {\n            _this.setPluginState({\n              audioReady: false,\n              cameraError: err\n            });\n            _this.uppy.info(err.message, 'error');\n          });\n        });\n      }\n    });\n    Object.defineProperty(this, _startRecording, {\n      writable: true,\n      value: () => {\n        // only used if supportsMediaRecorder() returned true\n        // eslint-disable-next-line compat/compat\n        _classPrivateFieldLooseBase(this, _recorder)[_recorder] = new MediaRecorder(_classPrivateFieldLooseBase(this, _stream)[_stream]);\n        _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks] = [];\n        let stoppingBecauseOfMaxSize = false;\n        _classPrivateFieldLooseBase(this, _recorder)[_recorder].addEventListener('dataavailable', event => {\n          _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks].push(event.data);\n          const restrictions = this.uppy.opts.restrictions;\n          if (_classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks].length > 1 && restrictions.maxFileSize != null && !stoppingBecauseOfMaxSize) {\n            const totalSize = _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks].reduce((acc, chunk) => acc + chunk.size, 0); // Exclude the initial chunk from the average size calculation because it is likely to be a very small outlier\n\n            const averageChunkSize = (totalSize - _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks][0].size) / (_classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks].length - 1);\n            const expectedEndChunkSize = averageChunkSize * 3;\n            const maxSize = Math.max(0, restrictions.maxFileSize - expectedEndChunkSize);\n            if (totalSize > maxSize) {\n              stoppingBecauseOfMaxSize = true;\n              this.uppy.info(this.i18n('recordingStoppedMaxSize'), 'warning', 4000);\n              _classPrivateFieldLooseBase(this, _stopRecording)[_stopRecording]();\n            }\n          }\n        }); // use a \"time slice\" of 500ms: ondataavailable will be called each 500ms\n        // smaller time slices mean we can more accurately check the max file size restriction\n\n        _classPrivateFieldLooseBase(this, _recorder)[_recorder].start(500); // Start the recordingLengthTimer if we are showing the recording length.\n\n        this.recordingLengthTimer = setInterval(() => {\n          const currentRecordingLength = this.getPluginState().recordingLengthSeconds;\n          this.setPluginState({\n            recordingLengthSeconds: currentRecordingLength + 1\n          });\n        }, 1000);\n        this.setPluginState({\n          isRecording: true\n        });\n      }\n    });\n    Object.defineProperty(this, _stopRecording, {\n      writable: true,\n      value: () => {\n        const stopped = new Promise(resolve => {\n          _classPrivateFieldLooseBase(this, _recorder)[_recorder].addEventListener('stop', () => {\n            resolve();\n          });\n          _classPrivateFieldLooseBase(this, _recorder)[_recorder].stop();\n          clearInterval(this.recordingLengthTimer);\n          this.setPluginState({\n            recordingLengthSeconds: 0\n          });\n        });\n        return stopped.then(() => {\n          this.setPluginState({\n            isRecording: false\n          });\n          return _classPrivateFieldLooseBase(this, _getAudio)[_getAudio]();\n        }).then(file => {\n          try {\n            _classPrivateFieldLooseBase(this, _capturedMediaFile)[_capturedMediaFile] = file; // create object url for capture result preview\n\n            this.setPluginState({\n              recordedAudio: URL.createObjectURL(file.data)\n            });\n          } catch (err) {\n            // Logging the error, exept restrictions, which is handled in Core\n            if (!err.isRestriction) {\n              this.uppy.log(err);\n            }\n          }\n        }).then(() => {\n          _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks] = null;\n          _classPrivateFieldLooseBase(this, _recorder)[_recorder] = null;\n        }, error => {\n          _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks] = null;\n          _classPrivateFieldLooseBase(this, _recorder)[_recorder] = null;\n          throw error;\n        });\n      }\n    });\n    Object.defineProperty(this, _discardRecordedAudio, {\n      writable: true,\n      value: () => {\n        this.setPluginState({\n          recordedAudio: null\n        });\n        _classPrivateFieldLooseBase(this, _capturedMediaFile)[_capturedMediaFile] = null;\n      }\n    });\n    Object.defineProperty(this, _submit, {\n      writable: true,\n      value: () => {\n        try {\n          if (_classPrivateFieldLooseBase(this, _capturedMediaFile)[_capturedMediaFile]) {\n            this.uppy.addFile(_classPrivateFieldLooseBase(this, _capturedMediaFile)[_capturedMediaFile]);\n          }\n        } catch (err) {\n          // Logging the error, exept restrictions, which is handled in Core\n          if (!err.isRestriction) {\n            this.uppy.log(err, 'error');\n          }\n        }\n      }\n    });\n    Object.defineProperty(this, _stop, {\n      writable: true,\n      value: async () => {\n        if (_classPrivateFieldLooseBase(this, _stream)[_stream]) {\n          const audioTracks = _classPrivateFieldLooseBase(this, _stream)[_stream].getAudioTracks();\n          audioTracks.forEach(track => track.stop());\n        }\n        if (_classPrivateFieldLooseBase(this, _recorder)[_recorder]) {\n          await new Promise(resolve => {\n            _classPrivateFieldLooseBase(this, _recorder)[_recorder].addEventListener('stop', resolve, {\n              once: true\n            });\n            _classPrivateFieldLooseBase(this, _recorder)[_recorder].stop();\n            clearInterval(this.recordingLengthTimer);\n          });\n        }\n        _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks] = null;\n        _classPrivateFieldLooseBase(this, _recorder)[_recorder] = null;\n        _classPrivateFieldLooseBase(this, _audioActive)[_audioActive] = false;\n        _classPrivateFieldLooseBase(this, _stream)[_stream] = null;\n        this.setPluginState({\n          recordedAudio: null,\n          isRecording: false,\n          recordingLengthSeconds: 0\n        });\n      }\n    });\n    Object.defineProperty(this, _changeSource, {\n      writable: true,\n      value: deviceId => {\n        _classPrivateFieldLooseBase(this, _stop)[_stop]();\n        _classPrivateFieldLooseBase(this, _start)[_start]({\n          deviceId\n        });\n      }\n    });\n    Object.defineProperty(this, _updateSources, {\n      writable: true,\n      value: () => {\n        _classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices].enumerateDevices().then(devices => {\n          this.setPluginState({\n            audioSources: devices.filter(device => device.kind === 'audioinput')\n          });\n        });\n      }\n    });\n    _classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices] = navigator.mediaDevices;\n    _classPrivateFieldLooseBase(this, _supportsUserMedia)[_supportsUserMedia] = _classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices] != null;\n    this.id = this.opts.id || 'Audio';\n    this.type = 'acquirer';\n    this.icon = () => h(\"svg\", {\n      \"aria-hidden\": \"true\",\n      focusable: \"false\",\n      width: \"32px\",\n      height: \"32px\",\n      viewBox: \"0 0 32 32\"\n    }, h(\"g\", {\n      fill: \"none\",\n      \"fill-rule\": \"evenodd\"\n    }, h(\"rect\", {\n      fill: \"#9B59B6\",\n      width: \"32\",\n      height: \"32\",\n      rx: \"16\"\n    }), h(\"path\", {\n      d: \"M16 20c-2.21 0-4-1.71-4-3.818V9.818C12 7.71 13.79 6 16 6s4 1.71 4 3.818v6.364C20 18.29 18.21 20 16 20zm-6.364-7h.637c.351 0 .636.29.636.65v1.95c0 3.039 2.565 5.477 5.6 5.175 2.645-.264 4.582-2.692 4.582-5.407V13.65c0-.36.285-.65.636-.65h.637c.351 0 .636.29.636.65v1.631c0 3.642-2.544 6.888-6.045 7.382v1.387h2.227c.351 0 .636.29.636.65v.65c0 .36-.285.65-.636.65h-6.364a.643.643 0 0 1-.636-.65v-.65c0-.36.285-.65.636-.65h2.227v-1.372C11.637 22.2 9 19.212 9 15.6v-1.95c0-.36.285-.65.636-.65z\",\n      fill: \"#FFF\",\n      \"fill-rule\": \"nonzero\"\n    })));\n    this.defaultLocale = locale;\n    this.opts = _objectSpread({}, opts);\n    this.i18nInit();\n    this.title = this.i18n('pluginNameAudio');\n    this.setPluginState({\n      hasAudio: false,\n      audioReady: false,\n      cameraError: null,\n      recordingLengthSeconds: 0,\n      audioSources: [],\n      currentDeviceId: null\n    });\n  }\n  render() {\n    if (!_classPrivateFieldLooseBase(this, _audioActive)[_audioActive]) {\n      _classPrivateFieldLooseBase(this, _start)[_start]();\n    }\n    const audioState = this.getPluginState();\n    if (!audioState.audioReady || !audioState.hasAudio) {\n      return h(PermissionsScreen, {\n        icon: this.icon,\n        i18n: this.i18n,\n        hasAudio: audioState.hasAudio\n      });\n    }\n    return h(RecordingScreen // eslint-disable-next-line react/jsx-props-no-spreading\n    , _extends({}, audioState, {\n      audioActive: _classPrivateFieldLooseBase(this, _audioActive)[_audioActive],\n      onChangeSource: _classPrivateFieldLooseBase(this, _changeSource)[_changeSource],\n      onStartRecording: _classPrivateFieldLooseBase(this, _startRecording)[_startRecording],\n      onStopRecording: _classPrivateFieldLooseBase(this, _stopRecording)[_stopRecording],\n      onDiscardRecordedAudio: _classPrivateFieldLooseBase(this, _discardRecordedAudio)[_discardRecordedAudio],\n      onSubmit: _classPrivateFieldLooseBase(this, _submit)[_submit],\n      onStop: _classPrivateFieldLooseBase(this, _stop)[_stop],\n      i18n: this.i18n,\n      showAudioSourceDropdown: this.opts.showAudioSourceDropdown,\n      supportsRecording: supportsMediaRecorder(),\n      recording: audioState.isRecording,\n      stream: _classPrivateFieldLooseBase(this, _stream)[_stream]\n    }));\n  }\n  install() {\n    this.setPluginState({\n      audioReady: false,\n      recordingLengthSeconds: 0\n    });\n    const target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n    if (_classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices]) {\n      _classPrivateFieldLooseBase(this, _updateSources)[_updateSources]();\n      _classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices].ondevicechange = () => {\n        _classPrivateFieldLooseBase(this, _updateSources)[_updateSources]();\n        if (_classPrivateFieldLooseBase(this, _stream)[_stream]) {\n          let restartStream = true;\n          const _this$getPluginState = this.getPluginState(),\n            audioSources = _this$getPluginState.audioSources,\n            currentDeviceId = _this$getPluginState.currentDeviceId;\n          audioSources.forEach(audioSource => {\n            if (currentDeviceId === audioSource.deviceId) {\n              restartStream = false;\n            }\n          });\n          if (restartStream) {\n            _classPrivateFieldLooseBase(this, _stop)[_stop]();\n            _classPrivateFieldLooseBase(this, _start)[_start]();\n          }\n        }\n      };\n    }\n  }\n  uninstall() {\n    if (_classPrivateFieldLooseBase(this, _stream)[_stream]) {\n      _classPrivateFieldLooseBase(this, _stop)[_stop]();\n    }\n    this.unmount();\n  }\n}\nfunction _hasAudioCheck2() {\n  if (!_classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices]) {\n    return Promise.resolve(false);\n  }\n  return _classPrivateFieldLooseBase(this, _mediaDevices)[_mediaDevices].enumerateDevices().then(devices => {\n    return devices.some(device => device.kind === 'audioinput');\n  });\n}\nfunction _getAudio2() {\n  // Sometimes in iOS Safari, Blobs (especially the first Blob in the recordingChunks Array)\n  // have empty 'type' attributes (e.g. '') so we need to find a Blob that has a defined 'type'\n  // attribute in order to determine the correct MIME type.\n  const mimeType = _classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks].find(blob => {\n    var _blob$type;\n    return ((_blob$type = blob.type) == null ? void 0 : _blob$type.length) > 0;\n  }).type;\n  const fileExtension = getFileTypeExtension(mimeType);\n  if (!fileExtension) {\n    return Promise.reject(new Error(`Could not retrieve recording: Unsupported media type \"${mimeType}\"`));\n  }\n  const name = `audio-${Date.now()}.${fileExtension}`;\n  const blob = new Blob(_classPrivateFieldLooseBase(this, _recordingChunks)[_recordingChunks], {\n    type: mimeType\n  });\n  const file = {\n    source: this.id,\n    name,\n    data: new Blob([blob], {\n      type: mimeType\n    }),\n    type: mimeType\n  };\n  return Promise.resolve(file);\n}\nAudio.VERSION = packageJson.version;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}