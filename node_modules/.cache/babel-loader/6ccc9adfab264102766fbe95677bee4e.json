{"ast":null,"code":"/**\n * Trumbowyg v2.26.0 - A lightweight WYSIWYG editor\n * Trumbowyg core file\n * ------------------------\n * @link http://alex-d.github.io/Trumbowyg\n * @license MIT\n * @author Alexandre Demode (Alex-D)\n *         Twitter : @AlexandreDemode\n *         Website : alex-d.fr\n */\n\njQuery.trumbowyg = {\n  langs: {\n    en: {\n      viewHTML: 'View HTML',\n      undo: 'Undo',\n      redo: 'Redo',\n      formatting: 'Formatting',\n      p: 'Paragraph',\n      blockquote: 'Quote',\n      code: 'Code',\n      header: 'Header',\n      bold: 'Bold',\n      italic: 'Italic',\n      strikethrough: 'Strikethrough',\n      underline: 'Underline',\n      strong: 'Strong',\n      em: 'Emphasis',\n      del: 'Deleted',\n      superscript: 'Superscript',\n      subscript: 'Subscript',\n      unorderedList: 'Unordered list',\n      orderedList: 'Ordered list',\n      insertImage: 'Insert Image',\n      link: 'Link',\n      createLink: 'Insert link',\n      unlink: 'Remove link',\n      _self: 'Same tab (default)',\n      _blank: 'New tab',\n      justifyLeft: 'Align Left',\n      justifyCenter: 'Align Center',\n      justifyRight: 'Align Right',\n      justifyFull: 'Align Justify',\n      horizontalRule: 'Insert horizontal rule',\n      removeformat: 'Remove format',\n      fullscreen: 'Fullscreen',\n      close: 'Close',\n      submit: 'Confirm',\n      reset: 'Cancel',\n      required: 'Required',\n      description: 'Description',\n      title: 'Title',\n      text: 'Text',\n      target: 'Target',\n      width: 'Width'\n    }\n  },\n  // Plugins\n  plugins: {},\n  // SVG Path globally\n  svgPath: null,\n  svgAbsoluteUseHref: false,\n  hideButtonTexts: null\n};\n\n// Makes default options read-only\nObject.defineProperty(jQuery.trumbowyg, 'defaultOptions', {\n  value: {\n    lang: 'en',\n    fixedBtnPane: false,\n    fixedFullWidth: false,\n    autogrow: false,\n    autogrowOnEnter: false,\n    imageWidthModalEdit: false,\n    hideButtonTexts: null,\n    prefix: 'trumbowyg-',\n    tagClasses: {},\n    semantic: true,\n    semanticKeepAttributes: false,\n    resetCss: false,\n    removeformatPasted: false,\n    tabToIndent: false,\n    tagsToRemove: [],\n    tagsToKeep: ['hr', 'img', 'embed', 'iframe', 'input'],\n    btns: [['viewHTML'], ['undo', 'redo'],\n    // Only supported in Blink browsers\n    ['formatting'], ['strong', 'em', 'del'], ['superscript', 'subscript'], ['link'], ['insertImage'], ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'], ['unorderedList', 'orderedList'], ['horizontalRule'], ['removeformat'], ['fullscreen']],\n    // For custom button definitions\n    btnsDef: {},\n    changeActiveDropdownIcon: false,\n    inlineElementsSelector: 'a,abbr,acronym,b,caption,cite,code,col,dfn,dir,dt,dd,em,font,hr,i,kbd,li,q,span,strikeout,strong,sub,sup,u',\n    pasteHandlers: [],\n    // imgDblClickHandler: default is defined in constructor\n\n    plugins: {},\n    urlProtocol: false,\n    minimalLinks: false,\n    linkTargets: ['_self', '_blank'],\n    svgPath: null\n  },\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\n(function (navigator, window, document, $) {\n  'use strict';\n\n  var CONFIRM_EVENT = 'tbwconfirm',\n    CANCEL_EVENT = 'tbwcancel';\n  $.fn.trumbowyg = function (options, params) {\n    var trumbowygDataName = 'trumbowyg';\n    if (options === Object(options) || !options) {\n      return this.each(function () {\n        if (!$(this).data(trumbowygDataName)) {\n          $(this).data(trumbowygDataName, new Trumbowyg(this, options));\n        }\n      });\n    }\n    if (this.length === 1) {\n      try {\n        var t = $(this).data(trumbowygDataName);\n        switch (options) {\n          // Exec command\n          case 'execCmd':\n            return t.execCmd(params.cmd, params.param, params.forceCss, params.skipTrumbowyg);\n\n          // Modal box\n          case 'openModal':\n            return t.openModal(params.title, params.content);\n          case 'closeModal':\n            return t.closeModal();\n          case 'openModalInsert':\n            return t.openModalInsert(params.title, params.fields, params.callback);\n\n          // Range\n          case 'saveRange':\n            return t.saveRange();\n          case 'getRange':\n            return t.range;\n          case 'getRangeText':\n            return t.getRangeText();\n          case 'restoreRange':\n            return t.restoreRange();\n\n          // Enable/disable\n          case 'enable':\n            return t.setDisabled(false);\n          case 'disable':\n            return t.setDisabled(true);\n\n          // Toggle\n          case 'toggle':\n            return t.toggle();\n\n          // Destroy\n          case 'destroy':\n            return t.destroy();\n\n          // Empty\n          case 'empty':\n            return t.empty();\n\n          // HTML\n          case 'html':\n            return t.html(params);\n        }\n      } catch (c) {}\n    }\n    return false;\n  };\n\n  // @param: editorElem is the DOM element\n  var Trumbowyg = function (editorElem, options) {\n    var t = this,\n      trumbowygIconsId = 'trumbowyg-icons',\n      $trumbowyg = $.trumbowyg;\n\n    // Get the document of the element. It use to makes the plugin\n    // compatible on iframes.\n    t.doc = editorElem.ownerDocument || document;\n\n    // jQuery object of the editor\n    t.$ta = $(editorElem); // $ta : Textarea\n    t.$c = $(editorElem); // $c : creator\n\n    options = options || {};\n\n    // Localization management\n    if (options.lang != null || $trumbowyg.langs[options.lang] != null) {\n      t.lang = $.extend(true, {}, $trumbowyg.langs.en, $trumbowyg.langs[options.lang]);\n    } else {\n      t.lang = $trumbowyg.langs.en;\n    }\n    t.hideButtonTexts = $trumbowyg.hideButtonTexts != null ? $trumbowyg.hideButtonTexts : options.hideButtonTexts;\n\n    // SVG path\n    var svgPathOption = $trumbowyg.svgPath != null ? $trumbowyg.svgPath : options.svgPath;\n    t.hasSvg = svgPathOption !== false;\n    if (svgPathOption !== false && ($trumbowyg.svgAbsoluteUseHref || $('#' + trumbowygIconsId, t.doc).length === 0)) {\n      if (svgPathOption == null) {\n        // Hack to get svgPathOption based on trumbowyg.js path\n        var $scriptElements = $('script[src]');\n        $scriptElements.each(function (i, scriptElement) {\n          var source = scriptElement.src;\n          var matches = source.match('trumbowyg(\\.min)?\\.js');\n          if (matches != null) {\n            svgPathOption = source.substring(0, source.indexOf(matches[0])) + 'ui/icons.svg';\n          }\n        });\n      }\n\n      // Do not merge with previous if block: svgPathOption can be redefined in it.\n      // Here we are checking that we find a match\n      if (svgPathOption == null) {\n        console.warn('You must define svgPath: https://goo.gl/CfTY9U'); // jshint ignore:line\n      } else if (!$trumbowyg.svgAbsoluteUseHref) {\n        var div = t.doc.createElement('div');\n        div.id = trumbowygIconsId;\n        t.doc.body.insertBefore(div, t.doc.body.childNodes[0]);\n        $.ajax({\n          async: true,\n          type: 'GET',\n          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n          dataType: 'xml',\n          crossDomain: true,\n          url: svgPathOption,\n          data: null,\n          beforeSend: null,\n          complete: null,\n          success: function (data) {\n            div.innerHTML = new XMLSerializer().serializeToString(data.documentElement);\n          }\n        });\n      }\n    }\n    var baseHref = !!t.doc.querySelector('base') ? window.location.href.replace(window.location.hash, '') : '';\n    t.svgPath = $trumbowyg.svgAbsoluteUseHref ? svgPathOption : baseHref;\n\n    /**\n     * When the button is associated to a empty object\n     * fn and title attributes are defined from the button key value\n     *\n     * For example\n     *      foo: {}\n     * is equivalent to :\n     *      foo: {\n     *          fn: 'foo',\n     *          title: this.lang.foo\n     *      }\n     */\n    var h = t.lang.header,\n      // Header translation\n      isBlinkFunction = function () {\n        return (window.chrome || window.Intl && Intl.v8BreakIterator) && 'CSS' in window;\n      };\n    t.btnsDef = {\n      viewHTML: {\n        fn: 'toggle',\n        class: 'trumbowyg-not-disable'\n      },\n      undo: {\n        isSupported: isBlinkFunction,\n        key: 'Z'\n      },\n      redo: {\n        isSupported: isBlinkFunction,\n        key: 'Y'\n      },\n      p: {\n        fn: 'formatBlock'\n      },\n      blockquote: {\n        fn: 'formatBlock'\n      },\n      h1: {\n        fn: 'formatBlock',\n        title: h + ' 1'\n      },\n      h2: {\n        fn: 'formatBlock',\n        title: h + ' 2'\n      },\n      h3: {\n        fn: 'formatBlock',\n        title: h + ' 3'\n      },\n      h4: {\n        fn: 'formatBlock',\n        title: h + ' 4'\n      },\n      h5: {\n        fn: 'formatBlock',\n        title: h + ' 5'\n      },\n      h6: {\n        fn: 'formatBlock',\n        title: h + ' 6'\n      },\n      subscript: {\n        tag: 'sub'\n      },\n      superscript: {\n        tag: 'sup'\n      },\n      bold: {\n        key: 'B',\n        tag: 'b'\n      },\n      italic: {\n        key: 'I',\n        tag: 'i'\n      },\n      underline: {\n        tag: 'u'\n      },\n      strikethrough: {\n        tag: 'strike'\n      },\n      strong: {\n        fn: 'bold',\n        key: 'B'\n      },\n      em: {\n        fn: 'italic',\n        key: 'I'\n      },\n      del: {\n        fn: 'strikethrough'\n      },\n      createLink: {\n        key: 'K',\n        tag: 'a'\n      },\n      unlink: {},\n      insertImage: {},\n      justifyLeft: {\n        tag: 'left',\n        forceCss: true\n      },\n      justifyCenter: {\n        tag: 'center',\n        forceCss: true\n      },\n      justifyRight: {\n        tag: 'right',\n        forceCss: true\n      },\n      justifyFull: {\n        tag: 'justify',\n        forceCss: true\n      },\n      unorderedList: {\n        fn: 'insertUnorderedList',\n        tag: 'ul'\n      },\n      orderedList: {\n        fn: 'insertOrderedList',\n        tag: 'ol'\n      },\n      horizontalRule: {\n        fn: 'insertHorizontalRule'\n      },\n      removeformat: {},\n      fullscreen: {\n        class: 'trumbowyg-not-disable'\n      },\n      close: {\n        fn: 'destroy',\n        class: 'trumbowyg-not-disable'\n      },\n      // Dropdowns\n      formatting: {\n        dropdown: ['p', 'blockquote', 'h1', 'h2', 'h3', 'h4'],\n        ico: 'p'\n      },\n      link: {\n        dropdown: ['createLink', 'unlink']\n      }\n    };\n\n    // Default Options\n    t.o = $.extend(true, {}, $trumbowyg.defaultOptions, options);\n    if (!t.o.hasOwnProperty('imgDblClickHandler')) {\n      t.o.imgDblClickHandler = t.getDefaultImgDblClickHandler();\n    }\n    t.urlPrefix = t.setupUrlPrefix();\n    t.disabled = t.o.disabled || editorElem.nodeName === 'TEXTAREA' && editorElem.disabled;\n    if (options.btns) {\n      t.o.btns = options.btns;\n    } else if (!t.o.semantic) {\n      t.o.btns[3] = ['bold', 'italic', 'underline', 'strikethrough'];\n    }\n    $.each(t.o.btnsDef, function (btnName, btnDef) {\n      t.addBtnDef(btnName, btnDef);\n    });\n\n    // put this here in the event it would be merged in with options\n    t.eventNamespace = 'trumbowyg-event';\n\n    // Keyboard shortcuts are load in this array\n    t.keys = [];\n\n    // Tag to button dynamically hydrated\n    t.tagToButton = {};\n    t.tagHandlers = [];\n\n    // Admit multiple paste handlers\n    t.pasteHandlers = [].concat(t.o.pasteHandlers);\n\n    // Check if browser is IE\n    t.isIE = navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') !== -1;\n\n    // Check if we are on macOs\n    t.isMac = navigator.platform.toUpperCase().indexOf('MAC') !== -1;\n    t.init();\n  };\n  Trumbowyg.prototype = {\n    DEFAULT_SEMANTIC_MAP: {\n      'b': 'strong',\n      'i': 'em',\n      's': 'del',\n      'strike': 'del',\n      'div': 'p'\n    },\n    init: function () {\n      var t = this;\n      t.height = t.$ta.height();\n      t.initPlugins();\n      try {\n        // Disable image resize, try-catch for old IE\n        t.doc.execCommand('enableObjectResizing', false, false);\n        t.doc.execCommand('defaultParagraphSeparator', false, 'p');\n      } catch (e) {}\n      t.buildEditor();\n      t.buildBtnPane();\n      t.fixedBtnPaneEvents();\n      t.buildOverlay();\n      setTimeout(function () {\n        if (t.disabled) {\n          t.setDisabled(true);\n        }\n        t.$c.trigger('tbwinit');\n      });\n    },\n    addBtnDef: function (btnName, btnDef) {\n      this.btnsDef[btnName] = $.extend(btnDef, this.btnsDef[btnName] || {});\n    },\n    setupUrlPrefix: function () {\n      var protocol = this.o.urlProtocol;\n      if (!protocol) {\n        return;\n      }\n      if (typeof protocol !== 'string') {\n        return 'https://';\n      }\n      return protocol.replace('://', '') + '://';\n    },\n    buildEditor: function () {\n      var t = this,\n        prefix = t.o.prefix,\n        html = '';\n      t.$box = $('<div/>', {\n        class: prefix + 'box ' + prefix + 'editor-visible ' + prefix + t.o.lang + ' trumbowyg'\n      });\n\n      // $ta = Textarea\n      // $ed = Editor\n      t.isTextarea = t.$ta.is('textarea');\n      if (t.isTextarea) {\n        html = t.$ta.val();\n        t.$ed = $('<div/>');\n        t.$box.insertAfter(t.$ta).append(t.$ed, t.$ta);\n      } else {\n        t.$ed = t.$ta;\n        html = t.$ed.html();\n        t.$ta = $('<textarea/>', {\n          name: t.$ta.attr('id'),\n          height: t.height\n        }).val(html);\n        t.$box.insertAfter(t.$ed).append(t.$ta, t.$ed);\n        t.syncCode();\n      }\n      t.$ta.addClass(prefix + 'textarea').attr('tabindex', -1);\n      t.$ed.addClass(prefix + 'editor').attr({\n        contenteditable: true,\n        dir: t.lang._dir || 'ltr'\n      }).html(html);\n      if (t.o.tabindex) {\n        t.$ed.attr('tabindex', t.o.tabindex);\n      }\n      if (t.$c.is('[placeholder]')) {\n        t.$ed.attr('placeholder', t.$c.attr('placeholder'));\n      }\n      if (t.$c.is('[spellcheck]')) {\n        t.$ed.attr('spellcheck', t.$c.attr('spellcheck'));\n      }\n      if (t.o.resetCss) {\n        t.$ed.addClass(prefix + 'reset-css');\n      }\n      if (!t.o.autogrow) {\n        t.$ta.add(t.$ed).css({\n          height: t.height\n        });\n      }\n      t.semanticCode();\n      if (t.o.autogrowOnEnter) {\n        t.$ed.addClass(prefix + 'autogrow-on-enter');\n      }\n      var ctrl = false,\n        composition = false,\n        debounceButtonPaneStatus;\n      t.$ed.on('dblclick', 'img', t.o.imgDblClickHandler).on('keydown', function (e) {\n        // append flags to differentiate Chrome spans\n        var keyCode = e.which;\n        if (keyCode === 8 || keyCode === 13 || keyCode === 46) {\n          t.toggleSpan(true);\n        }\n        if ((e.ctrlKey || e.metaKey) && !e.altKey) {\n          ctrl = true;\n          var key = t.keys[String.fromCharCode(e.which).toUpperCase()];\n          try {\n            t.execCmd(key.fn, key.param);\n            return false;\n          } catch (c) {}\n        } else {\n          if (t.o.tabToIndent && e.key === 'Tab') {\n            try {\n              if (e.shiftKey) {\n                t.execCmd('outdent', true, null);\n              } else {\n                t.execCmd('indent', true, null);\n              }\n              return false;\n            } catch (c) {}\n          }\n        }\n      }).on('compositionstart compositionupdate', function () {\n        composition = true;\n      }).on('keyup compositionend', function (e) {\n        if (e.type === 'compositionend') {\n          composition = false;\n        } else if (composition) {\n          return;\n        }\n        var keyCode = e.which;\n        if (keyCode >= 37 && keyCode <= 40) {\n          return;\n        }\n\n        // remove Chrome generated span tags\n        if (keyCode === 8 || keyCode === 13 || keyCode === 46) {\n          t.toggleSpan();\n        }\n        if ((e.ctrlKey || e.metaKey) && (keyCode === 89 || keyCode === 90)) {\n          t.semanticCode(false, true);\n          t.$c.trigger('tbwchange');\n        } else if (!ctrl && keyCode !== 17) {\n          var compositionEndIE = t.isIE ? e.type === 'compositionend' : true;\n          t.semanticCode(false, compositionEndIE && keyCode === 13);\n          t.$c.trigger('tbwchange');\n        } else if (typeof e.which === 'undefined') {\n          t.semanticCode(false, false, true);\n        }\n        setTimeout(function () {\n          ctrl = false;\n        }, 50);\n      }).on('mouseup keydown keyup', function (e) {\n        if (!e.ctrlKey && !e.metaKey || e.altKey) {\n          setTimeout(function () {\n            // \"hold on\" to the ctrl key for 50ms\n            ctrl = false;\n          }, 50);\n        }\n        clearTimeout(debounceButtonPaneStatus);\n        debounceButtonPaneStatus = setTimeout(function () {\n          t.updateButtonPaneStatus();\n        }, 50);\n      }).on('focus blur', function (e) {\n        if (e.type === 'blur') {\n          t.clearButtonPaneStatus();\n        }\n        t.$c.trigger('tbw' + e.type);\n        if (t.o.autogrowOnEnter) {\n          if (t.autogrowOnEnterDontClose) {\n            return;\n          }\n          if (e.type === 'focus') {\n            t.autogrowOnEnterWasFocused = true;\n            t.autogrowEditorOnEnter();\n          } else if (!t.o.autogrow) {\n            t.$ed.css({\n              height: t.$ed.css('min-height')\n            });\n            t.$c.trigger('tbwresize');\n          }\n        }\n      }).on('keyup focus', function () {\n        if (!t.$ta.val().match(/<.*>/) && !t.$ed.html().match(/<.*>/)) {\n          setTimeout(function () {\n            var block = t.isIE ? '<p>' : 'p';\n            t.doc.execCommand('formatBlock', false, block);\n            t.syncCode();\n          }, 0);\n        }\n      }).on('cut drop', function () {\n        setTimeout(function () {\n          t.semanticCode(false, true);\n          t.$c.trigger('tbwchange');\n        }, 0);\n      }).on('paste', function (e) {\n        if (t.o.removeformatPasted) {\n          e.preventDefault();\n          if (window.getSelection && window.getSelection().deleteFromDocument) {\n            window.getSelection().deleteFromDocument();\n          }\n          try {\n            // IE\n            var text = window.clipboardData.getData('Text');\n            try {\n              // <= IE10\n              t.doc.selection.createRange().pasteHTML(text);\n            } catch (c) {\n              // IE 11\n              t.doc.getSelection().getRangeAt(0).insertNode(t.doc.createTextNode(text));\n            }\n            t.$c.trigger('tbwchange', e);\n          } catch (d) {\n            // Not IE\n            t.execCmd('insertText', (e.originalEvent || e).clipboardData.getData('text/plain'));\n          }\n        }\n\n        // Call pasteHandlers\n        $.each(t.pasteHandlers, function (i, pasteHandler) {\n          pasteHandler(e);\n        });\n        setTimeout(function () {\n          t.semanticCode(false, true);\n          t.$c.trigger('tbwpaste', e);\n          t.$c.trigger('tbwchange');\n        }, 0);\n      });\n      t.$ta.on('keyup', function () {\n        t.$c.trigger('tbwchange');\n      }).on('paste', function () {\n        setTimeout(function () {\n          t.$c.trigger('tbwchange');\n        }, 0);\n      });\n      $(t.doc.body).on('keydown.' + t.eventNamespace, function (e) {\n        if (e.which === 27 && $('.' + prefix + 'modal-box').length >= 1) {\n          t.closeModal();\n          return false;\n        }\n      });\n    },\n    //autogrow when entering logic\n    autogrowEditorOnEnter: function () {\n      var t = this;\n      t.$ed.removeClass('autogrow-on-enter');\n      var oldHeight = t.$ed[0].clientHeight;\n      t.$ed.height('auto');\n      var totalHeight = t.$ed[0].scrollHeight;\n      t.$ed.addClass('autogrow-on-enter');\n      if (oldHeight !== totalHeight) {\n        t.$ed.height(oldHeight);\n        setTimeout(function () {\n          t.$ed.css({\n            height: totalHeight\n          });\n          t.$c.trigger('tbwresize');\n        }, 0);\n      }\n    },\n    // Build button pane, use o.btns option\n    buildBtnPane: function () {\n      var t = this,\n        prefix = t.o.prefix;\n      var $btnPane = t.$btnPane = $('<div/>', {\n        class: prefix + 'button-pane'\n      });\n      $.each(t.o.btns, function (i, btnGrp) {\n        if (!$.isArray(btnGrp)) {\n          btnGrp = [btnGrp];\n        }\n        var $btnGroup = $('<div/>', {\n          class: prefix + 'button-group ' + (btnGrp.indexOf('fullscreen') >= 0 ? prefix + 'right' : '')\n        });\n        $.each(btnGrp, function (i, btn) {\n          try {\n            // Prevent buildBtn error\n            if (t.isSupportedBtn(btn)) {\n              // It's a supported button\n              $btnGroup.append(t.buildBtn(btn));\n            }\n          } catch (c) {}\n        });\n        if ($btnGroup.html().trim().length > 0) {\n          $btnPane.append($btnGroup);\n        }\n      });\n      t.$box.prepend($btnPane);\n    },\n    // Build a button and his action\n    buildBtn: function (btnName) {\n      // btnName is name of the button\n      var t = this,\n        prefix = t.o.prefix,\n        btn = t.btnsDef[btnName],\n        isDropdown = btn.dropdown,\n        hasIcon = btn.hasIcon != null ? btn.hasIcon : true,\n        textDef = t.lang[btnName] || btnName,\n        $btn = $('<button/>', {\n          type: 'button',\n          class: prefix + btnName + '-button ' + (btn.class || '') + (!hasIcon ? ' ' + prefix + 'textual-button' : ''),\n          html: t.hasSvg && hasIcon ? '<svg><use xlink:href=\"' + t.svgPath + '#' + prefix + (btn.ico || btnName).replace(/([A-Z]+)/g, '-$1').toLowerCase() + '\"/></svg>' : t.hideButtonTexts ? '' : btn.text || btn.title || t.lang[btnName] || btnName,\n          title: (btn.title || btn.text || textDef) + (btn.key ? ' (' + (t.isMac ? 'Cmd' : 'Ctrl') + ' + ' + btn.key + ')' : ''),\n          tabindex: -1,\n          mousedown: function () {\n            if (!isDropdown || $('.' + btnName + '-' + prefix + 'dropdown', t.$box).is(':hidden')) {\n              $('body', t.doc).trigger('mousedown');\n            }\n            if ((t.$btnPane.hasClass(prefix + 'disable') || t.$box.hasClass(prefix + 'disabled')) && !$(this).hasClass(prefix + 'active') && !$(this).hasClass(prefix + 'not-disable')) {\n              return false;\n            }\n            t.execCmd((isDropdown ? 'dropdown' : false) || btn.fn || btnName, btn.param || btnName, btn.forceCss);\n            return false;\n          }\n        });\n      if (isDropdown) {\n        $btn.addClass(prefix + 'open-dropdown');\n        var dropdownPrefix = prefix + 'dropdown',\n          dropdownOptions = {\n            // the dropdown\n            class: dropdownPrefix + '-' + btnName + ' ' + dropdownPrefix + ' ' + prefix + 'fixed-top ' + (btn.dropdownClass || '')\n          };\n        dropdownOptions['data-' + dropdownPrefix] = btnName;\n        var $dropdown = $('<div/>', dropdownOptions);\n        $.each(isDropdown, function (i, def) {\n          if (t.btnsDef[def] && t.isSupportedBtn(def)) {\n            $dropdown.append(t.buildSubBtn(def));\n          }\n        });\n        t.$box.append($dropdown.hide());\n      } else if (btn.key) {\n        t.keys[btn.key] = {\n          fn: btn.fn || btnName,\n          param: btn.param || btnName\n        };\n      }\n      if (!isDropdown) {\n        t.tagToButton[(btn.tag || btnName).toLowerCase()] = btnName;\n      }\n      return $btn;\n    },\n    // Build a button for dropdown menu\n    // @param n : name of the subbutton\n    buildSubBtn: function (btnName) {\n      var t = this,\n        prefix = t.o.prefix,\n        btn = t.btnsDef[btnName],\n        hasIcon = btn.hasIcon != null ? btn.hasIcon : true;\n      if (btn.key) {\n        t.keys[btn.key] = {\n          fn: btn.fn || btnName,\n          param: btn.param || btnName\n        };\n      }\n      t.tagToButton[(btn.tag || btnName).toLowerCase()] = btnName;\n      return $('<button/>', {\n        type: 'button',\n        class: prefix + btnName + '-dropdown-button ' + (btn.class || '') + (btn.ico ? ' ' + prefix + btn.ico + '-button' : ''),\n        html: t.hasSvg && hasIcon ? '<svg><use xlink:href=\"' + t.svgPath + '#' + prefix + (btn.ico || btnName).replace(/([A-Z]+)/g, '-$1').toLowerCase() + '\"/></svg>' + (btn.text || btn.title || t.lang[btnName] || btnName) : btn.text || btn.title || t.lang[btnName] || btnName,\n        title: btn.key ? '(' + (t.isMac ? 'Cmd' : 'Ctrl') + ' + ' + btn.key + ')' : null,\n        style: btn.style || null,\n        mousedown: function () {\n          $('body', t.doc).trigger('mousedown');\n          t.execCmd(btn.fn || btnName, btn.param || btnName, btn.forceCss);\n          return false;\n        }\n      });\n    },\n    // Check if button is supported\n    isSupportedBtn: function (btnName) {\n      try {\n        return this.btnsDef[btnName].isSupported();\n      } catch (e) {}\n      return true;\n    },\n    // Build overlay for modal box\n    buildOverlay: function () {\n      var t = this;\n      t.$overlay = $('<div/>', {\n        class: t.o.prefix + 'overlay'\n      }).appendTo(t.$box);\n      return t.$overlay;\n    },\n    showOverlay: function () {\n      var t = this;\n      $(window).trigger('scroll');\n      t.$overlay.fadeIn(200);\n      t.$box.addClass(t.o.prefix + 'box-blur');\n    },\n    hideOverlay: function () {\n      var t = this;\n      t.$overlay.fadeOut(50);\n      t.$box.removeClass(t.o.prefix + 'box-blur');\n    },\n    // Management of fixed button pane\n    fixedBtnPaneEvents: function () {\n      var t = this,\n        fixedFullWidth = t.o.fixedFullWidth,\n        $box = t.$box;\n      if (!t.o.fixedBtnPane) {\n        return;\n      }\n      t.isFixed = false;\n      $(window).on('scroll.' + t.eventNamespace + ' resize.' + t.eventNamespace, function () {\n        if (!$box) {\n          return;\n        }\n        t.syncCode();\n        var scrollTop = $(window).scrollTop(),\n          offset = $box.offset().top + 1,\n          $buttonPane = t.$btnPane,\n          buttonPaneOuterHeight = $buttonPane.outerHeight() - 2;\n        if (scrollTop - offset > 0 && scrollTop - offset - t.height < 0) {\n          if (!t.isFixed) {\n            t.isFixed = true;\n            $buttonPane.css({\n              position: 'fixed',\n              top: 0,\n              left: fixedFullWidth ? 0 : 'auto',\n              zIndex: 7\n            });\n            t.$box.css({\n              paddingTop: $buttonPane.height()\n            });\n          }\n          $buttonPane.css({\n            width: fixedFullWidth ? '100%' : $box.width() - 1\n          });\n          $('.' + t.o.prefix + 'fixed-top', $box).css({\n            position: fixedFullWidth ? 'fixed' : 'absolute',\n            top: fixedFullWidth ? buttonPaneOuterHeight : buttonPaneOuterHeight + (scrollTop - offset),\n            zIndex: 15\n          });\n        } else if (t.isFixed) {\n          t.isFixed = false;\n          $buttonPane.removeAttr('style');\n          t.$box.css({\n            paddingTop: 0\n          });\n          $('.' + t.o.prefix + 'fixed-top', $box).css({\n            position: 'absolute',\n            top: buttonPaneOuterHeight\n          });\n        }\n      });\n    },\n    // Disable editor\n    setDisabled: function (disable) {\n      var t = this,\n        prefix = t.o.prefix;\n      t.disabled = disable;\n      if (disable) {\n        t.$ta.attr('disabled', true);\n      } else {\n        t.$ta.removeAttr('disabled');\n      }\n      t.$box.toggleClass(prefix + 'disabled', disable);\n      t.$ed.attr('contenteditable', !disable);\n    },\n    // Destroy the editor\n    destroy: function () {\n      var t = this,\n        prefix = t.o.prefix;\n      if (t.isTextarea) {\n        t.$box.after(t.$ta.css({\n          height: ''\n        }).val(t.html()).removeClass(prefix + 'textarea').show());\n      } else {\n        t.$box.after(t.$ed.css({\n          height: ''\n        }).removeClass(prefix + 'editor').removeAttr('contenteditable').removeAttr('dir').html(t.html()).show());\n      }\n      t.$ed.off('dblclick', 'img');\n      t.destroyPlugins();\n      t.$box.remove();\n      t.$c.removeData('trumbowyg');\n      $('body').removeClass(prefix + 'body-fullscreen');\n      t.$c.trigger('tbwclose');\n      $(window).off('scroll.' + t.eventNamespace + ' resize.' + t.eventNamespace);\n      $(t.doc.body).off('keydown.' + t.eventNamespace);\n    },\n    // Empty the editor\n    empty: function () {\n      this.$ta.val('');\n      this.syncCode(true);\n    },\n    // Function call when click on viewHTML button\n    toggle: function () {\n      var t = this,\n        prefix = t.o.prefix;\n      if (t.o.autogrowOnEnter) {\n        t.autogrowOnEnterDontClose = !t.$box.hasClass(prefix + 'editor-hidden');\n      }\n      t.semanticCode(false, true);\n      t.$c.trigger('tbwchange');\n      setTimeout(function () {\n        t.doc.activeElement.blur();\n        t.$box.toggleClass(prefix + 'editor-hidden ' + prefix + 'editor-visible');\n        t.$btnPane.toggleClass(prefix + 'disable');\n        $('.' + prefix + 'viewHTML-button', t.$btnPane).toggleClass(prefix + 'active');\n        if (t.$box.hasClass(prefix + 'editor-visible')) {\n          t.$ta.attr('tabindex', -1);\n        } else {\n          t.$ta.removeAttr('tabindex');\n        }\n        if (t.o.autogrowOnEnter && !t.autogrowOnEnterDontClose) {\n          t.autogrowEditorOnEnter();\n        }\n      }, 0);\n    },\n    // Remove or add flags to span tags to remove Chrome generated spans\n    toggleSpan: function (addFlag) {\n      var t = this;\n      t.$ed.find('span').each(function () {\n        if (addFlag === true) {\n          $(this).attr('data-tbw-flag', true);\n        } else {\n          if ($(this).attr('data-tbw-flag')) {\n            $(this).removeAttr('data-tbw-flag');\n          } else {\n            $(this).contents().unwrap();\n          }\n        }\n      });\n    },\n    // Open dropdown when click on a button which open that\n    dropdown: function (name) {\n      var t = this,\n        $body = $('body', t.doc),\n        prefix = t.o.prefix,\n        $dropdown = $('[data-' + prefix + 'dropdown=' + name + ']', t.$box),\n        $btn = $('.' + prefix + name + '-button', t.$btnPane),\n        show = $dropdown.is(':hidden');\n      $body.trigger('mousedown');\n      if (show) {\n        var btnOffsetLeft = $btn.offset().left;\n        $btn.addClass(prefix + 'active');\n        $dropdown.css({\n          position: 'absolute',\n          top: $btn.offset().top - t.$btnPane.offset().top + $btn.outerHeight(),\n          left: t.o.fixedFullWidth && t.isFixed ? btnOffsetLeft : btnOffsetLeft - t.$btnPane.offset().left\n        }).show();\n        $(window).trigger('scroll');\n        $body.on('mousedown.' + t.eventNamespace, function (e) {\n          if (!$dropdown.is(e.target)) {\n            $('.' + prefix + 'dropdown', t.$box).hide();\n            $('.' + prefix + 'active', t.$btnPane).removeClass(prefix + 'active');\n            $body.off('mousedown.' + t.eventNamespace);\n          }\n        });\n      }\n    },\n    // HTML Code management\n    html: function (html) {\n      var t = this;\n      if (html != null) {\n        t.$ta.val(html);\n        t.syncCode(true);\n        t.$c.trigger('tbwchange');\n        return t;\n      }\n      return t.$ta.val();\n    },\n    syncTextarea: function () {\n      var t = this;\n      t.$ta.val(t.$ed.text().trim().length > 0 || t.$ed.find(t.o.tagsToKeep.join(',')).length > 0 ? t.$ed.html() : '');\n    },\n    syncCode: function (force) {\n      var t = this;\n      if (!force && t.$ed.is(':visible')) {\n        t.syncTextarea();\n      } else {\n        // wrap the content in a div it's easier to get the inner html\n        var html = $('<div>').html(t.$ta.val());\n        // scrub the html before loading into the doc\n        var safe = $('<div>').append(html);\n        $(t.o.tagsToRemove.join(','), safe).remove();\n        t.$ed.html(safe.contents().html());\n      }\n      if (t.o.autogrow) {\n        t.height = t.$ed.height();\n        if (t.height !== t.$ta.css('height')) {\n          t.$ta.css({\n            height: t.height\n          });\n          t.$c.trigger('tbwresize');\n        }\n      }\n      if (t.o.autogrowOnEnter) {\n        t.$ed.height('auto');\n        var totalHeight = t.autogrowOnEnterWasFocused ? t.$ed[0].scrollHeight : t.$ed.css('min-height');\n        if (totalHeight !== t.$ta.css('height')) {\n          t.$ed.css({\n            height: totalHeight\n          });\n          t.$c.trigger('tbwresize');\n        }\n      }\n    },\n    // Analyse and update to semantic code\n    // @param force : force to sync code from textarea\n    // @param full  : wrap text nodes in <p>\n    // @param keepRange  : leave selection range as it is\n    semanticCode: function (force, full, keepRange) {\n      var t = this;\n      t.saveRange();\n      t.syncCode(force);\n      var restoreRange = true;\n      if (t.range && t.range.collapsed) {\n        restoreRange = false;\n      }\n      if (t.o.semantic) {\n        t.semanticTag('b', t.o.semanticKeepAttributes);\n        t.semanticTag('i', t.o.semanticKeepAttributes);\n        t.semanticTag('s', t.o.semanticKeepAttributes);\n        t.semanticTag('strike', t.o.semanticKeepAttributes);\n        if (full) {\n          var inlineElementsSelector = t.o.inlineElementsSelector,\n            blockElementsSelector = ':not(' + inlineElementsSelector + ')';\n\n          // Wrap text nodes in span for easier processing\n          t.$ed.contents().filter(function () {\n            return this.nodeType === 3 && this.nodeValue.trim().length > 0;\n          }).wrap('<span data-tbw/>');\n\n          // Wrap groups of inline elements in paragraphs (recursive)\n          var wrapInlinesInParagraphsFrom = function ($from) {\n            if ($from.length !== 0) {\n              var $finalParagraph = $from.nextUntil(blockElementsSelector).addBack().wrapAll('<p/>').parent(),\n                $nextElement = $finalParagraph.nextAll(inlineElementsSelector).first();\n              $finalParagraph.next('br').remove();\n              wrapInlinesInParagraphsFrom($nextElement);\n            }\n          };\n          wrapInlinesInParagraphsFrom(t.$ed.children(inlineElementsSelector).first());\n          t.semanticTag('div', true);\n\n          // Get rid of temporary span's\n          $('[data-tbw]', t.$ed).contents().unwrap();\n\n          // Remove empty <p>\n          t.$ed.find('p:empty').remove();\n        }\n        if (!keepRange && restoreRange) {\n          t.restoreRange();\n        }\n        t.syncTextarea();\n      }\n    },\n    semanticTag: function (oldTag, copyAttributes, revert) {\n      var newTag,\n        t = this;\n      var tmpTag = oldTag;\n      if (this.o.semantic != null && typeof this.o.semantic === 'object' && this.o.semantic.hasOwnProperty(oldTag)) {\n        newTag = this.o.semantic[oldTag];\n      } else if (this.o.semantic === true && this.DEFAULT_SEMANTIC_MAP.hasOwnProperty(oldTag)) {\n        newTag = this.DEFAULT_SEMANTIC_MAP[oldTag];\n      } else {\n        return;\n      }\n      if (revert) {\n        oldTag = newTag;\n        newTag = tmpTag;\n      }\n      $(oldTag, this.$ed).each(function () {\n        var resetRange = false;\n        var $oldTag = $(this);\n        if ($oldTag.contents().length === 0) {\n          return false;\n        }\n        if (t.range && t.range.startContainer.parentNode === this) {\n          resetRange = true;\n        }\n        var $newTag = $('<' + newTag + '/>');\n        $newTag.insertBefore($oldTag);\n        if (copyAttributes) {\n          $.each($oldTag.prop('attributes'), function () {\n            $newTag.attr(this.name, this.value);\n          });\n        }\n        $newTag.html($oldTag.html());\n        $oldTag.remove();\n        if (resetRange === true) {\n          t.range.selectNodeContents($newTag.get(0));\n          t.range.collapse(false);\n        }\n      });\n    },\n    // Function call when user click on \"Insert Link\"\n    createLink: function () {\n      var t = this,\n        documentSelection = t.doc.getSelection(),\n        selectedRange = documentSelection.getRangeAt(0),\n        node = documentSelection.focusNode,\n        text = new XMLSerializer().serializeToString(selectedRange.cloneContents()) || selectedRange + '',\n        url,\n        title,\n        target,\n        linkDefaultTarget = t.o.linkTargets[0];\n      while (['A', 'DIV'].indexOf(node.nodeName) < 0) {\n        node = node.parentNode;\n      }\n      if (node && node.nodeName === 'A') {\n        var $a = $(node);\n        text = $a.text();\n        url = $a.attr('href');\n        if (!t.o.minimalLinks) {\n          title = $a.attr('title');\n          target = $a.attr('target') || linkDefaultTarget;\n        }\n        var range = t.doc.createRange();\n        range.selectNode(node);\n        documentSelection.removeAllRanges();\n        documentSelection.addRange(range);\n      }\n      t.saveRange();\n      var options = {\n        url: {\n          label: t.lang.linkUrl || 'URL',\n          required: true,\n          value: url\n        },\n        text: {\n          label: t.lang.text,\n          value: text\n        }\n      };\n      if (!t.o.minimalLinks) {\n        var targetOptions = t.o.linkTargets.reduce(function (options, optionValue) {\n          options[optionValue] = t.lang[optionValue];\n          return options;\n        }, {});\n        $.extend(options, {\n          title: {\n            label: t.lang.title,\n            value: title\n          },\n          target: {\n            label: t.lang.target,\n            value: target,\n            options: targetOptions\n          }\n        });\n      }\n      t.openModalInsert(t.lang.createLink, options, function (v) {\n        // v is value\n        var url = t.prependUrlPrefix(v.url);\n        if (!url.length) {\n          return false;\n        }\n        var link = $(['<a href=\"', url, '\">', v.text || v.url, '</a>'].join(''));\n        if (v.title) {\n          link.attr('title', v.title);\n        }\n        if (v.target || linkDefaultTarget) {\n          link.attr('target', v.target || linkDefaultTarget);\n        }\n        t.range.deleteContents();\n        t.range.insertNode(link[0]);\n        t.syncCode();\n        t.$c.trigger('tbwchange');\n        return true;\n      });\n    },\n    prependUrlPrefix: function (url) {\n      var t = this;\n      if (!t.urlPrefix) {\n        return url;\n      }\n      var VALID_LINK_PREFIX = /^([a-z][-+.a-z0-9]*:|\\/|#)/i;\n      if (VALID_LINK_PREFIX.test(url)) {\n        return url;\n      }\n      var SIMPLE_EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (SIMPLE_EMAIL_REGEX.test(url)) {\n        return 'mailto:' + url;\n      }\n      return t.urlPrefix + url;\n    },\n    unlink: function () {\n      var t = this,\n        documentSelection = t.doc.getSelection(),\n        node = documentSelection.focusNode;\n      if (documentSelection.isCollapsed) {\n        while (['A', 'DIV'].indexOf(node.nodeName) < 0) {\n          node = node.parentNode;\n        }\n        if (node && node.nodeName === 'A') {\n          var range = t.doc.createRange();\n          range.selectNode(node);\n          documentSelection.removeAllRanges();\n          documentSelection.addRange(range);\n        }\n      }\n      t.execCmd('unlink', undefined, undefined, true);\n    },\n    insertImage: function () {\n      var t = this;\n      t.saveRange();\n      var options = {\n        url: {\n          label: 'URL',\n          required: true\n        },\n        alt: {\n          label: t.lang.description,\n          value: t.getRangeText()\n        }\n      };\n      if (t.o.imageWidthModalEdit) {\n        options.width = {};\n      }\n      t.openModalInsert(t.lang.insertImage, options, function (v) {\n        // v are values\n        t.execCmd('insertImage', v.url, false, true);\n        var $img = $('img[src=\"' + v.url + '\"]:not([alt])', t.$box);\n        $img.attr('alt', v.alt);\n        if (t.o.imageWidthModalEdit) {\n          $img.attr({\n            width: v.width\n          });\n        }\n        t.syncCode();\n        t.$c.trigger('tbwchange');\n        return true;\n      });\n    },\n    fullscreen: function () {\n      var t = this,\n        prefix = t.o.prefix,\n        fullscreenCssClass = prefix + 'fullscreen',\n        fullscreenPlaceholderClass = fullscreenCssClass + '-placeholder',\n        isFullscreen,\n        editorHeight = t.$box.outerHeight();\n      t.$box.toggleClass(fullscreenCssClass);\n      isFullscreen = t.$box.hasClass(fullscreenCssClass);\n      if (isFullscreen) {\n        t.$box.before($('<div/>', {\n          class: fullscreenPlaceholderClass\n        }).css({\n          height: editorHeight\n        }));\n      } else {\n        $('.' + fullscreenPlaceholderClass).remove();\n      }\n      $('body').toggleClass(prefix + 'body-fullscreen', isFullscreen);\n      $(window).trigger('scroll');\n      t.$c.trigger('tbw' + (isFullscreen ? 'open' : 'close') + 'fullscreen');\n    },\n    /*\n     * Call method of trumbowyg if exist\n     * else try to call anonymous function\n     * and finally native execCommand\n     */\n    execCmd: function (cmd, param, forceCss, skipTrumbowyg) {\n      var t = this;\n      skipTrumbowyg = !!skipTrumbowyg || '';\n      if (cmd !== 'dropdown') {\n        t.$ed.focus();\n      }\n      if (cmd === 'strikethrough' && t.o.semantic) {\n        t.semanticTag('strike', t.o.semanticKeepAttributes, true); // browsers cannot undo e.g. <del> as they expect <strike>\n      }\n\n      try {\n        t.doc.execCommand('styleWithCSS', false, forceCss || false);\n      } catch (c) {}\n      try {\n        t[cmd + skipTrumbowyg](param);\n      } catch (c) {\n        try {\n          cmd(param);\n        } catch (e2) {\n          if (cmd === 'insertHorizontalRule') {\n            param = undefined;\n          } else if (cmd === 'formatBlock' && t.isIE) {\n            param = '<' + param + '>';\n          }\n          t.doc.execCommand(cmd, false, param);\n          t.syncCode();\n          t.semanticCode(false, true);\n          try {\n            var listId = window.getSelection().focusNode;\n            if (!$(window.getSelection().focusNode.parentNode).hasClass('trumbowyg-editor')) {\n              listId = window.getSelection().focusNode.parentNode;\n            }\n            var classes = t.o.tagClasses[param];\n            if (classes) {\n              $(listId).addClass(classes);\n            }\n          } catch (e) {}\n        }\n        if (cmd !== 'dropdown') {\n          t.updateButtonPaneStatus();\n          t.$c.trigger('tbwchange');\n        }\n      }\n    },\n    // Open a modal box\n    openModal: function (title, content, buildForm) {\n      var t = this,\n        prefix = t.o.prefix;\n      buildForm = buildForm !== false;\n\n      // No open a modal box when exist other modal box\n      if ($('.' + prefix + 'modal-box', t.$box).length > 0) {\n        return false;\n      }\n      if (t.o.autogrowOnEnter) {\n        t.autogrowOnEnterDontClose = true;\n      }\n      t.saveRange();\n      t.showOverlay();\n\n      // Disable all btnPane btns\n      t.$btnPane.addClass(prefix + 'disable');\n\n      // Build out of ModalBox, it's the mask for animations\n      var $modal = $('<div/>', {\n        class: prefix + 'modal ' + prefix + 'fixed-top'\n      }).css({\n        top: t.$box.offset().top + t.$btnPane.height(),\n        zIndex: 99999\n      }).appendTo($(t.doc.body));\n      var darkClass = prefix + 'dark';\n      if (t.$c.parents('.' + darkClass).length !== 0) {\n        $modal.addClass(darkClass);\n      }\n\n      // Click on overlay close modal by cancelling them\n      t.$overlay.one('click', function () {\n        $modal.trigger(CANCEL_EVENT);\n        return false;\n      });\n\n      // Build the form\n      var formOrContent;\n      if (buildForm) {\n        formOrContent = $('<form/>', {\n          action: '',\n          html: content\n        }).on('submit', function () {\n          $modal.trigger(CONFIRM_EVENT);\n          return false;\n        }).on('reset', function () {\n          $modal.trigger(CANCEL_EVENT);\n          return false;\n        }).on('submit reset', function () {\n          if (t.o.autogrowOnEnter) {\n            t.autogrowOnEnterDontClose = false;\n          }\n        });\n      } else {\n        formOrContent = content;\n      }\n\n      // Build ModalBox and animate to show them\n      var $box = $('<div/>', {\n        class: prefix + 'modal-box',\n        html: formOrContent\n      }).css({\n        top: '-' + t.$btnPane.outerHeight(),\n        opacity: 0,\n        paddingBottom: buildForm ? null : '5%'\n      }).appendTo($modal).animate({\n        top: 0,\n        opacity: 1\n      }, 100);\n\n      // Append title\n      if (title) {\n        $('<span/>', {\n          text: title,\n          class: prefix + 'modal-title'\n        }).prependTo($box);\n      }\n      if (buildForm) {\n        // Focus in modal box\n        $(':input:first', $box).focus();\n\n        // Append Confirm and Cancel buttons\n        t.buildModalBtn('submit', $box);\n        t.buildModalBtn('reset', $box);\n        $modal.height($box.outerHeight() + 10);\n      }\n      $(window).trigger('scroll');\n      t.$c.trigger('tbwmodalopen');\n      return $modal;\n    },\n    // @param n is name of modal\n    buildModalBtn: function (n, $modal) {\n      var t = this,\n        prefix = t.o.prefix;\n      return $('<button/>', {\n        class: prefix + 'modal-button ' + prefix + 'modal-' + n,\n        type: n,\n        text: t.lang[n] || n\n      }).appendTo($('form', $modal));\n    },\n    // close current modal box\n    closeModal: function () {\n      var t = this,\n        prefix = t.o.prefix;\n      t.$btnPane.removeClass(prefix + 'disable');\n      t.$overlay.off();\n\n      // Find the modal box\n      var $modalBox = $('.' + prefix + 'modal-box', $(t.doc.body));\n      $modalBox.animate({\n        top: '-' + $modalBox.height()\n      }, 100, function () {\n        $modalBox.parent().remove();\n        t.hideOverlay();\n        t.$c.trigger('tbwmodalclose');\n      });\n      t.restoreRange();\n    },\n    // Pre-formatted build and management modal\n    openModalInsert: function (title, fields, cmd) {\n      var t = this,\n        prefix = t.o.prefix,\n        lg = t.lang,\n        html = '',\n        idPrefix = prefix + 'form-' + Date.now() + '-';\n      $.each(fields, function (fieldName, field) {\n        var l = field.label || fieldName,\n          n = field.name || fieldName,\n          a = field.attributes || {},\n          fieldId = idPrefix + fieldName;\n        var attr = Object.keys(a).map(function (prop) {\n          return prop + '=\"' + a[prop] + '\"';\n        }).join(' ');\n        if (typeof field.type === 'function') {\n          if (!field.name) {\n            field.name = n;\n          }\n          html += field.type(field, fieldId, prefix, lg);\n          return;\n        }\n        html += '<div class=\"' + prefix + 'input-row\">';\n        html += '<div class=\"' + prefix + 'input-infos\"><label for=\"' + fieldId + '\"><span>' + (lg[l] ? lg[l] : l) + '</span></label></div>';\n        html += '<div class=\"' + prefix + 'input-html\">';\n        if ($.isPlainObject(field.options)) {\n          html += '<select name=\"target\">';\n          html += Object.keys(field.options).map(optionValue => {\n            return '<option value=\"' + optionValue + '\" ' + (optionValue === field.value ? 'selected' : '') + '>' + field.options[optionValue] + '</option>';\n          }).join('');\n          html += '</select>';\n        } else {\n          html += '<input id=\"' + fieldId + '\" type=\"' + (field.type || 'text') + '\" name=\"' + n + '\" ' + attr;\n          html += (field.type === 'checkbox' && field.value ? ' checked=\"checked\"' : '') + ' value=\"' + (field.value || '').replace(/\"/g, '&quot;') + '\">';\n        }\n        html += '</div></div>';\n      });\n      return t.openModal(title, html).on(CONFIRM_EVENT, function () {\n        var $form = $('form', $(this)),\n          valid = true,\n          values = {};\n        $.each(fields, function (fieldName, field) {\n          var n = field.name || fieldName;\n          var $field = $(':input[name=\"' + n + '\"]', $form),\n            inputType = $field[0].type;\n          switch (inputType.toLowerCase()) {\n            case 'checkbox':\n              values[n] = $field.is(':checked');\n              break;\n            case 'radio':\n              values[n] = $field.filter(':checked').val();\n              break;\n            default:\n              values[n] = $.trim($field.val());\n              break;\n          }\n          // Validate value\n          if (field.required && values[n] === '') {\n            valid = false;\n            t.addErrorOnModalField($field, t.lang.required);\n          } else if (field.pattern && !field.pattern.test(values[n])) {\n            valid = false;\n            t.addErrorOnModalField($field, field.patternError);\n          }\n        });\n        if (valid) {\n          t.restoreRange();\n          if (cmd(values, fields)) {\n            t.syncCode();\n            t.$c.trigger('tbwchange');\n            t.closeModal();\n            $(this).off(CONFIRM_EVENT);\n          }\n        }\n      }).one(CANCEL_EVENT, function () {\n        $(this).off(CONFIRM_EVENT);\n        t.closeModal();\n      });\n    },\n    addErrorOnModalField: function ($field, err) {\n      var prefix = this.o.prefix,\n        spanErrorClass = prefix + 'msg-error',\n        $row = $field.closest('.' + prefix + 'input-row');\n      $field.on('change keyup', function () {\n        $row.removeClass(prefix + 'input-error');\n        setTimeout(function () {\n          $row.find('.' + spanErrorClass).remove();\n        }, 150);\n      });\n      $row.addClass(prefix + 'input-error').find('.' + prefix + 'input-infos label').append($('<span/>', {\n        class: spanErrorClass,\n        text: err\n      }));\n    },\n    getDefaultImgDblClickHandler: function () {\n      var t = this;\n      return function () {\n        var $img = $(this),\n          src = $img.attr('src'),\n          base64 = '(Base64)';\n        if (src.indexOf('data:image') === 0) {\n          src = base64;\n        }\n        var options = {\n          url: {\n            label: 'URL',\n            value: src,\n            required: true\n          },\n          alt: {\n            label: t.lang.description,\n            value: $img.attr('alt')\n          }\n        };\n        if (t.o.imageWidthModalEdit) {\n          options.width = {\n            value: $img.attr('width') ? $img.attr('width') : ''\n          };\n        }\n        t.openModalInsert(t.lang.insertImage, options, function (v) {\n          if (v.url !== base64) {\n            $img.attr({\n              src: v.url\n            });\n          }\n          $img.attr({\n            alt: v.alt\n          });\n          if (t.o.imageWidthModalEdit) {\n            if (parseInt(v.width) > 0) {\n              $img.attr({\n                width: v.width\n              });\n            } else {\n              $img.removeAttr('width');\n            }\n          }\n          return true;\n        });\n        return false;\n      };\n    },\n    // Range management\n    saveRange: function () {\n      var t = this,\n        documentSelection = t.doc.getSelection();\n      t.range = null;\n      if (!documentSelection || !documentSelection.rangeCount) {\n        return;\n      }\n      var savedRange = t.range = documentSelection.getRangeAt(0),\n        range = t.doc.createRange(),\n        rangeStart;\n      range.selectNodeContents(t.$ed[0]);\n      range.setEnd(savedRange.startContainer, savedRange.startOffset);\n      rangeStart = (range + '').length;\n      t.metaRange = {\n        start: rangeStart,\n        end: rangeStart + (savedRange + '').length\n      };\n    },\n    restoreRange: function () {\n      var t = this,\n        metaRange = t.metaRange,\n        savedRange = t.range,\n        documentSelection = t.doc.getSelection(),\n        range;\n      if (!savedRange) {\n        return;\n      }\n      if (metaRange && metaRange.start !== metaRange.end) {\n        // Algorithm from http://jsfiddle.net/WeWy7/3/\n        var charIndex = 0,\n          nodeStack = [t.$ed[0]],\n          node,\n          foundStart = false,\n          stop = false;\n        range = t.doc.createRange();\n        while (!stop && (node = nodeStack.pop())) {\n          if (node.nodeType === 3) {\n            var nextCharIndex = charIndex + node.length;\n            if (!foundStart && metaRange.start >= charIndex && metaRange.start <= nextCharIndex) {\n              range.setStart(node, metaRange.start - charIndex);\n              foundStart = true;\n            }\n            if (foundStart && metaRange.end >= charIndex && metaRange.end <= nextCharIndex) {\n              range.setEnd(node, metaRange.end - charIndex);\n              stop = true;\n            }\n            charIndex = nextCharIndex;\n          } else {\n            var cn = node.childNodes,\n              i = cn.length;\n            while (i > 0) {\n              i -= 1;\n              nodeStack.push(cn[i]);\n            }\n          }\n        }\n      }\n\n      // Fix IE11 Error 'Could not complete the operation due to error 800a025e'.\n      // https://stackoverflow.com/questions/16160996/could-not-complete-the-operation-due-to-error-800a025e\n      try {\n        documentSelection.removeAllRanges();\n      } catch (e) {}\n      documentSelection.addRange(range || savedRange);\n    },\n    getRangeText: function () {\n      return this.range + '';\n    },\n    clearButtonPaneStatus: function () {\n      var t = this,\n        prefix = t.o.prefix,\n        activeClasses = prefix + 'active-button ' + prefix + 'active',\n        originalIconClass = prefix + 'original-icon';\n\n      // Reset all buttons and dropdown state\n      $('.' + prefix + 'active-button', t.$btnPane).removeClass(activeClasses);\n      $('.' + originalIconClass, t.$btnPane).each(function () {\n        $(this).find('svg use').attr('xlink:href', $(this).data(originalIconClass));\n      });\n    },\n    updateButtonPaneStatus: function () {\n      var t = this,\n        prefix = t.o.prefix,\n        activeClasses = prefix + 'active-button ' + prefix + 'active',\n        originalIconClass = prefix + 'original-icon',\n        tags = t.getTagsRecursive(t.doc.getSelection().focusNode);\n      t.clearButtonPaneStatus();\n      $.each(tags, function (i, tag) {\n        var btnName = t.tagToButton[tag.toLowerCase()],\n          $btn = $('.' + prefix + btnName + '-button', t.$btnPane);\n        if ($btn.length > 0) {\n          $btn.addClass(activeClasses);\n        } else {\n          try {\n            $btn = $('.' + prefix + 'dropdown .' + prefix + btnName + '-dropdown-button', t.$box);\n            var $btnSvgUse = $btn.find('svg use'),\n              dropdownBtnName = $btn.parent().data(prefix + 'dropdown'),\n              $dropdownBtn = $('.' + prefix + dropdownBtnName + '-button', t.$box),\n              $dropdownBtnSvgUse = $dropdownBtn.find('svg use');\n\n            // Highlight the dropdown button\n            $dropdownBtn.addClass(activeClasses);\n\n            // Switch dropdown icon to the active sub-icon one\n            if (t.o.changeActiveDropdownIcon && $btnSvgUse.length > 0) {\n              // Save original icon\n              $dropdownBtn.addClass(originalIconClass).data(originalIconClass, $dropdownBtnSvgUse.attr('xlink:href'));\n\n              // Put the active sub-button's icon\n              $dropdownBtnSvgUse.attr('xlink:href', $btnSvgUse.attr('xlink:href'));\n            }\n          } catch (e) {}\n        }\n      });\n    },\n    getTagsRecursive: function (element, tags) {\n      var t = this;\n      tags = tags || (element && element.tagName ? [element.tagName] : []);\n      if (element && element.parentNode) {\n        element = element.parentNode;\n      } else {\n        return tags;\n      }\n      var tag = element.tagName;\n      if (tag === 'DIV') {\n        return tags;\n      }\n      if (tag === 'P' && element.style.textAlign !== '') {\n        tags.push(element.style.textAlign);\n      }\n      $.each(t.tagHandlers, function (i, tagHandler) {\n        tags = tags.concat(tagHandler(element, t));\n      });\n      tags.push(tag);\n      return t.getTagsRecursive(element, tags).filter(function (tag) {\n        return tag != null;\n      });\n    },\n    // Plugins\n    initPlugins: function () {\n      var t = this;\n      t.loadedPlugins = [];\n      $.each($.trumbowyg.plugins, function (name, plugin) {\n        if (!plugin.shouldInit || plugin.shouldInit(t)) {\n          plugin.init(t);\n          if (plugin.tagHandler) {\n            t.tagHandlers.push(plugin.tagHandler);\n          }\n          t.loadedPlugins.push(plugin);\n        }\n      });\n    },\n    destroyPlugins: function () {\n      var t = this;\n      $.each(this.loadedPlugins, function (i, plugin) {\n        if (plugin.destroy) {\n          plugin.destroy(t);\n        }\n      });\n    }\n  };\n})(navigator, window, document, jQuery);","map":null,"metadata":{},"sourceType":"module"}