{"ast":null,"code":"'use strict';\n\nvar _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar AuthError = require('./AuthError');\nvar fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError'); // Remove the trailing slash so we can always safely append /xyz.\n\nfunction stripSlash(url) {\n  return url.replace(/\\/$/, '');\n}\nmodule.exports = (_temp = _class = /*#__PURE__*/function () {\n  function RequestClient(uppy, opts) {\n    this.uppy = uppy;\n    this.opts = opts;\n    this.onReceiveResponse = this.onReceiveResponse.bind(this);\n    this.allowedHeaders = ['accept', 'content-type', 'uppy-auth-token'];\n    this.preflightDone = false;\n  }\n  var _proto = RequestClient.prototype;\n  _proto.headers = function headers() {\n    var userHeaders = this.opts.companionHeaders || this.opts.serverHeaders || {};\n    return Promise.resolve(_extends({}, this.defaultHeaders, userHeaders));\n  };\n  _proto._getPostResponseFunc = function _getPostResponseFunc(skip) {\n    var _this = this;\n    return function (response) {\n      if (!skip) {\n        return _this.onReceiveResponse(response);\n      }\n      return response;\n    };\n  };\n  _proto.onReceiveResponse = function onReceiveResponse(response) {\n    var state = this.uppy.getState();\n    var companion = state.companion || {};\n    var host = this.opts.companionUrl;\n    var headers = response.headers; // Store the self-identified domain name for the Companion instance we just hit.\n\n    if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {\n      var _extends2;\n      this.uppy.setState({\n        companion: _extends({}, companion, (_extends2 = {}, _extends2[host] = headers.get('i-am'), _extends2))\n      });\n    }\n    return response;\n  };\n  _proto._getUrl = function _getUrl(url) {\n    if (/^(https?:|)\\/\\//.test(url)) {\n      return url;\n    }\n    return this.hostname + \"/\" + url;\n  };\n  _proto._json = function _json(res) {\n    if (res.status === 401) {\n      throw new AuthError();\n    }\n    if (res.status < 200 || res.status > 300) {\n      var errMsg = \"Failed request with status: \" + res.status + \". \" + res.statusText;\n      return res.json().then(function (errData) {\n        errMsg = errData.message ? errMsg + \" message: \" + errData.message : errMsg;\n        errMsg = errData.requestId ? errMsg + \" request-Id: \" + errData.requestId : errMsg;\n        throw new Error(errMsg);\n      }).catch(function () {\n        throw new Error(errMsg);\n      });\n    }\n    return res.json();\n  };\n  _proto.preflight = function preflight(path) {\n    var _this2 = this;\n    if (this.preflightDone) {\n      return Promise.resolve(this.allowedHeaders.slice());\n    }\n    return fetch(this._getUrl(path), {\n      method: 'OPTIONS'\n    }).then(function (response) {\n      if (response.headers.has('access-control-allow-headers')) {\n        _this2.allowedHeaders = response.headers.get('access-control-allow-headers').split(',').map(function (headerName) {\n          return headerName.trim().toLowerCase();\n        });\n      }\n      _this2.preflightDone = true;\n      return _this2.allowedHeaders.slice();\n    }).catch(function (err) {\n      _this2.uppy.log(\"[CompanionClient] unable to make preflight request \" + err, 'warning');\n      _this2.preflightDone = true;\n      return _this2.allowedHeaders.slice();\n    });\n  };\n  _proto.preflightAndHeaders = function preflightAndHeaders(path) {\n    var _this3 = this;\n    return Promise.all([this.preflight(path), this.headers()]).then(function (_ref) {\n      var allowedHeaders = _ref[0],\n        headers = _ref[1];\n      // filter to keep only allowed Headers\n      Object.keys(headers).forEach(function (header) {\n        if (allowedHeaders.indexOf(header.toLowerCase()) === -1) {\n          _this3.uppy.log(\"[CompanionClient] excluding unallowed header \" + header);\n          delete headers[header];\n        }\n      });\n      return headers;\n    });\n  };\n  _proto.get = function get(path, skipPostResponse) {\n    var _this4 = this;\n    return this.preflightAndHeaders(path).then(function (headers) {\n      return fetchWithNetworkError(_this4._getUrl(path), {\n        method: 'get',\n        headers: headers,\n        credentials: _this4.opts.companionCookiesRule || 'same-origin'\n      });\n    }).then(this._getPostResponseFunc(skipPostResponse)).then(function (res) {\n      return _this4._json(res);\n    }).catch(function (err) {\n      if (!err.isAuthError) {\n        err.message = \"Could not get \" + _this4._getUrl(path) + \". \" + err.message;\n      }\n      return Promise.reject(err);\n    });\n  };\n  _proto.post = function post(path, data, skipPostResponse) {\n    var _this5 = this;\n    return this.preflightAndHeaders(path).then(function (headers) {\n      return fetchWithNetworkError(_this5._getUrl(path), {\n        method: 'post',\n        headers: headers,\n        credentials: _this5.opts.companionCookiesRule || 'same-origin',\n        body: JSON.stringify(data)\n      });\n    }).then(this._getPostResponseFunc(skipPostResponse)).then(function (res) {\n      return _this5._json(res);\n    }).catch(function (err) {\n      if (!err.isAuthError) {\n        err.message = \"Could not post \" + _this5._getUrl(path) + \". \" + err.message;\n      }\n      return Promise.reject(err);\n    });\n  };\n  _proto.delete = function _delete(path, data, skipPostResponse) {\n    var _this6 = this;\n    return this.preflightAndHeaders(path).then(function (headers) {\n      return fetchWithNetworkError(_this6.hostname + \"/\" + path, {\n        method: 'delete',\n        headers: headers,\n        credentials: _this6.opts.companionCookiesRule || 'same-origin',\n        body: data ? JSON.stringify(data) : null\n      });\n    }).then(this._getPostResponseFunc(skipPostResponse)).then(function (res) {\n      return _this6._json(res);\n    }).catch(function (err) {\n      if (!err.isAuthError) {\n        err.message = \"Could not delete \" + _this6._getUrl(path) + \". \" + err.message;\n      }\n      return Promise.reject(err);\n    });\n  };\n  _createClass(RequestClient, [{\n    key: \"hostname\",\n    get: function get() {\n      var _this$uppy$getState = this.uppy.getState(),\n        companion = _this$uppy$getState.companion;\n      var host = this.opts.companionUrl;\n      return stripSlash(companion && companion[host] ? companion[host] : host);\n    }\n  }, {\n    key: \"defaultHeaders\",\n    get: function get() {\n      return {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Uppy-Versions': \"@uppy/companion-client=\" + RequestClient.VERSION\n      };\n    }\n  }]);\n  return RequestClient;\n}(), _class.VERSION = \"1.10.2\", _temp);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}