{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nlet _Symbol$for;\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\n/**\n * This plugin is currently a A Big Hackâ„¢! The core reason for that is how this plugin\n * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,\n * including preprocessing, uploading, and postprocessing steps. This plugin initially\n * was designed to do its work in a preprocessing step, and let XHRUpload deal with the\n * actual file upload as an uploading step. However, Uppy runs steps on all files at once,\n * sequentially: first, all files go through a preprocessing step, then, once they are all\n * done, they go through the uploading step.\n *\n * For S3, this causes severely broken behaviour when users upload many files. The\n * preprocessing step will request S3 upload URLs that are valid for a short time only,\n * but it has to do this for _all_ files, which can take a long time if there are hundreds\n * or even thousands of files. By the time the uploader step starts, the first URLs may\n * already have expired. If not, the uploading might take such a long time that later URLs\n * will expire before some files can be uploaded.\n *\n * The long-term solution to this problem is to change the upload pipeline so that files\n * can be sent to the next step individually. That requires a breaking change, so it is\n * planned for some future Uppy version.\n *\n * In the mean time, this plugin is stuck with a hackier approach: the necessary parts\n * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload\n * class, and this plugin calls into it immediately once it receives an upload URL.\n * This isn't as nicely modular as we'd like and requires us to maintain two copies of\n * the XHRUpload code, but at least it's not horrifically broken :)\n */\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js';\nimport { RateLimitedQueue, internalRateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue';\nimport { RequestClient } from '@uppy/companion-client';\nconst packageJson = {\n  \"version\": \"3.0.4\"\n};\nimport MiniXHRUpload from './MiniXHRUpload.js';\nimport isXml from './isXml.js';\nimport locale from './locale.js';\nfunction resolveUrl(origin, link) {\n  return new URL(link, origin || undefined).toString();\n}\n/**\n * Get the contents of a named tag in an XML source string.\n *\n * @param {string} source - The XML source string.\n * @param {string} tagName - The name of the tag.\n * @returns {string} The contents of the tag, or the empty string if the tag does not exist.\n */\n\nfunction getXmlValue(source, tagName) {\n  const start = source.indexOf(`<${tagName}>`);\n  const end = source.indexOf(`</${tagName}>`, start);\n  return start !== -1 && end !== -1 ? source.slice(start + tagName.length + 2, end) : '';\n}\nfunction assertServerError(res) {\n  if (res && res.error) {\n    const error = new Error(res.message);\n    Object.assign(error, res.error);\n    throw error;\n  }\n  return res;\n}\nfunction validateParameters(file, params) {\n  const valid = params != null && typeof params.url === 'string' && (typeof params.fields === 'object' || params.fields == null);\n  if (!valid) {\n    const err = new TypeError(`AwsS3: got incorrect result from 'getUploadParameters()' for file '${file.name}', expected an object '{ url, method, fields, headers }' but got '${JSON.stringify(params)}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`);\n    throw err;\n  }\n  const methodIsValid = params.method == null || /^p(u|os)t$/i.test(params.method);\n  if (!methodIsValid) {\n    const err = new TypeError(`AwsS3: got incorrect method from 'getUploadParameters()' for file '${file.name}', expected  'put' or 'post' but got '${params.method}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`);\n    throw err;\n  }\n} // Get the error data from a failed XMLHttpRequest instance.\n// `content` is the S3 response as a string.\n// `xhr` is the XMLHttpRequest instance.\n\nfunction defaultGetResponseError(content, xhr) {\n  // If no response, we don't have a specific error message, use the default.\n  if (!isXml(content, xhr)) {\n    return undefined;\n  }\n  const error = getXmlValue(content, 'Message');\n  return new Error(error);\n} // warning deduplication flag: see `getResponseData()` XHRUpload option definition\n\nlet warnedSuccessActionStatus = false;\nvar _client = /*#__PURE__*/_classPrivateFieldLooseKey(\"client\");\nvar _requests = /*#__PURE__*/_classPrivateFieldLooseKey(\"requests\");\nvar _uploader = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploader\");\nvar _handleUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"handleUpload\");\nvar _setCompanionHeaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"setCompanionHeaders\");\n_Symbol$for = Symbol.for('uppy test: getClient');\nexport default class AwsS3 extends BasePlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    Object.defineProperty(this, _client, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _requests, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _uploader, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _handleUpload, {\n      writable: true,\n      value: fileIDs => {\n        /**\n         * keep track of `getUploadParameters()` responses\n         * so we can cancel the calls individually using just a file ID\n         *\n         * @type {Record<string, import('@uppy/utils/lib/RateLimitedQueue').AbortablePromise<unknown>>}\n         */\n        const paramsPromises = Object.create(null);\n        function onremove(file) {\n          var _paramsPromises$id;\n          const id = file.id;\n          (_paramsPromises$id = paramsPromises[id]) == null ? void 0 : _paramsPromises$id.abort();\n        }\n        this.uppy.on('file-removed', onremove);\n        fileIDs.forEach(id => {\n          const file = this.uppy.getFile(id);\n          this.uppy.emit('upload-started', file);\n        });\n        const getUploadParameters = _classPrivateFieldLooseBase(this, _requests)[_requests].wrapPromiseFunction(file => {\n          return this.opts.getUploadParameters(file);\n        });\n        const numberOfFiles = fileIDs.length;\n        return Promise.allSettled(fileIDs.map((id, index) => {\n          paramsPromises[id] = getUploadParameters(this.uppy.getFile(id));\n          return paramsPromises[id].then(params => {\n            delete paramsPromises[id];\n            const file = this.uppy.getFile(id);\n            validateParameters(file, params);\n            const _params$method = params.method,\n              method = _params$method === void 0 ? 'post' : _params$method,\n              url = params.url,\n              fields = params.fields,\n              headers = params.headers;\n            const xhrOpts = {\n              method,\n              formData: method.toLowerCase() === 'post',\n              endpoint: url,\n              allowedMetaFields: fields ? Object.keys(fields) : []\n            };\n            if (headers) {\n              xhrOpts.headers = headers;\n            }\n            this.uppy.setFileState(file.id, {\n              meta: _objectSpread(_objectSpread({}, file.meta), fields),\n              xhrUpload: xhrOpts\n            });\n            return _classPrivateFieldLooseBase(this, _uploader)[_uploader].uploadFile(file.id, index, numberOfFiles);\n          }).catch(error => {\n            delete paramsPromises[id];\n            const file = this.uppy.getFile(id);\n            this.uppy.emit('upload-error', file, error);\n            return Promise.reject(error);\n          });\n        })).finally(() => {\n          // cleanup.\n          this.uppy.off('file-removed', onremove);\n        });\n      }\n    });\n    Object.defineProperty(this, _setCompanionHeaders, {\n      writable: true,\n      value: () => {\n        _classPrivateFieldLooseBase(this, _client)[_client].setCompanionHeaders(this.opts.companionHeaders);\n        return Promise.resolve();\n      }\n    });\n    this.type = 'uploader';\n    this.id = this.opts.id || 'AwsS3';\n    this.title = 'AWS S3';\n    this.defaultLocale = locale;\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      allowedMetaFields: [],\n      // have to opt in\n      getUploadParameters: this.getUploadParameters.bind(this),\n      companionHeaders: {}\n    };\n    this.opts = _objectSpread(_objectSpread({}, defaultOptions), opts);\n    if ((opts == null ? void 0 : opts.allowedMetaFields) === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.');\n    } // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload\n\n    this.i18nInit();\n    _classPrivateFieldLooseBase(this, _client)[_client] = new RequestClient(uppy, opts);\n    _classPrivateFieldLooseBase(this, _requests)[_requests] = new RateLimitedQueue(this.opts.limit);\n  }\n  [_Symbol$for]() {\n    return _classPrivateFieldLooseBase(this, _client)[_client];\n  } // TODO: remove getter and setter for #client on the next major release\n\n  get client() {\n    return _classPrivateFieldLooseBase(this, _client)[_client];\n  }\n  set client(client) {\n    _classPrivateFieldLooseBase(this, _client)[_client] = client;\n  }\n  getUploadParameters(file) {\n    if (!this.opts.companionUrl) {\n      throw new Error('Expected a `companionUrl` option containing a Companion address.');\n    }\n    const filename = file.meta.name;\n    const type = file.meta.type;\n    const metadata = Object.fromEntries(this.opts.allowedMetaFields.filter(key => file.meta[key] != null).map(key => [`metadata[${key}]`, file.meta[key].toString()]));\n    const query = new URLSearchParams(_objectSpread({\n      filename,\n      type\n    }, metadata));\n    return _classPrivateFieldLooseBase(this, _client)[_client].get(`s3/params?${query}`).then(assertServerError);\n  }\n  install() {\n    const uppy = this.uppy;\n    uppy.addPreProcessor(_classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]);\n    uppy.addUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]); // Get the response data from a successful XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n\n    function defaultGetResponseData(content, xhr) {\n      const opts = this; // If no response, we've hopefully done a PUT request to the file\n      // in the bucket on its full URL.\n\n      if (!isXml(content, xhr)) {\n        if (opts.method.toUpperCase() === 'POST') {\n          if (!warnedSuccessActionStatus) {\n            uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning');\n            warnedSuccessActionStatus = true;\n          } // The responseURL won't contain the object key. Give up.\n\n          return {\n            location: null\n          };\n        } // responseURL is not available in older browsers.\n\n        if (!xhr.responseURL) {\n          return {\n            location: null\n          };\n        } // Trim the query string because it's going to be a bunch of presign\n        // parameters for a PUT requestâ€”doing a GET request with those will\n        // always result in an error\n\n        return {\n          location: xhr.responseURL.replace(/\\?.*$/, '')\n        };\n      }\n      return {\n        // Some S3 alternatives do not reply with an absolute URL.\n        // Eg DigitalOcean Spaces uses /$bucketName/xyz\n        location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),\n        bucket: getXmlValue(content, 'Bucket'),\n        key: getXmlValue(content, 'Key'),\n        etag: getXmlValue(content, 'ETag')\n      };\n    }\n    const xhrOptions = {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      // Share the rate limiting queue with XHRUpload.\n      [internalRateLimitedQueue]: _classPrivateFieldLooseBase(this, _requests)[_requests],\n      responseType: 'text',\n      getResponseData: this.opts.getResponseData || defaultGetResponseData,\n      getResponseError: defaultGetResponseError\n    }; // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload\n\n    xhrOptions.i18n = this.i18n; // Revert to `uppy.use(XHRUpload)` once the big comment block at the top of\n    // this file is solved\n\n    _classPrivateFieldLooseBase(this, _uploader)[_uploader] = new MiniXHRUpload(uppy, xhrOptions);\n  }\n  uninstall() {\n    this.uppy.removePreProcessor(_classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]);\n    this.uppy.removeUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n}\nAwsS3.VERSION = packageJson.version;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}