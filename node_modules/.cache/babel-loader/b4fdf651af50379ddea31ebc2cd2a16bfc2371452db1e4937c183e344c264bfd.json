{"ast":null,"code":"'use strict';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar qsStringify = require('qs-stringify');\nvar URL = require('url-parse');\nvar RequestClient = require('./RequestClient');\nvar tokenStorage = require('./tokenStorage');\nvar _getName = function _getName(id) {\n  return id.split('-').map(function (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }).join(' ');\n};\nmodule.exports = /*#__PURE__*/function (_RequestClient) {\n  _inheritsLoose(Provider, _RequestClient);\n  function Provider(uppy, opts) {\n    var _this;\n    _this = _RequestClient.call(this, uppy, opts) || this;\n    _this.provider = opts.provider;\n    _this.id = _this.provider;\n    _this.name = _this.opts.name || _getName(_this.id);\n    _this.pluginId = _this.opts.pluginId;\n    _this.tokenKey = \"companion-\" + _this.pluginId + \"-auth-token\";\n    _this.companionKeysParams = _this.opts.companionKeysParams;\n    _this.preAuthToken = null;\n    return _this;\n  }\n  var _proto = Provider.prototype;\n  _proto.headers = function headers() {\n    var _this2 = this;\n    return Promise.all([_RequestClient.prototype.headers.call(this), this.getAuthToken()]).then(function (_ref) {\n      var headers = _ref[0],\n        token = _ref[1];\n      var authHeaders = {};\n      if (token) {\n        authHeaders['uppy-auth-token'] = token;\n      }\n      if (_this2.companionKeysParams) {\n        authHeaders['uppy-credentials-params'] = btoa(JSON.stringify({\n          params: _this2.companionKeysParams\n        }));\n      }\n      return _extends({}, headers, authHeaders);\n    });\n  };\n  _proto.onReceiveResponse = function onReceiveResponse(response) {\n    response = _RequestClient.prototype.onReceiveResponse.call(this, response);\n    var plugin = this.uppy.getPlugin(this.pluginId);\n    var oldAuthenticated = plugin.getPluginState().authenticated;\n    var authenticated = oldAuthenticated ? response.status !== 401 : response.status < 400;\n    plugin.setPluginState({\n      authenticated: authenticated\n    });\n    return response;\n  } // @todo(i.olarewaju) consider whether or not this method should be exposed\n  ;\n\n  _proto.setAuthToken = function setAuthToken(token) {\n    return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey, token);\n  };\n  _proto.getAuthToken = function getAuthToken() {\n    return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey);\n  };\n  _proto.authUrl = function authUrl(queries) {\n    if (queries === void 0) {\n      queries = {};\n    }\n    if (this.preAuthToken) {\n      queries.uppyPreAuthToken = this.preAuthToken;\n    }\n    var strigifiedQueries = qsStringify(queries);\n    strigifiedQueries = strigifiedQueries ? \"?\" + strigifiedQueries : strigifiedQueries;\n    return this.hostname + \"/\" + this.id + \"/connect\" + strigifiedQueries;\n  };\n  _proto.fileUrl = function fileUrl(id) {\n    return this.hostname + \"/\" + this.id + \"/get/\" + id;\n  };\n  _proto.fetchPreAuthToken = function fetchPreAuthToken() {\n    var _this3 = this;\n    if (!this.companionKeysParams) {\n      return Promise.resolve();\n    }\n    return this.post(this.id + \"/preauth/\", {\n      params: this.companionKeysParams\n    }).then(function (res) {\n      _this3.preAuthToken = res.token;\n    }).catch(function (err) {\n      _this3.uppy.log(\"[CompanionClient] unable to fetch preAuthToken \" + err, 'warning');\n    });\n  };\n  _proto.list = function list(directory) {\n    return this.get(this.id + \"/list/\" + (directory || ''));\n  };\n  _proto.logout = function logout() {\n    var _this4 = this;\n    return this.get(this.id + \"/logout\").then(function (response) {\n      return Promise.all([response, _this4.uppy.getPlugin(_this4.pluginId).storage.removeItem(_this4.tokenKey)]);\n    }).then(function (_ref2) {\n      var response = _ref2[0];\n      return response;\n    });\n  };\n  Provider.initPlugin = function initPlugin(plugin, opts, defaultOpts) {\n    plugin.type = 'acquirer';\n    plugin.files = [];\n    if (defaultOpts) {\n      plugin.opts = _extends({}, defaultOpts, opts);\n    }\n    if (opts.serverUrl || opts.serverPattern) {\n      throw new Error('`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`');\n    }\n    if (opts.companionAllowedHosts) {\n      var pattern = opts.companionAllowedHosts; // validate companionAllowedHosts param\n\n      if (typeof pattern !== 'string' && !Array.isArray(pattern) && !(pattern instanceof RegExp)) {\n        throw new TypeError(plugin.id + \": the option \\\"companionAllowedHosts\\\" must be one of string, Array, RegExp\");\n      }\n      plugin.opts.companionAllowedHosts = pattern;\n    } else {\n      // does not start with https://\n      if (/^(?!https?:\\/\\/).*$/i.test(opts.companionUrl)) {\n        plugin.opts.companionAllowedHosts = \"https://\" + opts.companionUrl.replace(/^\\/\\//, '');\n      } else {\n        plugin.opts.companionAllowedHosts = new URL(opts.companionUrl).origin;\n      }\n    }\n    plugin.storage = plugin.opts.storage || tokenStorage;\n  };\n  return Provider;\n}(RequestClient);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}