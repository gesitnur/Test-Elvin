{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { UIPlugin } from '@uppy/core';\nimport { h } from 'preact';\nimport Editor from \"./Editor.js\";\nconst packageJson = {\n  \"version\": \"2.1.0\"\n};\nimport locale from './locale.js';\nexport default class ImageEditor extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.save = () => {\n      const saveBlobCallback = blob => {\n        const _this$getPluginState = this.getPluginState(),\n          currentImage = _this$getPluginState.currentImage;\n        this.uppy.setFileState(currentImage.id, {\n          data: blob,\n          size: blob.size,\n          preview: null\n        });\n        const updatedFile = this.uppy.getFile(currentImage.id);\n        this.uppy.emit('thumbnail:request', updatedFile);\n        this.setPluginState({\n          currentImage: updatedFile\n        });\n        this.uppy.emit('file-editor:complete', updatedFile);\n      };\n      const _this$getPluginState2 = this.getPluginState(),\n        currentImage = _this$getPluginState2.currentImage;\n      this.cropper.getCroppedCanvas(this.opts.cropperOptions.croppedCanvasOptions).toBlob(saveBlobCallback, currentImage.type, this.opts.quality);\n    };\n    this.storeCropperInstance = cropper => {\n      this.cropper = cropper;\n    };\n    this.selectFile = file => {\n      this.uppy.emit('file-editor:start', file);\n      this.setPluginState({\n        currentImage: file\n      });\n    };\n    this.id = this.opts.id || 'ImageEditor';\n    this.title = 'Image Editor';\n    this.type = 'editor';\n    this.defaultLocale = locale;\n    const defaultCropperOptions = {\n      viewMode: 1,\n      background: false,\n      autoCropArea: 1,\n      responsive: true,\n      croppedCanvasOptions: {}\n    };\n    const defaultActions = {\n      revert: true,\n      rotate: true,\n      granularRotate: true,\n      flip: true,\n      zoomIn: true,\n      zoomOut: true,\n      cropSquare: true,\n      cropWidescreen: true,\n      cropWidescreenVertical: true\n    };\n    const defaultOptions = {\n      quality: 0.8\n    };\n    this.opts = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), opts), {}, {\n      actions: _objectSpread(_objectSpread({}, defaultActions), opts.actions),\n      cropperOptions: _objectSpread(_objectSpread({}, defaultCropperOptions), opts.cropperOptions)\n    });\n    this.i18nInit();\n  } // eslint-disable-next-line class-methods-use-this\n\n  canEditFile(file) {\n    if (!file.type || file.isRemote) {\n      return false;\n    }\n    const fileTypeSpecific = file.type.split('/')[1];\n    if (/^(jpe?g|gif|png|bmp|webp)$/.test(fileTypeSpecific)) {\n      return true;\n    }\n    return false;\n  }\n  install() {\n    this.setPluginState({\n      currentImage: null\n    });\n    const target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    const _this$getPluginState3 = this.getPluginState(),\n      currentImage = _this$getPluginState3.currentImage;\n    if (currentImage) {\n      const file = this.uppy.getFile(currentImage.id);\n      this.uppy.emit('file-editor:cancel', file);\n    }\n    this.unmount();\n  }\n  render() {\n    const _this$getPluginState4 = this.getPluginState(),\n      currentImage = _this$getPluginState4.currentImage;\n    if (currentImage === null || currentImage.isRemote) {\n      return null;\n    }\n    return h(Editor, {\n      currentImage: currentImage,\n      storeCropperInstance: this.storeCropperInstance,\n      save: this.save,\n      opts: this.opts,\n      i18n: this.i18n\n    });\n  }\n}\nImageEditor.VERSION = packageJson.version;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}