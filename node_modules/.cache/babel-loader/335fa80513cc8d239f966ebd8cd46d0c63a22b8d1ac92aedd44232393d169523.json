{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar _require = require('preact'),\n  h = _require.h;\nvar SearchInput = require('./InputView');\nvar Browser = require('../Browser');\nvar LoaderView = require('../Loader');\nvar generateFileID = require('@uppy/utils/lib/generateFileID');\nvar getFileType = require('@uppy/utils/lib/getFileType');\nvar isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');\nvar Header = require('./Header');\nvar SharedHandler = require('../SharedHandler');\nvar CloseWrapper = require('../CloseWrapper');\n/**\n * Class to easily generate generic views for Provider plugins\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function () {\n  /**\n   * @param {object} plugin instance of the plugin\n   * @param {object} opts\n   */\n  function ProviderView(plugin, opts) {\n    this.plugin = plugin;\n    this.provider = opts.provider;\n    this._sharedHandler = new SharedHandler(plugin); // set default options\n\n    var defaultOptions = {\n      viewType: 'grid',\n      showTitles: false,\n      showFilter: false,\n      showBreadcrumbs: false\n    }; // merge default options with the ones set by user\n\n    this.opts = _extends({}, defaultOptions, opts); // Logic\n\n    this.search = this.search.bind(this);\n    this.triggerSearchInput = this.triggerSearchInput.bind(this);\n    this.addFile = this.addFile.bind(this);\n    this.preFirstRender = this.preFirstRender.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.donePicking = this.donePicking.bind(this);\n    this.cancelPicking = this.cancelPicking.bind(this);\n    this.clearSelection = this.clearSelection.bind(this); // Visual\n\n    this.render = this.render.bind(this);\n    this.clearSelection(); // Set default state for the plugin\n\n    this.plugin.setPluginState({\n      isInputMode: true,\n      files: [],\n      folders: [],\n      directories: [],\n      filterInput: '',\n      isSearchVisible: false\n    });\n  }\n  var _proto = ProviderView.prototype;\n  _proto.tearDown = function tearDown() {// Nothing.\n  };\n  _proto._updateFilesAndInputMode = function _updateFilesAndInputMode(res, files) {\n    this.nextPageQuery = res.nextPageQuery;\n    this._searchTerm = res.searchedFor;\n    res.items.forEach(function (item) {\n      files.push(item);\n    });\n    this.plugin.setPluginState({\n      isInputMode: false,\n      files: files\n    });\n  }\n  /**\n   * Called only the first time the provider view is rendered.\n   * Kind of like an init function.\n   */;\n\n  _proto.preFirstRender = function preFirstRender() {\n    this.plugin.setPluginState({\n      didFirstRender: true\n    });\n    this.plugin.onFirstRender();\n  };\n  _proto.search = function search(query) {\n    var _this = this;\n    if (query && query === this._searchTerm) {\n      // no need to search again as this is the same as the previous search\n      this.plugin.setPluginState({\n        isInputMode: false\n      });\n      return;\n    }\n    return this._sharedHandler.loaderWrapper(this.provider.search(query), function (res) {\n      _this._updateFilesAndInputMode(res, []);\n    }, this.handleError);\n  };\n  _proto.triggerSearchInput = function triggerSearchInput() {\n    this.plugin.setPluginState({\n      isInputMode: true\n    });\n  } // @todo this function should really be a function of the plugin and not the view.\n  // maybe we should consider creating a base ProviderPlugin class that has this method\n  ;\n\n  _proto.addFile = function addFile(file) {\n    var tagFile = {\n      id: this.providerFileToId(file),\n      source: this.plugin.id,\n      data: file,\n      name: file.name || file.id,\n      type: file.mimeType,\n      isRemote: true,\n      body: {\n        fileId: file.id\n      },\n      remote: {\n        companionUrl: this.plugin.opts.companionUrl,\n        url: \"\" + this.provider.fileUrl(file.requestPath),\n        body: {\n          fileId: file.id\n        },\n        providerOptions: _extends({}, this.provider.opts, {\n          provider: null\n        })\n      }\n    };\n    var fileType = getFileType(tagFile); // TODO Should we just always use the thumbnail URL if it exists?\n\n    if (fileType && isPreviewSupported(fileType)) {\n      tagFile.preview = file.thumbnail;\n    }\n    this.plugin.uppy.log('Adding remote file');\n    try {\n      this.plugin.uppy.addFile(tagFile);\n    } catch (err) {\n      if (!err.isRestriction) {\n        this.plugin.uppy.log(err);\n      }\n    }\n  };\n  _proto.providerFileToId = function providerFileToId(file) {\n    return generateFileID({\n      data: file,\n      name: file.name || file.id,\n      type: file.mimeType\n    });\n  };\n  _proto.handleError = function handleError(error) {\n    var uppy = this.plugin.uppy;\n    uppy.log(error.toString());\n    var message = uppy.i18n('companionError');\n    uppy.info({\n      message: message,\n      details: error.toString()\n    }, 'error', 5000);\n  };\n  _proto.handleScroll = function handleScroll(e) {\n    var _this2 = this;\n    var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);\n    var query = this.nextPageQuery || null;\n    if (scrollPos < 50 && query && !this._isHandlingScroll) {\n      this.provider.search(this._searchTerm, query).then(function (res) {\n        var _this2$plugin$getPlug = _this2.plugin.getPluginState(),\n          files = _this2$plugin$getPlug.files;\n        _this2._updateFilesAndInputMode(res, files);\n      }).catch(this.handleError).then(function () {\n        _this2._isHandlingScroll = false;\n      }); // always called\n\n      this._isHandlingScroll = true;\n    }\n  };\n  _proto.donePicking = function donePicking() {\n    var _this3 = this;\n    var _this$plugin$getPlugi = this.plugin.getPluginState(),\n      currentSelection = _this$plugin$getPlugi.currentSelection;\n    var promises = currentSelection.map(function (file) {\n      return _this3.addFile(file);\n    });\n    this._sharedHandler.loaderWrapper(Promise.all(promises), function () {\n      _this3.clearSelection();\n    }, function () {});\n  };\n  _proto.cancelPicking = function cancelPicking() {\n    this.clearSelection();\n    var dashboard = this.plugin.uppy.getPlugin('Dashboard');\n    if (dashboard) dashboard.hideAllPanels();\n  };\n  _proto.clearSelection = function clearSelection() {\n    this.plugin.setPluginState({\n      currentSelection: []\n    });\n  };\n  _proto.render = function render(state, viewOptions) {\n    if (viewOptions === void 0) {\n      viewOptions = {};\n    }\n    var _this$plugin$getPlugi2 = this.plugin.getPluginState(),\n      didFirstRender = _this$plugin$getPlugi2.didFirstRender,\n      isInputMode = _this$plugin$getPlugi2.isInputMode;\n    if (!didFirstRender) {\n      this.preFirstRender();\n    } // reload pluginState for \"loading\" attribute because it might\n    // have changed above.\n\n    if (this.plugin.getPluginState().loading) {\n      return h(CloseWrapper, {\n        onUnmount: this.clearSelection\n      }, h(LoaderView, {\n        i18n: this.plugin.uppy.i18n\n      }));\n    }\n    if (isInputMode) {\n      return h(CloseWrapper, {\n        onUnmount: this.clearSelection\n      }, h(SearchInput, {\n        search: this.search,\n        i18n: this.plugin.uppy.i18n\n      }));\n    }\n    var targetViewOptions = _extends({}, this.opts, viewOptions);\n    var browserProps = _extends({}, this.plugin.getPluginState(), {\n      isChecked: this._sharedHandler.isChecked,\n      toggleCheckbox: this._sharedHandler.toggleCheckbox,\n      handleScroll: this.handleScroll,\n      done: this.donePicking,\n      cancel: this.cancelPicking,\n      headerComponent: Header({\n        triggerSearchInput: this.triggerSearchInput,\n        i18n: this.plugin.uppy.i18n\n      }),\n      title: this.plugin.title,\n      viewType: targetViewOptions.viewType,\n      showTitles: targetViewOptions.showTitles,\n      showFilter: targetViewOptions.showFilter,\n      showBreadcrumbs: targetViewOptions.showBreadcrumbs,\n      pluginIcon: this.plugin.icon,\n      i18n: this.plugin.uppy.i18n,\n      uppyFiles: this.plugin.uppy.getFiles(),\n      validateRestrictions: this.plugin.uppy.validateRestrictions\n    });\n    return h(CloseWrapper, {\n      onUnmount: this.clearSelection\n    }, h(Browser, browserProps));\n  };\n  return ProviderView;\n}(), _class.VERSION = \"1.12.3\", _temp);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}