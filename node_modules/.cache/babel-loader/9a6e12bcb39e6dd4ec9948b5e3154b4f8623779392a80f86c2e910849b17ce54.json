{"ast":null,"code":"var fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError');\nvar URL = require('url-parse');\n/**\n * A Barebones HTTP API client for Transloadit.\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  function Client(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    this.opts = opts;\n    this._reportError = this._reportError.bind(this);\n    this._headers = {\n      'Transloadit-Client': this.opts.client\n    };\n  }\n  /**\n   * Create a new assembly.\n   *\n   * @param {object} options\n   * @param {string|object} options.params\n   * @param {object} options.fields\n   * @param {string} options.signature\n   * @param {number} options.expectedFiles\n   */\n\n  var _proto = Client.prototype;\n  _proto.createAssembly = function createAssembly(_ref) {\n    var _this = this;\n    var params = _ref.params,\n      fields = _ref.fields,\n      signature = _ref.signature,\n      expectedFiles = _ref.expectedFiles;\n    var data = new FormData();\n    data.append('params', typeof params === 'string' ? params : JSON.stringify(params));\n    if (signature) {\n      data.append('signature', signature);\n    }\n    Object.keys(fields).forEach(function (key) {\n      data.append(key, fields[key]);\n    });\n    data.append('num_expected_upload_files', expectedFiles);\n    var url = new URL('/assemblies', \"\" + this.opts.service).href;\n    return fetchWithNetworkError(url, {\n      method: 'post',\n      headers: this._headers,\n      body: data\n    }).then(function (response) {\n      return response.json();\n    }).then(function (assembly) {\n      if (assembly.error) {\n        var error = new Error(assembly.error);\n        error.details = assembly.message;\n        error.assembly = assembly;\n        if (assembly.assembly_id) {\n          error.details += ' ' + (\"Assembly ID: \" + assembly.assembly_id);\n        }\n        throw error;\n      }\n      return assembly;\n    }).catch(function (err) {\n      return _this._reportError(err, {\n        url: url,\n        type: 'API_ERROR'\n      });\n    });\n  }\n  /**\n   * Reserve resources for a file in an Assembly. Then addFile can be used later.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */;\n\n  _proto.reserveFile = function reserveFile(assembly, file) {\n    var _this2 = this;\n    var size = encodeURIComponent(file.size);\n    var url = assembly.assembly_ssl_url + \"/reserve_file?size=\" + size;\n    return fetchWithNetworkError(url, {\n      method: 'post',\n      headers: this._headers\n    }).then(function (response) {\n      return response.json();\n    }).catch(function (err) {\n      return _this2._reportError(err, {\n        assembly: assembly,\n        file: file,\n        url: url,\n        type: 'API_ERROR'\n      });\n    });\n  }\n  /**\n   * Import a remote file to an Assembly.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */;\n\n  _proto.addFile = function addFile(assembly, file) {\n    var _this3 = this;\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'));\n    }\n    var size = encodeURIComponent(file.size);\n    var uploadUrl = encodeURIComponent(file.uploadURL);\n    var filename = encodeURIComponent(file.name);\n    var fieldname = 'file';\n    var qs = \"size=\" + size + \"&filename=\" + filename + \"&fieldname=\" + fieldname + \"&s3Url=\" + uploadUrl;\n    var url = assembly.assembly_ssl_url + \"/add_file?\" + qs;\n    return fetchWithNetworkError(url, {\n      method: 'post',\n      headers: this._headers\n    }).then(function (response) {\n      return response.json();\n    }).catch(function (err) {\n      return _this3._reportError(err, {\n        assembly: assembly,\n        file: file,\n        url: url,\n        type: 'API_ERROR'\n      });\n    });\n  }\n  /**\n   * Cancel a running Assembly.\n   *\n   * @param {object} assembly\n   */;\n\n  _proto.cancelAssembly = function cancelAssembly(assembly) {\n    var _this4 = this;\n    var url = assembly.assembly_ssl_url;\n    return fetchWithNetworkError(url, {\n      method: 'delete',\n      headers: this._headers\n    }).then(function (response) {\n      return response.json();\n    }).catch(function (err) {\n      return _this4._reportError(err, {\n        url: url,\n        type: 'API_ERROR'\n      });\n    });\n  }\n  /**\n   * Get the current status for an assembly.\n   *\n   * @param {string} url The status endpoint of the assembly.\n   */;\n\n  _proto.getAssemblyStatus = function getAssemblyStatus(url) {\n    var _this5 = this;\n    return fetchWithNetworkError(url, {\n      headers: this._headers\n    }).then(function (response) {\n      return response.json();\n    }).catch(function (err) {\n      return _this5._reportError(err, {\n        url: url,\n        type: 'STATUS_ERROR'\n      });\n    });\n  };\n  _proto.submitError = function submitError(err, _ref2) {\n    var endpoint = _ref2.endpoint,\n      instance = _ref2.instance,\n      assembly = _ref2.assembly;\n    var message = err.details ? err.message + \" (\" + err.details + \")\" : err.message;\n    return fetchWithNetworkError('https://transloaditstatus.com/client_error', {\n      method: 'post',\n      body: JSON.stringify({\n        endpoint: endpoint,\n        instance: instance,\n        assembly_id: assembly,\n        agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        client: this.opts.client,\n        error: message\n      })\n    }).then(function (response) {\n      return response.json();\n    });\n  };\n  _proto._reportError = function _reportError(err, params) {\n    if (this.opts.errorReporting === false) {\n      throw err;\n    }\n    var opts = {\n      type: params.type\n    };\n    if (params.assembly) {\n      opts.assembly = params.assembly.assembly_id;\n      opts.instance = params.assembly.instance;\n    }\n    if (params.url) {\n      opts.endpoint = params.url;\n    }\n    this.submitError(err, opts).catch(function (_) {// not much we can do then is there\n    });\n    throw err;\n  };\n  return Client;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}