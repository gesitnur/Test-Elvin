{"ast":null,"code":"// Base object for different progress bar shapes\n\nvar Path = require('./path');\nvar utils = require('./utils');\nvar DESTROYED_ERROR = 'Object is destroyed';\nvar Shape = function Shape(container, opts) {\n  // Throw a better error if progress bars are not initialized with `new`\n  // keyword\n  if (!(this instanceof Shape)) {\n    throw new Error('Constructor was called without new keyword');\n  }\n\n  // Prevent calling constructor without parameters so inheritance\n  // works correctly. To understand, this is how Shape is inherited:\n  //\n  //   Line.prototype = new Shape();\n  //\n  // We just want to set the prototype for Line.\n  if (arguments.length === 0) {\n    return;\n  }\n\n  // Default parameters for progress bar creation\n  this._opts = utils.extend({\n    color: '#555',\n    strokeWidth: 1.0,\n    trailColor: null,\n    trailWidth: null,\n    fill: null,\n    text: {\n      style: {\n        color: null,\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        padding: 0,\n        margin: 0,\n        transform: {\n          prefix: true,\n          value: 'translate(-50%, -50%)'\n        }\n      },\n      autoStyleContainer: true,\n      alignToBottom: true,\n      value: null,\n      className: 'progressbar-text'\n    },\n    svgStyle: {\n      display: 'block',\n      width: '100%'\n    },\n    warnings: false\n  }, opts, true); // Use recursive extend\n\n  // If user specifies e.g. svgStyle or text style, the whole object\n  // should replace the defaults to make working with styles easier\n  if (utils.isObject(opts) && opts.svgStyle !== undefined) {\n    this._opts.svgStyle = opts.svgStyle;\n  }\n  if (utils.isObject(opts) && utils.isObject(opts.text) && opts.text.style !== undefined) {\n    this._opts.text.style = opts.text.style;\n  }\n  var svgView = this._createSvgView(this._opts);\n  var element;\n  if (utils.isString(container)) {\n    element = document.querySelector(container);\n  } else {\n    element = container;\n  }\n  if (!element) {\n    throw new Error('Container does not exist: ' + container);\n  }\n  this._container = element;\n  this._container.appendChild(svgView.svg);\n  if (this._opts.warnings) {\n    this._warnContainerAspectRatio(this._container);\n  }\n  if (this._opts.svgStyle) {\n    utils.setStyles(svgView.svg, this._opts.svgStyle);\n  }\n\n  // Expose public attributes before Path initialization\n  this.svg = svgView.svg;\n  this.path = svgView.path;\n  this.trail = svgView.trail;\n  this.text = null;\n  var newOpts = utils.extend({\n    attachment: undefined,\n    shape: this\n  }, this._opts);\n  this._progressPath = new Path(svgView.path, newOpts);\n  if (utils.isObject(this._opts.text) && this._opts.text.value !== null) {\n    this.setText(this._opts.text.value);\n  }\n};\nShape.prototype.animate = function animate(progress, opts, cb) {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  this._progressPath.animate(progress, opts, cb);\n};\nShape.prototype.stop = function stop() {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n\n  // Don't crash if stop is called inside step function\n  if (this._progressPath === undefined) {\n    return;\n  }\n  this._progressPath.stop();\n};\nShape.prototype.pause = function pause() {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  if (this._progressPath === undefined) {\n    return;\n  }\n  if (!this._progressPath._tweenable) {\n    // It seems that we can't pause this\n    return;\n  }\n  this._progressPath._tweenable.pause();\n};\nShape.prototype.resume = function resume() {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  if (this._progressPath === undefined) {\n    return;\n  }\n  if (!this._progressPath._tweenable) {\n    // It seems that we can't resume this\n    return;\n  }\n  this._progressPath._tweenable.resume();\n};\nShape.prototype.destroy = function destroy() {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  this.stop();\n  this.svg.parentNode.removeChild(this.svg);\n  this.svg = null;\n  this.path = null;\n  this.trail = null;\n  this._progressPath = null;\n  if (this.text !== null) {\n    this.text.parentNode.removeChild(this.text);\n    this.text = null;\n  }\n};\nShape.prototype.set = function set(progress) {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  this._progressPath.set(progress);\n};\nShape.prototype.value = function value() {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  if (this._progressPath === undefined) {\n    return 0;\n  }\n  return this._progressPath.value();\n};\nShape.prototype.setText = function setText(newText) {\n  if (this._progressPath === null) {\n    throw new Error(DESTROYED_ERROR);\n  }\n  if (this.text === null) {\n    // Create new text node\n    this.text = this._createTextContainer(this._opts, this._container);\n    this._container.appendChild(this.text);\n  }\n\n  // Remove previous text and add new\n  if (utils.isObject(newText)) {\n    utils.removeChildren(this.text);\n    this.text.appendChild(newText);\n  } else {\n    this.text.innerHTML = newText;\n  }\n};\nShape.prototype._createSvgView = function _createSvgView(opts) {\n  var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  this._initializeSvg(svg, opts);\n  var trailPath = null;\n  // Each option listed in the if condition are 'triggers' for creating\n  // the trail path\n  if (opts.trailColor || opts.trailWidth) {\n    trailPath = this._createTrail(opts);\n    svg.appendChild(trailPath);\n  }\n  var path = this._createPath(opts);\n  svg.appendChild(path);\n  return {\n    svg: svg,\n    path: path,\n    trail: trailPath\n  };\n};\nShape.prototype._initializeSvg = function _initializeSvg(svg, opts) {\n  svg.setAttribute('viewBox', '0 0 100 100');\n};\nShape.prototype._createPath = function _createPath(opts) {\n  var pathString = this._pathString(opts);\n  return this._createPathElement(pathString, opts);\n};\nShape.prototype._createTrail = function _createTrail(opts) {\n  // Create path string with original passed options\n  var pathString = this._trailString(opts);\n\n  // Prevent modifying original\n  var newOpts = utils.extend({}, opts);\n\n  // Defaults for parameters which modify trail path\n  if (!newOpts.trailColor) {\n    newOpts.trailColor = '#eee';\n  }\n  if (!newOpts.trailWidth) {\n    newOpts.trailWidth = newOpts.strokeWidth;\n  }\n  newOpts.color = newOpts.trailColor;\n  newOpts.strokeWidth = newOpts.trailWidth;\n\n  // When trail path is set, fill must be set for it instead of the\n  // actual path to prevent trail stroke from clipping\n  newOpts.fill = null;\n  return this._createPathElement(pathString, newOpts);\n};\nShape.prototype._createPathElement = function _createPathElement(pathString, opts) {\n  var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  path.setAttribute('d', pathString);\n  path.setAttribute('stroke', opts.color);\n  path.setAttribute('stroke-width', opts.strokeWidth);\n  if (opts.fill) {\n    path.setAttribute('fill', opts.fill);\n  } else {\n    path.setAttribute('fill-opacity', '0');\n  }\n  return path;\n};\nShape.prototype._createTextContainer = function _createTextContainer(opts, container) {\n  var textContainer = document.createElement('div');\n  textContainer.className = opts.text.className;\n  var textStyle = opts.text.style;\n  if (textStyle) {\n    if (opts.text.autoStyleContainer) {\n      container.style.position = 'relative';\n    }\n    utils.setStyles(textContainer, textStyle);\n    // Default text color to progress bar's color\n    if (!textStyle.color) {\n      textContainer.style.color = opts.color;\n    }\n  }\n  this._initializeTextContainer(opts, container, textContainer);\n  return textContainer;\n};\n\n// Give custom shapes possibility to modify text element\nShape.prototype._initializeTextContainer = function (opts, container, element) {\n  // By default, no-op\n  // Custom shapes should respect API options, such as text.style\n};\nShape.prototype._pathString = function _pathString(opts) {\n  throw new Error('Override this function for each progress bar');\n};\nShape.prototype._trailString = function _trailString(opts) {\n  throw new Error('Override this function for each progress bar');\n};\nShape.prototype._warnContainerAspectRatio = function _warnContainerAspectRatio(container) {\n  if (!this.containerAspectRatio) {\n    return;\n  }\n  var computedStyle = window.getComputedStyle(container, null);\n  var width = parseFloat(computedStyle.getPropertyValue('width'), 10);\n  var height = parseFloat(computedStyle.getPropertyValue('height'), 10);\n  if (!utils.floatEquals(this.containerAspectRatio, width / height)) {\n    console.warn('Incorrect aspect ratio of container', '#' + container.id, 'detected:', computedStyle.getPropertyValue('width') + '(width)', '/', computedStyle.getPropertyValue('height') + '(height)', '=', width / height);\n    console.warn('Aspect ratio of should be', this.containerAspectRatio);\n  }\n};\nmodule.exports = Shape;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}