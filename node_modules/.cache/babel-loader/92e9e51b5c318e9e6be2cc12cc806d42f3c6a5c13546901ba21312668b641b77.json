{"ast":null,"code":"const isSupported = typeof navigator !== 'undefined' && 'serviceWorker' in navigator;\nfunction waitForServiceWorker() {\n  return new Promise((resolve, reject) => {\n    if (!isSupported) {\n      reject(new Error('Unsupported'));\n    } else if (navigator.serviceWorker.controller) {\n      // A serviceWorker is already registered and active.\n      resolve();\n    } else {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        resolve();\n      });\n    }\n  });\n}\nclass ServiceWorkerStore {\n  constructor(opts) {\n    this.ready = waitForServiceWorker();\n    this.name = opts.storeName;\n  }\n  list() {\n    const defer = {};\n    const promise = new Promise((resolve, reject) => {\n      defer.resolve = resolve;\n      defer.reject = reject;\n    });\n    const onMessage = event => {\n      if (event.data.store !== this.name) {\n        return;\n      }\n      switch (event.data.type) {\n        case 'uppy/ALL_FILES':\n          defer.resolve(event.data.files);\n          navigator.serviceWorker.removeEventListener('message', onMessage);\n          break;\n        default:\n          defer.reject();\n      }\n    };\n    this.ready.then(() => {\n      navigator.serviceWorker.addEventListener('message', onMessage);\n      navigator.serviceWorker.controller.postMessage({\n        type: 'uppy/GET_FILES',\n        store: this.name\n      });\n    });\n    return promise;\n  }\n  put(file) {\n    return this.ready.then(() => {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'uppy/ADD_FILE',\n        store: this.name,\n        file\n      });\n    });\n  }\n  delete(fileID) {\n    return this.ready.then(() => {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'uppy/REMOVE_FILE',\n        store: this.name,\n        fileID\n      });\n    });\n  }\n}\nServiceWorkerStore.isSupported = isSupported;\nexport default ServiceWorkerStore;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}